/*
Public EMMA API

**Base URL:** *<u>https://api.emma.ms/external</u>*  This **Infrastructure API** is for managing the cloud infrastructure within a project.  To access the API, enter your project, navigate to **Settings** > **Service Apps**, and create a service application. Select the access level **Read**, **Operate**, or **Manage**.  After creating the service application, copy the **Client ID** and **Client Secret**. Send an API request to the endpoint **_/issue-token** as specified in the **Authentication** section of the API documentation. You will receive access and refresh tokens in the response.  The Bearer access token is a text string, included in the request header, example:  *-H Authorization: Bearer {token}*  Use this token for API requests. The access token will expire in 10 minutes. A new access token may be created using the refresh token (without Client ID and Client Secret).

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emma

import (
	"encoding/json"
)

// checks if the SortObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SortObject{}

// SortObject struct for SortObject
type SortObject struct {
	Empty    *bool `json:"empty,omitempty"`
	Unsorted *bool `json:"unsorted,omitempty"`
	Sorted   *bool `json:"sorted,omitempty"`
}

// NewSortObject instantiates a new SortObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSortObject() *SortObject {
	this := SortObject{}
	return &this
}

// NewSortObjectWithDefaults instantiates a new SortObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSortObjectWithDefaults() *SortObject {
	this := SortObject{}
	return &this
}

// GetEmpty returns the Empty field value if set, zero value otherwise.
func (o *SortObject) GetEmpty() bool {
	if o == nil || IsNil(o.Empty) {
		var ret bool
		return ret
	}
	return *o.Empty
}

// GetEmptyOk returns a tuple with the Empty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SortObject) GetEmptyOk() (*bool, bool) {
	if o == nil || IsNil(o.Empty) {
		return nil, false
	}
	return o.Empty, true
}

// HasEmpty returns a boolean if a field has been set.
func (o *SortObject) HasEmpty() bool {
	if o != nil && !IsNil(o.Empty) {
		return true
	}

	return false
}

// SetEmpty gets a reference to the given bool and assigns it to the Empty field.
func (o *SortObject) SetEmpty(v bool) {
	o.Empty = &v
}

// GetUnsorted returns the Unsorted field value if set, zero value otherwise.
func (o *SortObject) GetUnsorted() bool {
	if o == nil || IsNil(o.Unsorted) {
		var ret bool
		return ret
	}
	return *o.Unsorted
}

// GetUnsortedOk returns a tuple with the Unsorted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SortObject) GetUnsortedOk() (*bool, bool) {
	if o == nil || IsNil(o.Unsorted) {
		return nil, false
	}
	return o.Unsorted, true
}

// HasUnsorted returns a boolean if a field has been set.
func (o *SortObject) HasUnsorted() bool {
	if o != nil && !IsNil(o.Unsorted) {
		return true
	}

	return false
}

// SetUnsorted gets a reference to the given bool and assigns it to the Unsorted field.
func (o *SortObject) SetUnsorted(v bool) {
	o.Unsorted = &v
}

// GetSorted returns the Sorted field value if set, zero value otherwise.
func (o *SortObject) GetSorted() bool {
	if o == nil || IsNil(o.Sorted) {
		var ret bool
		return ret
	}
	return *o.Sorted
}

// GetSortedOk returns a tuple with the Sorted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SortObject) GetSortedOk() (*bool, bool) {
	if o == nil || IsNil(o.Sorted) {
		return nil, false
	}
	return o.Sorted, true
}

// HasSorted returns a boolean if a field has been set.
func (o *SortObject) HasSorted() bool {
	if o != nil && !IsNil(o.Sorted) {
		return true
	}

	return false
}

// SetSorted gets a reference to the given bool and assigns it to the Sorted field.
func (o *SortObject) SetSorted(v bool) {
	o.Sorted = &v
}

func (o SortObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SortObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Empty) {
		toSerialize["empty"] = o.Empty
	}
	if !IsNil(o.Unsorted) {
		toSerialize["unsorted"] = o.Unsorted
	}
	if !IsNil(o.Sorted) {
		toSerialize["sorted"] = o.Sorted
	}
	return toSerialize, nil
}

type NullableSortObject struct {
	value *SortObject
	isSet bool
}

func (v NullableSortObject) Get() *SortObject {
	return v.value
}

func (v *NullableSortObject) Set(val *SortObject) {
	v.value = val
	v.isSet = true
}

func (v NullableSortObject) IsSet() bool {
	return v.isSet
}

func (v *NullableSortObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSortObject(val *SortObject) *NullableSortObject {
	return &NullableSortObject{value: val, isSet: true}
}

func (v NullableSortObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSortObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
