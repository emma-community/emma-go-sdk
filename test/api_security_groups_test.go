/*
Public EMMA API

Testing SecurityGroupsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package emma

import (
	"context"
	openapiclient "github.com/emma-community/emma-go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_emma_SecurityGroupsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SecurityGroupsAPIService GetSecurityGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var securityGroupId int32

		resp, httpRes, err := apiClient.SecurityGroupsAPI.GetSecurityGroup(context.Background(), securityGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityGroupsAPIService GetSecurityGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityGroupsAPI.GetSecurityGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityGroupsAPIService SecurityGroupCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SecurityGroupsAPI.SecurityGroupCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityGroupsAPIService SecurityGroupDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var securityGroupId int32

		resp, httpRes, err := apiClient.SecurityGroupsAPI.SecurityGroupDelete(context.Background(), securityGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityGroupsAPIService SecurityGroupInstanceAdd", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var securityGroupId int32

		resp, httpRes, err := apiClient.SecurityGroupsAPI.SecurityGroupInstanceAdd(context.Background(), securityGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityGroupsAPIService SecurityGroupInstances", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var securityGroupId int32

		resp, httpRes, err := apiClient.SecurityGroupsAPI.SecurityGroupInstances(context.Background(), securityGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SecurityGroupsAPIService SecurityGroupUpdate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var securityGroupId int32

		resp, httpRes, err := apiClient.SecurityGroupsAPI.SecurityGroupUpdate(context.Background(), securityGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
