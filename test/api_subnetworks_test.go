/*
Public EMMA API

Testing SubnetworksAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package emma

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/emma-community/emma-go-sdk"
)

func Test_emma_SubnetworksAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SubnetworksAPIService V1SubnetworksGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SubnetworksAPI.V1SubnetworksGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubnetworksAPIService V1SubnetworksPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SubnetworksAPI.V1SubnetworksPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubnetworksAPIService V1SubnetworksSubnetworkIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subnetworkId string

		resp, httpRes, err := apiClient.SubnetworksAPI.V1SubnetworksSubnetworkIdDelete(context.Background(), subnetworkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubnetworksAPIService V1SubnetworksSubnetworkIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subnetworkId string

		resp, httpRes, err := apiClient.SubnetworksAPI.V1SubnetworksSubnetworkIdGet(context.Background(), subnetworkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubnetworksAPIService V1SubnetworksSubnetworkIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var subnetworkId string

		resp, httpRes, err := apiClient.SubnetworksAPI.V1SubnetworksSubnetworkIdPut(context.Background(), subnetworkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
