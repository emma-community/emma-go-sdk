/*
Public EMMA API

Testing SpotInstancesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package emma

import (
	"context"
	openapiclient "github.com/emma-community/emma-go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_emma_SpotInstancesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SpotInstancesAPIService GetSpot", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var spotInstanceId int32

		resp, httpRes, err := apiClient.SpotInstancesAPI.GetSpot(context.Background(), spotInstanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpotInstancesAPIService GetSpots", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SpotInstancesAPI.GetSpots(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpotInstancesAPIService SpotActions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var spotInstanceId int32

		resp, httpRes, err := apiClient.SpotInstancesAPI.SpotActions(context.Background(), spotInstanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpotInstancesAPIService SpotCreate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SpotInstancesAPI.SpotCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SpotInstancesAPIService SpotDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var spotInstanceId int32

		resp, httpRes, err := apiClient.SpotInstancesAPI.SpotDelete(context.Background(), spotInstanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
