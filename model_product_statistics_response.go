/*
Public EMMA API

### About Infrastructure API  **Base URL:** **<u>https://api.emma.ms/external</u>**   This **Infrastructure API** is for managing the emma cloud infrastructure within a project. The API enables you to view, create, edit, and delete _Virtual machines, Spot instances, Applications, Kubernetes clusters, SSH keys, Security groups, and Backup policies_. For creating the resources you can use the endpoints with the dictionaries: _Data centers, Locations, Providers, Operating systems, Virtual machines configurations, Spot instances configurations, Kubernetes clusters configurations._   ### Authentication   #### 1. Create service application   To access the API, enter your project, navigate to **Settings** > **Service Apps**, and create a service application. Select the access level **Read**, **Operate**, or **Manage**.   - **Read** - only GET methods are allowed in the API.   - **Operate** - some operations are allowed with the resources (e.g. _Start, Reboot,_ and _Shutdown_ of the Virtual machines).   - **Manage** - full creating, updating, and deleting of the resources is allowed.    #### 2. Get access token   - Copy the **Client ID** and **Client Secret** in the service application.  - Send an API request to the endpoint **_/issue-token** as specified in the **Authentication** section of the API documentation. You will receive access and refresh tokens in the response.   _For Linux / Mac:_  ```  curl -X POST https://api.emma.ms/external/v1/issue-token \\  -H \"Content-Type: application/json\" \\  -d '{\"clientId\": \"YOUR-CLIENT-ID\", \"clientSecret\": \"YOUR-CLIENT-SECRET\"}'  ```  _For Windows:_  ```  curl -X POST https://api.emma.ms/external/v1/issue-token ^  -H \"Content-Type: application/json\" ^  -d \"{\\\"clientId\\\": \\\"YOUR-CLIENT-ID\\\", \\\"clientSecret\\\": \\\"YOUR-CLIENT-SECRET\\\"}\"  ```   #### 3. Use access token in requests  The Bearer access token is a text string, included in the request header, for example:   _For Linux / Mac:_  ```  curl -X GET https://api.emma.ms/external/v1/locations -H \"Authorization: Bearer YOUR-ACCESS-TOKEN-HERE\"  ```   Use this token for the API requests.    #### 4. Refresh token  The access token will expire in 10 minutes. A new access token may be created using the refresh token (without Client ID and Client Secret).   To get a new access token send a request to the **_/refresh-token** endpoint:    _For Linux / Mac:_  ```  curl -X POST https://api.emma.ms/external/v1/refresh-token \\  -H \"Content-Type: application/json\" \\  -d '{\"refreshToken\": \"YOUR-REFRESH-TOKEN\"}'  ```       ### Possible response status codes   We use standard HTTP response codes to show the success or failure of requests.   `2xx` - successful responses.   `4xx` - client error responses (the response contains an explanation of the error).   `5xx` - server error responses.   The API uses the following status codes:   | Status Code | Description                  | Notes                                                                  |  |-------------|------------------------------|------------------------------------------------------------------------|  | 200         | OK                           | The request was successful.                                             |  | 201         | Created                      | The object was successfully created. This code is only used with objects that are created immediately.  | 204         | No content                   | A successful request, but there is no additional information to send back in the response body (in a case when the object was deleted).    | 400         | Bad Request                  | The request could not be understood by the server. Incoming parameters might not be valid. |  | 401         | Unauthorized            | The client is unauthenticated. The client must authenticate itself to get the requested response. |  | 403         | Forbidden                   | The client does not have access rights to the content.  | 404         | Not Found                    | The requested resource is not found.                                    |  | 409         | Conflict | This response is sent when a request conflicts with the current state of the object (e.g. deleting the security group with the compute instances in it).|  | 422         | Unprocessable Content   | The request was well-formed but was unable to be followed due to incorrect field values (e.g. creation of a virtual machine in the non-existent data center).  |  | 500         | Internal server Error                 | The server could not return the representation due to an internal server error. | 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emma

import (
	"encoding/json"
)

// checks if the ProductStatisticsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductStatisticsResponse{}

// ProductStatisticsResponse struct for ProductStatisticsResponse
type ProductStatisticsResponse struct {
	// emma's internal service type
	Service *string `json:"service,omitempty"`
	// ID of VM
	VmId *int32 `json:"vmId,omitempty"`
	// VM name
	VmName *string `json:"vmName,omitempty"`
	// ID of a head product
	HeadProductId *int32 `json:"headProductId,omitempty"`
	// Head product name
	HeadProductName *string `json:"headProductName,omitempty"`
	// User currency
	Currency *string `json:"currency,omitempty"`
	// Product monthly cost
	Cost *float32 `json:"cost,omitempty"`
	// Provider name
	ProviderName *string `json:"providerName,omitempty"`
	// Location country
	Country *string `json:"country,omitempty"`
	// Location name
	Location *string `json:"location,omitempty"`
	// Location latitude
	Latitude *float32 `json:"latitude,omitempty"`
	// Location longitude
	Longitude *float32 `json:"longitude,omitempty"`
	// Product UI status
	StatusNormalized *string `json:"statusNormalized,omitempty"`
	// Total CPU, vCPUs
	CpuTotal *float32 `json:"cpuTotal,omitempty"`
	// Total memory, MB
	RamTotal *float32 `json:"ramTotal,omitempty"`
	// Total disk size, GB
	DiskUsageTotal *float32 `json:"diskUsageTotal,omitempty"`
	// Average CPU utilization for the last hour
	CpuUsage *float32 `json:"cpuUsage,omitempty"`
	// Average memory utilization for the last hour
	RamUsage *float32 `json:"ramUsage,omitempty"`
	// Average disk utilization for the last hour
	DiskUsage *float32 `json:"diskUsage,omitempty"`
	// Internal service parameter
	EmptyValue *int32 `json:"emptyValue,omitempty"`
}

// NewProductStatisticsResponse instantiates a new ProductStatisticsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductStatisticsResponse() *ProductStatisticsResponse {
	this := ProductStatisticsResponse{}
	return &this
}

// NewProductStatisticsResponseWithDefaults instantiates a new ProductStatisticsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductStatisticsResponseWithDefaults() *ProductStatisticsResponse {
	this := ProductStatisticsResponse{}
	return &this
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *ProductStatisticsResponse) GetService() string {
	if o == nil || IsNil(o.Service) {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductStatisticsResponse) GetServiceOk() (*string, bool) {
	if o == nil || IsNil(o.Service) {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *ProductStatisticsResponse) HasService() bool {
	if o != nil && !IsNil(o.Service) {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *ProductStatisticsResponse) SetService(v string) {
	o.Service = &v
}

// GetVmId returns the VmId field value if set, zero value otherwise.
func (o *ProductStatisticsResponse) GetVmId() int32 {
	if o == nil || IsNil(o.VmId) {
		var ret int32
		return ret
	}
	return *o.VmId
}

// GetVmIdOk returns a tuple with the VmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductStatisticsResponse) GetVmIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VmId) {
		return nil, false
	}
	return o.VmId, true
}

// HasVmId returns a boolean if a field has been set.
func (o *ProductStatisticsResponse) HasVmId() bool {
	if o != nil && !IsNil(o.VmId) {
		return true
	}

	return false
}

// SetVmId gets a reference to the given int32 and assigns it to the VmId field.
func (o *ProductStatisticsResponse) SetVmId(v int32) {
	o.VmId = &v
}

// GetVmName returns the VmName field value if set, zero value otherwise.
func (o *ProductStatisticsResponse) GetVmName() string {
	if o == nil || IsNil(o.VmName) {
		var ret string
		return ret
	}
	return *o.VmName
}

// GetVmNameOk returns a tuple with the VmName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductStatisticsResponse) GetVmNameOk() (*string, bool) {
	if o == nil || IsNil(o.VmName) {
		return nil, false
	}
	return o.VmName, true
}

// HasVmName returns a boolean if a field has been set.
func (o *ProductStatisticsResponse) HasVmName() bool {
	if o != nil && !IsNil(o.VmName) {
		return true
	}

	return false
}

// SetVmName gets a reference to the given string and assigns it to the VmName field.
func (o *ProductStatisticsResponse) SetVmName(v string) {
	o.VmName = &v
}

// GetHeadProductId returns the HeadProductId field value if set, zero value otherwise.
func (o *ProductStatisticsResponse) GetHeadProductId() int32 {
	if o == nil || IsNil(o.HeadProductId) {
		var ret int32
		return ret
	}
	return *o.HeadProductId
}

// GetHeadProductIdOk returns a tuple with the HeadProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductStatisticsResponse) GetHeadProductIdOk() (*int32, bool) {
	if o == nil || IsNil(o.HeadProductId) {
		return nil, false
	}
	return o.HeadProductId, true
}

// HasHeadProductId returns a boolean if a field has been set.
func (o *ProductStatisticsResponse) HasHeadProductId() bool {
	if o != nil && !IsNil(o.HeadProductId) {
		return true
	}

	return false
}

// SetHeadProductId gets a reference to the given int32 and assigns it to the HeadProductId field.
func (o *ProductStatisticsResponse) SetHeadProductId(v int32) {
	o.HeadProductId = &v
}

// GetHeadProductName returns the HeadProductName field value if set, zero value otherwise.
func (o *ProductStatisticsResponse) GetHeadProductName() string {
	if o == nil || IsNil(o.HeadProductName) {
		var ret string
		return ret
	}
	return *o.HeadProductName
}

// GetHeadProductNameOk returns a tuple with the HeadProductName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductStatisticsResponse) GetHeadProductNameOk() (*string, bool) {
	if o == nil || IsNil(o.HeadProductName) {
		return nil, false
	}
	return o.HeadProductName, true
}

// HasHeadProductName returns a boolean if a field has been set.
func (o *ProductStatisticsResponse) HasHeadProductName() bool {
	if o != nil && !IsNil(o.HeadProductName) {
		return true
	}

	return false
}

// SetHeadProductName gets a reference to the given string and assigns it to the HeadProductName field.
func (o *ProductStatisticsResponse) SetHeadProductName(v string) {
	o.HeadProductName = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *ProductStatisticsResponse) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductStatisticsResponse) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *ProductStatisticsResponse) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *ProductStatisticsResponse) SetCurrency(v string) {
	o.Currency = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *ProductStatisticsResponse) GetCost() float32 {
	if o == nil || IsNil(o.Cost) {
		var ret float32
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductStatisticsResponse) GetCostOk() (*float32, bool) {
	if o == nil || IsNil(o.Cost) {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *ProductStatisticsResponse) HasCost() bool {
	if o != nil && !IsNil(o.Cost) {
		return true
	}

	return false
}

// SetCost gets a reference to the given float32 and assigns it to the Cost field.
func (o *ProductStatisticsResponse) SetCost(v float32) {
	o.Cost = &v
}

// GetProviderName returns the ProviderName field value if set, zero value otherwise.
func (o *ProductStatisticsResponse) GetProviderName() string {
	if o == nil || IsNil(o.ProviderName) {
		var ret string
		return ret
	}
	return *o.ProviderName
}

// GetProviderNameOk returns a tuple with the ProviderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductStatisticsResponse) GetProviderNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderName) {
		return nil, false
	}
	return o.ProviderName, true
}

// HasProviderName returns a boolean if a field has been set.
func (o *ProductStatisticsResponse) HasProviderName() bool {
	if o != nil && !IsNil(o.ProviderName) {
		return true
	}

	return false
}

// SetProviderName gets a reference to the given string and assigns it to the ProviderName field.
func (o *ProductStatisticsResponse) SetProviderName(v string) {
	o.ProviderName = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *ProductStatisticsResponse) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductStatisticsResponse) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *ProductStatisticsResponse) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *ProductStatisticsResponse) SetCountry(v string) {
	o.Country = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ProductStatisticsResponse) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductStatisticsResponse) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ProductStatisticsResponse) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *ProductStatisticsResponse) SetLocation(v string) {
	o.Location = &v
}

// GetLatitude returns the Latitude field value if set, zero value otherwise.
func (o *ProductStatisticsResponse) GetLatitude() float32 {
	if o == nil || IsNil(o.Latitude) {
		var ret float32
		return ret
	}
	return *o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductStatisticsResponse) GetLatitudeOk() (*float32, bool) {
	if o == nil || IsNil(o.Latitude) {
		return nil, false
	}
	return o.Latitude, true
}

// HasLatitude returns a boolean if a field has been set.
func (o *ProductStatisticsResponse) HasLatitude() bool {
	if o != nil && !IsNil(o.Latitude) {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given float32 and assigns it to the Latitude field.
func (o *ProductStatisticsResponse) SetLatitude(v float32) {
	o.Latitude = &v
}

// GetLongitude returns the Longitude field value if set, zero value otherwise.
func (o *ProductStatisticsResponse) GetLongitude() float32 {
	if o == nil || IsNil(o.Longitude) {
		var ret float32
		return ret
	}
	return *o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductStatisticsResponse) GetLongitudeOk() (*float32, bool) {
	if o == nil || IsNil(o.Longitude) {
		return nil, false
	}
	return o.Longitude, true
}

// HasLongitude returns a boolean if a field has been set.
func (o *ProductStatisticsResponse) HasLongitude() bool {
	if o != nil && !IsNil(o.Longitude) {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given float32 and assigns it to the Longitude field.
func (o *ProductStatisticsResponse) SetLongitude(v float32) {
	o.Longitude = &v
}

// GetStatusNormalized returns the StatusNormalized field value if set, zero value otherwise.
func (o *ProductStatisticsResponse) GetStatusNormalized() string {
	if o == nil || IsNil(o.StatusNormalized) {
		var ret string
		return ret
	}
	return *o.StatusNormalized
}

// GetStatusNormalizedOk returns a tuple with the StatusNormalized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductStatisticsResponse) GetStatusNormalizedOk() (*string, bool) {
	if o == nil || IsNil(o.StatusNormalized) {
		return nil, false
	}
	return o.StatusNormalized, true
}

// HasStatusNormalized returns a boolean if a field has been set.
func (o *ProductStatisticsResponse) HasStatusNormalized() bool {
	if o != nil && !IsNil(o.StatusNormalized) {
		return true
	}

	return false
}

// SetStatusNormalized gets a reference to the given string and assigns it to the StatusNormalized field.
func (o *ProductStatisticsResponse) SetStatusNormalized(v string) {
	o.StatusNormalized = &v
}

// GetCpuTotal returns the CpuTotal field value if set, zero value otherwise.
func (o *ProductStatisticsResponse) GetCpuTotal() float32 {
	if o == nil || IsNil(o.CpuTotal) {
		var ret float32
		return ret
	}
	return *o.CpuTotal
}

// GetCpuTotalOk returns a tuple with the CpuTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductStatisticsResponse) GetCpuTotalOk() (*float32, bool) {
	if o == nil || IsNil(o.CpuTotal) {
		return nil, false
	}
	return o.CpuTotal, true
}

// HasCpuTotal returns a boolean if a field has been set.
func (o *ProductStatisticsResponse) HasCpuTotal() bool {
	if o != nil && !IsNil(o.CpuTotal) {
		return true
	}

	return false
}

// SetCpuTotal gets a reference to the given float32 and assigns it to the CpuTotal field.
func (o *ProductStatisticsResponse) SetCpuTotal(v float32) {
	o.CpuTotal = &v
}

// GetRamTotal returns the RamTotal field value if set, zero value otherwise.
func (o *ProductStatisticsResponse) GetRamTotal() float32 {
	if o == nil || IsNil(o.RamTotal) {
		var ret float32
		return ret
	}
	return *o.RamTotal
}

// GetRamTotalOk returns a tuple with the RamTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductStatisticsResponse) GetRamTotalOk() (*float32, bool) {
	if o == nil || IsNil(o.RamTotal) {
		return nil, false
	}
	return o.RamTotal, true
}

// HasRamTotal returns a boolean if a field has been set.
func (o *ProductStatisticsResponse) HasRamTotal() bool {
	if o != nil && !IsNil(o.RamTotal) {
		return true
	}

	return false
}

// SetRamTotal gets a reference to the given float32 and assigns it to the RamTotal field.
func (o *ProductStatisticsResponse) SetRamTotal(v float32) {
	o.RamTotal = &v
}

// GetDiskUsageTotal returns the DiskUsageTotal field value if set, zero value otherwise.
func (o *ProductStatisticsResponse) GetDiskUsageTotal() float32 {
	if o == nil || IsNil(o.DiskUsageTotal) {
		var ret float32
		return ret
	}
	return *o.DiskUsageTotal
}

// GetDiskUsageTotalOk returns a tuple with the DiskUsageTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductStatisticsResponse) GetDiskUsageTotalOk() (*float32, bool) {
	if o == nil || IsNil(o.DiskUsageTotal) {
		return nil, false
	}
	return o.DiskUsageTotal, true
}

// HasDiskUsageTotal returns a boolean if a field has been set.
func (o *ProductStatisticsResponse) HasDiskUsageTotal() bool {
	if o != nil && !IsNil(o.DiskUsageTotal) {
		return true
	}

	return false
}

// SetDiskUsageTotal gets a reference to the given float32 and assigns it to the DiskUsageTotal field.
func (o *ProductStatisticsResponse) SetDiskUsageTotal(v float32) {
	o.DiskUsageTotal = &v
}

// GetCpuUsage returns the CpuUsage field value if set, zero value otherwise.
func (o *ProductStatisticsResponse) GetCpuUsage() float32 {
	if o == nil || IsNil(o.CpuUsage) {
		var ret float32
		return ret
	}
	return *o.CpuUsage
}

// GetCpuUsageOk returns a tuple with the CpuUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductStatisticsResponse) GetCpuUsageOk() (*float32, bool) {
	if o == nil || IsNil(o.CpuUsage) {
		return nil, false
	}
	return o.CpuUsage, true
}

// HasCpuUsage returns a boolean if a field has been set.
func (o *ProductStatisticsResponse) HasCpuUsage() bool {
	if o != nil && !IsNil(o.CpuUsage) {
		return true
	}

	return false
}

// SetCpuUsage gets a reference to the given float32 and assigns it to the CpuUsage field.
func (o *ProductStatisticsResponse) SetCpuUsage(v float32) {
	o.CpuUsage = &v
}

// GetRamUsage returns the RamUsage field value if set, zero value otherwise.
func (o *ProductStatisticsResponse) GetRamUsage() float32 {
	if o == nil || IsNil(o.RamUsage) {
		var ret float32
		return ret
	}
	return *o.RamUsage
}

// GetRamUsageOk returns a tuple with the RamUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductStatisticsResponse) GetRamUsageOk() (*float32, bool) {
	if o == nil || IsNil(o.RamUsage) {
		return nil, false
	}
	return o.RamUsage, true
}

// HasRamUsage returns a boolean if a field has been set.
func (o *ProductStatisticsResponse) HasRamUsage() bool {
	if o != nil && !IsNil(o.RamUsage) {
		return true
	}

	return false
}

// SetRamUsage gets a reference to the given float32 and assigns it to the RamUsage field.
func (o *ProductStatisticsResponse) SetRamUsage(v float32) {
	o.RamUsage = &v
}

// GetDiskUsage returns the DiskUsage field value if set, zero value otherwise.
func (o *ProductStatisticsResponse) GetDiskUsage() float32 {
	if o == nil || IsNil(o.DiskUsage) {
		var ret float32
		return ret
	}
	return *o.DiskUsage
}

// GetDiskUsageOk returns a tuple with the DiskUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductStatisticsResponse) GetDiskUsageOk() (*float32, bool) {
	if o == nil || IsNil(o.DiskUsage) {
		return nil, false
	}
	return o.DiskUsage, true
}

// HasDiskUsage returns a boolean if a field has been set.
func (o *ProductStatisticsResponse) HasDiskUsage() bool {
	if o != nil && !IsNil(o.DiskUsage) {
		return true
	}

	return false
}

// SetDiskUsage gets a reference to the given float32 and assigns it to the DiskUsage field.
func (o *ProductStatisticsResponse) SetDiskUsage(v float32) {
	o.DiskUsage = &v
}

// GetEmptyValue returns the EmptyValue field value if set, zero value otherwise.
func (o *ProductStatisticsResponse) GetEmptyValue() int32 {
	if o == nil || IsNil(o.EmptyValue) {
		var ret int32
		return ret
	}
	return *o.EmptyValue
}

// GetEmptyValueOk returns a tuple with the EmptyValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductStatisticsResponse) GetEmptyValueOk() (*int32, bool) {
	if o == nil || IsNil(o.EmptyValue) {
		return nil, false
	}
	return o.EmptyValue, true
}

// HasEmptyValue returns a boolean if a field has been set.
func (o *ProductStatisticsResponse) HasEmptyValue() bool {
	if o != nil && !IsNil(o.EmptyValue) {
		return true
	}

	return false
}

// SetEmptyValue gets a reference to the given int32 and assigns it to the EmptyValue field.
func (o *ProductStatisticsResponse) SetEmptyValue(v int32) {
	o.EmptyValue = &v
}

func (o ProductStatisticsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductStatisticsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Service) {
		toSerialize["service"] = o.Service
	}
	if !IsNil(o.VmId) {
		toSerialize["vmId"] = o.VmId
	}
	if !IsNil(o.VmName) {
		toSerialize["vmName"] = o.VmName
	}
	if !IsNil(o.HeadProductId) {
		toSerialize["headProductId"] = o.HeadProductId
	}
	if !IsNil(o.HeadProductName) {
		toSerialize["headProductName"] = o.HeadProductName
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Cost) {
		toSerialize["cost"] = o.Cost
	}
	if !IsNil(o.ProviderName) {
		toSerialize["providerName"] = o.ProviderName
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Latitude) {
		toSerialize["latitude"] = o.Latitude
	}
	if !IsNil(o.Longitude) {
		toSerialize["longitude"] = o.Longitude
	}
	if !IsNil(o.StatusNormalized) {
		toSerialize["statusNormalized"] = o.StatusNormalized
	}
	if !IsNil(o.CpuTotal) {
		toSerialize["cpuTotal"] = o.CpuTotal
	}
	if !IsNil(o.RamTotal) {
		toSerialize["ramTotal"] = o.RamTotal
	}
	if !IsNil(o.DiskUsageTotal) {
		toSerialize["diskUsageTotal"] = o.DiskUsageTotal
	}
	if !IsNil(o.CpuUsage) {
		toSerialize["cpuUsage"] = o.CpuUsage
	}
	if !IsNil(o.RamUsage) {
		toSerialize["ramUsage"] = o.RamUsage
	}
	if !IsNil(o.DiskUsage) {
		toSerialize["diskUsage"] = o.DiskUsage
	}
	if !IsNil(o.EmptyValue) {
		toSerialize["emptyValue"] = o.EmptyValue
	}
	return toSerialize, nil
}

type NullableProductStatisticsResponse struct {
	value *ProductStatisticsResponse
	isSet bool
}

func (v NullableProductStatisticsResponse) Get() *ProductStatisticsResponse {
	return v.value
}

func (v *NullableProductStatisticsResponse) Set(val *ProductStatisticsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableProductStatisticsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableProductStatisticsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductStatisticsResponse(val *ProductStatisticsResponse) *NullableProductStatisticsResponse {
	return &NullableProductStatisticsResponse{value: val, isSet: true}
}

func (v NullableProductStatisticsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductStatisticsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


