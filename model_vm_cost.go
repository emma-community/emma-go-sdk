/*
Public EMMA API

This <b>Infrastructure</b> API is for managing the cloud infrastructure within a project.  To access the API, enter your project, navigate to <b>Settings</b> > <b>Service Apps</b>, and create a service application. Select the access level: <b>Read</b>, <b>Operate</b>, or <b>Manage</b>.  After creating the service application, copy the <b>Client ID</b> and <b>Client Secret</b>. Send an API request to the endpoint <b>/issue-token</b> as specified in the <b>Authentication</b> section of the API documentation. You will receive access and refresh tokens in the response.  The Bearer access token is a text string, included in the request header:  -H \"Authorization: Bearer {token}\"  Use this token for API requests.  The access token will expire in 5 minutes, after which it must be refreshed using the refresh token.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emma

import (
	"encoding/json"
)

// checks if the VmCost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VmCost{}

// VmCost struct for VmCost
type VmCost struct {
	Unit     interface{} `json:"unit,omitempty"`
	Currency interface{} `json:"currency,omitempty"`
	Price    interface{} `json:"price,omitempty"`
}

// NewVmCost instantiates a new VmCost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmCost() *VmCost {
	this := VmCost{}
	return &this
}

// NewVmCostWithDefaults instantiates a new VmCost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmCostWithDefaults() *VmCost {
	this := VmCost{}
	return &this
}

// GetUnit returns the Unit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmCost) GetUnit() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmCost) GetUnitOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return &o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *VmCost) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given interface{} and assigns it to the Unit field.
func (o *VmCost) SetUnit(v interface{}) {
	o.Unit = v
}

// GetCurrency returns the Currency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmCost) GetCurrency() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmCost) GetCurrencyOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return &o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *VmCost) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given interface{} and assigns it to the Currency field.
func (o *VmCost) SetCurrency(v interface{}) {
	o.Currency = v
}

// GetPrice returns the Price field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmCost) GetPrice() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmCost) GetPriceOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return &o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *VmCost) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given interface{} and assigns it to the Price field.
func (o *VmCost) SetPrice(v interface{}) {
	o.Price = v
}

func (o VmCost) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VmCost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	return toSerialize, nil
}

type NullableVmCost struct {
	value *VmCost
	isSet bool
}

func (v NullableVmCost) Get() *VmCost {
	return v.value
}

func (v *NullableVmCost) Set(val *VmCost) {
	v.value = val
	v.isSet = true
}

func (v NullableVmCost) IsSet() bool {
	return v.isSet
}

func (v *NullableVmCost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmCost(val *VmCost) *NullableVmCost {
	return &NullableVmCost{value: val, isSet: true}
}

func (v NullableVmCost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmCost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
