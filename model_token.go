/*
Public EMMA API

This <b>Infrastructure</b> API is for managing the cloud infrastructure within a project.  To access the API, enter your project, navigate to <b>Settings</b> > <b>Service Apps</b>, and create a service application. Select the access level: <b>Read</b>, <b>Operate</b>, or <b>Manage</b>.  After creating the service application, copy the <b>Client ID</b> and <b>Client Secret</b>. Send an API request to the endpoint <b>/issue-token</b> as specified in the <b>Authentication</b> section of the API documentation. You will receive access and refresh tokens in the response.  The Bearer access token is a text string, included in the request header:  -H \"Authorization: Bearer {token}\"  Use this token for API requests.  The access token will expire in 5 minutes, after which it must be refreshed using the refresh token.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emma

import (
	"encoding/json"
)

// checks if the Token type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Token{}

// Token struct for Token
type Token struct {
	OtherClaims      interface{} `json:"otherClaims,omitempty"`
	AccessToken      interface{} `json:"accessToken,omitempty"`
	ExpiresIn        interface{} `json:"expiresIn,omitempty"`
	RefreshExpiresIn interface{} `json:"refreshExpiresIn,omitempty"`
	RefreshToken     interface{} `json:"refreshToken,omitempty"`
	TokenType        interface{} `json:"tokenType,omitempty"`
	IdToken          interface{} `json:"idToken,omitempty"`
	NotBeforePolicy  interface{} `json:"notBeforePolicy,omitempty"`
	SessionState     interface{} `json:"sessionState,omitempty"`
}

// NewToken instantiates a new Token object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToken() *Token {
	this := Token{}
	return &this
}

// NewTokenWithDefaults instantiates a new Token object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenWithDefaults() *Token {
	this := Token{}
	return &this
}

// GetOtherClaims returns the OtherClaims field value if set, zero value otherwise.
func (o *Token) GetOtherClaims() interface{} {
	if o == nil || IsNil(o.OtherClaims) {
		var ret interface{}
		return ret
	}
	return o.OtherClaims
}

// GetOtherClaimsOk returns a tuple with the OtherClaims field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetOtherClaimsOk() (interface{}, bool) {
	if o == nil || IsNil(o.OtherClaims) {
		return nil, false
	}
	return o.OtherClaims, true
}

// HasOtherClaims returns a boolean if a field has been set.
func (o *Token) HasOtherClaims() bool {
	if o != nil && !IsNil(o.OtherClaims) {
		return true
	}

	return false
}

// SetOtherClaims gets a reference to the given interface{} and assigns it to the OtherClaims field.
func (o *Token) SetOtherClaims(v interface{}) {
	o.OtherClaims = v
}

// GetAccessToken returns the AccessToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Token) GetAccessToken() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Token) GetAccessTokenOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AccessToken) {
		return nil, false
	}
	return &o.AccessToken, true
}

// HasAccessToken returns a boolean if a field has been set.
func (o *Token) HasAccessToken() bool {
	if o != nil && !IsNil(o.AccessToken) {
		return true
	}

	return false
}

// SetAccessToken gets a reference to the given interface{} and assigns it to the AccessToken field.
func (o *Token) SetAccessToken(v interface{}) {
	o.AccessToken = v
}

// GetExpiresIn returns the ExpiresIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Token) GetExpiresIn() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ExpiresIn
}

// GetExpiresInOk returns a tuple with the ExpiresIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Token) GetExpiresInOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ExpiresIn) {
		return nil, false
	}
	return &o.ExpiresIn, true
}

// HasExpiresIn returns a boolean if a field has been set.
func (o *Token) HasExpiresIn() bool {
	if o != nil && !IsNil(o.ExpiresIn) {
		return true
	}

	return false
}

// SetExpiresIn gets a reference to the given interface{} and assigns it to the ExpiresIn field.
func (o *Token) SetExpiresIn(v interface{}) {
	o.ExpiresIn = v
}

// GetRefreshExpiresIn returns the RefreshExpiresIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Token) GetRefreshExpiresIn() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.RefreshExpiresIn
}

// GetRefreshExpiresInOk returns a tuple with the RefreshExpiresIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Token) GetRefreshExpiresInOk() (*interface{}, bool) {
	if o == nil || IsNil(o.RefreshExpiresIn) {
		return nil, false
	}
	return &o.RefreshExpiresIn, true
}

// HasRefreshExpiresIn returns a boolean if a field has been set.
func (o *Token) HasRefreshExpiresIn() bool {
	if o != nil && !IsNil(o.RefreshExpiresIn) {
		return true
	}

	return false
}

// SetRefreshExpiresIn gets a reference to the given interface{} and assigns it to the RefreshExpiresIn field.
func (o *Token) SetRefreshExpiresIn(v interface{}) {
	o.RefreshExpiresIn = v
}

// GetRefreshToken returns the RefreshToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Token) GetRefreshToken() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.RefreshToken
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Token) GetRefreshTokenOk() (*interface{}, bool) {
	if o == nil || IsNil(o.RefreshToken) {
		return nil, false
	}
	return &o.RefreshToken, true
}

// HasRefreshToken returns a boolean if a field has been set.
func (o *Token) HasRefreshToken() bool {
	if o != nil && !IsNil(o.RefreshToken) {
		return true
	}

	return false
}

// SetRefreshToken gets a reference to the given interface{} and assigns it to the RefreshToken field.
func (o *Token) SetRefreshToken(v interface{}) {
	o.RefreshToken = v
}

// GetTokenType returns the TokenType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Token) GetTokenType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.TokenType
}

// GetTokenTypeOk returns a tuple with the TokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Token) GetTokenTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.TokenType) {
		return nil, false
	}
	return &o.TokenType, true
}

// HasTokenType returns a boolean if a field has been set.
func (o *Token) HasTokenType() bool {
	if o != nil && !IsNil(o.TokenType) {
		return true
	}

	return false
}

// SetTokenType gets a reference to the given interface{} and assigns it to the TokenType field.
func (o *Token) SetTokenType(v interface{}) {
	o.TokenType = v
}

// GetIdToken returns the IdToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Token) GetIdToken() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.IdToken
}

// GetIdTokenOk returns a tuple with the IdToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Token) GetIdTokenOk() (*interface{}, bool) {
	if o == nil || IsNil(o.IdToken) {
		return nil, false
	}
	return &o.IdToken, true
}

// HasIdToken returns a boolean if a field has been set.
func (o *Token) HasIdToken() bool {
	if o != nil && !IsNil(o.IdToken) {
		return true
	}

	return false
}

// SetIdToken gets a reference to the given interface{} and assigns it to the IdToken field.
func (o *Token) SetIdToken(v interface{}) {
	o.IdToken = v
}

// GetNotBeforePolicy returns the NotBeforePolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Token) GetNotBeforePolicy() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.NotBeforePolicy
}

// GetNotBeforePolicyOk returns a tuple with the NotBeforePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Token) GetNotBeforePolicyOk() (*interface{}, bool) {
	if o == nil || IsNil(o.NotBeforePolicy) {
		return nil, false
	}
	return &o.NotBeforePolicy, true
}

// HasNotBeforePolicy returns a boolean if a field has been set.
func (o *Token) HasNotBeforePolicy() bool {
	if o != nil && !IsNil(o.NotBeforePolicy) {
		return true
	}

	return false
}

// SetNotBeforePolicy gets a reference to the given interface{} and assigns it to the NotBeforePolicy field.
func (o *Token) SetNotBeforePolicy(v interface{}) {
	o.NotBeforePolicy = v
}

// GetSessionState returns the SessionState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Token) GetSessionState() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.SessionState
}

// GetSessionStateOk returns a tuple with the SessionState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Token) GetSessionStateOk() (*interface{}, bool) {
	if o == nil || IsNil(o.SessionState) {
		return nil, false
	}
	return &o.SessionState, true
}

// HasSessionState returns a boolean if a field has been set.
func (o *Token) HasSessionState() bool {
	if o != nil && !IsNil(o.SessionState) {
		return true
	}

	return false
}

// SetSessionState gets a reference to the given interface{} and assigns it to the SessionState field.
func (o *Token) SetSessionState(v interface{}) {
	o.SessionState = v
}

func (o Token) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Token) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OtherClaims) {
		toSerialize["otherClaims"] = o.OtherClaims
	}
	if o.AccessToken != nil {
		toSerialize["accessToken"] = o.AccessToken
	}
	if o.ExpiresIn != nil {
		toSerialize["expiresIn"] = o.ExpiresIn
	}
	if o.RefreshExpiresIn != nil {
		toSerialize["refreshExpiresIn"] = o.RefreshExpiresIn
	}
	if o.RefreshToken != nil {
		toSerialize["refreshToken"] = o.RefreshToken
	}
	if o.TokenType != nil {
		toSerialize["tokenType"] = o.TokenType
	}
	if o.IdToken != nil {
		toSerialize["idToken"] = o.IdToken
	}
	if o.NotBeforePolicy != nil {
		toSerialize["notBeforePolicy"] = o.NotBeforePolicy
	}
	if o.SessionState != nil {
		toSerialize["sessionState"] = o.SessionState
	}
	return toSerialize, nil
}

type NullableToken struct {
	value *Token
	isSet bool
}

func (v NullableToken) Get() *Token {
	return v.value
}

func (v *NullableToken) Set(val *Token) {
	v.value = val
	v.isSet = true
}

func (v NullableToken) IsSet() bool {
	return v.isSet
}

func (v *NullableToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToken(val *Token) *NullableToken {
	return &NullableToken{value: val, isSet: true}
}

func (v NullableToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
