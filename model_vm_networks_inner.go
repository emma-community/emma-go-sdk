/*
Public EMMA API

This <b>Infrastructure</b> API is for managing the cloud infrastructure within a project.  To access the API, enter your project, navigate to <b>Settings</b> > <b>Service Apps</b>, and create a service application. Select the access level: <b>Read</b>, <b>Operate</b>, or <b>Manage</b>.  After creating the service application, copy the <b>Client ID</b> and <b>Client Secret</b>. Send an API request to the endpoint <b>/issue-token</b> as specified in the <b>Authentication</b> section of the API documentation. You will receive access and refresh tokens in the response.  The Bearer access token is a text string, included in the request header:  -H \"Authorization: Bearer {token}\"  Use this token for API requests.  The access token will expire in 5 minutes, after which it must be refreshed using the refresh token.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emma

import (
	"encoding/json"
)

// checks if the VmNetworksInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VmNetworksInner{}

// VmNetworksInner struct for VmNetworksInner
type VmNetworksInner struct {
	Id            interface{} `json:"id,omitempty"`
	Ip            interface{} `json:"ip,omitempty"`
	NetworkTypeId interface{} `json:"networkTypeId,omitempty"`
	NetworkType   interface{} `json:"networkType,omitempty"`
}

// NewVmNetworksInner instantiates a new VmNetworksInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmNetworksInner() *VmNetworksInner {
	this := VmNetworksInner{}
	return &this
}

// NewVmNetworksInnerWithDefaults instantiates a new VmNetworksInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmNetworksInnerWithDefaults() *VmNetworksInner {
	this := VmNetworksInner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmNetworksInner) GetId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmNetworksInner) GetIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return &o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VmNetworksInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given interface{} and assigns it to the Id field.
func (o *VmNetworksInner) SetId(v interface{}) {
	o.Id = v
}

// GetIp returns the Ip field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmNetworksInner) GetIp() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmNetworksInner) GetIpOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return &o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *VmNetworksInner) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given interface{} and assigns it to the Ip field.
func (o *VmNetworksInner) SetIp(v interface{}) {
	o.Ip = v
}

// GetNetworkTypeId returns the NetworkTypeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmNetworksInner) GetNetworkTypeId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.NetworkTypeId
}

// GetNetworkTypeIdOk returns a tuple with the NetworkTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmNetworksInner) GetNetworkTypeIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.NetworkTypeId) {
		return nil, false
	}
	return &o.NetworkTypeId, true
}

// HasNetworkTypeId returns a boolean if a field has been set.
func (o *VmNetworksInner) HasNetworkTypeId() bool {
	if o != nil && !IsNil(o.NetworkTypeId) {
		return true
	}

	return false
}

// SetNetworkTypeId gets a reference to the given interface{} and assigns it to the NetworkTypeId field.
func (o *VmNetworksInner) SetNetworkTypeId(v interface{}) {
	o.NetworkTypeId = v
}

// GetNetworkType returns the NetworkType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmNetworksInner) GetNetworkType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.NetworkType
}

// GetNetworkTypeOk returns a tuple with the NetworkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmNetworksInner) GetNetworkTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.NetworkType) {
		return nil, false
	}
	return &o.NetworkType, true
}

// HasNetworkType returns a boolean if a field has been set.
func (o *VmNetworksInner) HasNetworkType() bool {
	if o != nil && !IsNil(o.NetworkType) {
		return true
	}

	return false
}

// SetNetworkType gets a reference to the given interface{} and assigns it to the NetworkType field.
func (o *VmNetworksInner) SetNetworkType(v interface{}) {
	o.NetworkType = v
}

func (o VmNetworksInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VmNetworksInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Ip != nil {
		toSerialize["ip"] = o.Ip
	}
	if o.NetworkTypeId != nil {
		toSerialize["networkTypeId"] = o.NetworkTypeId
	}
	if o.NetworkType != nil {
		toSerialize["networkType"] = o.NetworkType
	}
	return toSerialize, nil
}

type NullableVmNetworksInner struct {
	value *VmNetworksInner
	isSet bool
}

func (v NullableVmNetworksInner) Get() *VmNetworksInner {
	return v.value
}

func (v *NullableVmNetworksInner) Set(val *VmNetworksInner) {
	v.value = val
	v.isSet = true
}

func (v NullableVmNetworksInner) IsSet() bool {
	return v.isSet
}

func (v *NullableVmNetworksInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmNetworksInner(val *VmNetworksInner) *NullableVmNetworksInner {
	return &NullableVmNetworksInner{value: val, isSet: true}
}

func (v NullableVmNetworksInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmNetworksInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
