/*
Public EMMA API

**Base URL:** *<u>https://api.emma.ms/external</u>*  This **Infrastructure API** is for managing the cloud infrastructure within a project.  To access the API, enter your project, navigate to **Settings** > **Service Apps**, and create a service application. Select the access level **Read**, **Operate**, or **Manage**.  After creating the service application, copy the **Client ID** and **Client Secret**. Send an API request to the endpoint **_/issue-token** as specified in the **Authentication** section of the API documentation. You will receive access and refresh tokens in the response.  The Bearer access token is a text string, included in the request header, example:  *-H Authorization: Bearer {token}*  Use this token for API requests. The access token will expire in 10 minutes. A new access token may be created using the refresh token (without Client ID and Client Secret).

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emma

import (
	"encoding/json"
	"fmt"
)

// VmActionsRequest - struct for VmActionsRequest
type VmActionsRequest struct {
	VmClone        *VmClone
	VmEditHardware *VmEditHardware
	VmReboot       *VmReboot
	VmShutdown     *VmShutdown
	VmStart        *VmStart
	VmTransfer     *VmTransfer
}

// VmCloneAsVmActionsRequest is a convenience function that returns VmClone wrapped in VmActionsRequest
func VmCloneAsVmActionsRequest(v *VmClone) VmActionsRequest {
	return VmActionsRequest{
		VmClone: v,
	}
}

// VmEditHardwareAsVmActionsRequest is a convenience function that returns VmEditHardware wrapped in VmActionsRequest
func VmEditHardwareAsVmActionsRequest(v *VmEditHardware) VmActionsRequest {
	return VmActionsRequest{
		VmEditHardware: v,
	}
}

// VmRebootAsVmActionsRequest is a convenience function that returns VmReboot wrapped in VmActionsRequest
func VmRebootAsVmActionsRequest(v *VmReboot) VmActionsRequest {
	return VmActionsRequest{
		VmReboot: v,
	}
}

// VmShutdownAsVmActionsRequest is a convenience function that returns VmShutdown wrapped in VmActionsRequest
func VmShutdownAsVmActionsRequest(v *VmShutdown) VmActionsRequest {
	return VmActionsRequest{
		VmShutdown: v,
	}
}

// VmStartAsVmActionsRequest is a convenience function that returns VmStart wrapped in VmActionsRequest
func VmStartAsVmActionsRequest(v *VmStart) VmActionsRequest {
	return VmActionsRequest{
		VmStart: v,
	}
}

// VmTransferAsVmActionsRequest is a convenience function that returns VmTransfer wrapped in VmActionsRequest
func VmTransferAsVmActionsRequest(v *VmTransfer) VmActionsRequest {
	return VmActionsRequest{
		VmTransfer: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *VmActionsRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into VmClone
	err = newStrictDecoder(data).Decode(&dst.VmClone)
	if err == nil {
		jsonVmClone, _ := json.Marshal(dst.VmClone)
		if string(jsonVmClone) == "{}" { // empty struct
			dst.VmClone = nil
		} else {
			match++
		}
	} else {
		dst.VmClone = nil
	}

	// try to unmarshal data into VmEditHardware
	err = newStrictDecoder(data).Decode(&dst.VmEditHardware)
	if err == nil {
		jsonVmEditHardware, _ := json.Marshal(dst.VmEditHardware)
		if string(jsonVmEditHardware) == "{}" { // empty struct
			dst.VmEditHardware = nil
		} else {
			match++
		}
	} else {
		dst.VmEditHardware = nil
	}

	// try to unmarshal data into VmReboot
	err = newStrictDecoder(data).Decode(&dst.VmReboot)
	if err == nil {
		jsonVmReboot, _ := json.Marshal(dst.VmReboot)
		if string(jsonVmReboot) == "{}" { // empty struct
			dst.VmReboot = nil
		} else {
			match++
		}
	} else {
		dst.VmReboot = nil
	}

	// try to unmarshal data into VmShutdown
	err = newStrictDecoder(data).Decode(&dst.VmShutdown)
	if err == nil {
		jsonVmShutdown, _ := json.Marshal(dst.VmShutdown)
		if string(jsonVmShutdown) == "{}" { // empty struct
			dst.VmShutdown = nil
		} else {
			match++
		}
	} else {
		dst.VmShutdown = nil
	}

	// try to unmarshal data into VmStart
	err = newStrictDecoder(data).Decode(&dst.VmStart)
	if err == nil {
		jsonVmStart, _ := json.Marshal(dst.VmStart)
		if string(jsonVmStart) == "{}" { // empty struct
			dst.VmStart = nil
		} else {
			match++
		}
	} else {
		dst.VmStart = nil
	}

	// try to unmarshal data into VmTransfer
	err = newStrictDecoder(data).Decode(&dst.VmTransfer)
	if err == nil {
		jsonVmTransfer, _ := json.Marshal(dst.VmTransfer)
		if string(jsonVmTransfer) == "{}" { // empty struct
			dst.VmTransfer = nil
		} else {
			match++
		}
	} else {
		dst.VmTransfer = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.VmClone = nil
		dst.VmEditHardware = nil
		dst.VmReboot = nil
		dst.VmShutdown = nil
		dst.VmStart = nil
		dst.VmTransfer = nil

		return fmt.Errorf("data matches more than one schema in oneOf(VmActionsRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(VmActionsRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src VmActionsRequest) MarshalJSON() ([]byte, error) {
	if src.VmClone != nil {
		return json.Marshal(&src.VmClone)
	}

	if src.VmEditHardware != nil {
		return json.Marshal(&src.VmEditHardware)
	}

	if src.VmReboot != nil {
		return json.Marshal(&src.VmReboot)
	}

	if src.VmShutdown != nil {
		return json.Marshal(&src.VmShutdown)
	}

	if src.VmStart != nil {
		return json.Marshal(&src.VmStart)
	}

	if src.VmTransfer != nil {
		return json.Marshal(&src.VmTransfer)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *VmActionsRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.VmClone != nil {
		return obj.VmClone
	}

	if obj.VmEditHardware != nil {
		return obj.VmEditHardware
	}

	if obj.VmReboot != nil {
		return obj.VmReboot
	}

	if obj.VmShutdown != nil {
		return obj.VmShutdown
	}

	if obj.VmStart != nil {
		return obj.VmStart
	}

	if obj.VmTransfer != nil {
		return obj.VmTransfer
	}

	// all schemas are nil
	return nil
}

type NullableVmActionsRequest struct {
	value *VmActionsRequest
	isSet bool
}

func (v NullableVmActionsRequest) Get() *VmActionsRequest {
	return v.value
}

func (v *NullableVmActionsRequest) Set(val *VmActionsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVmActionsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVmActionsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmActionsRequest(val *VmActionsRequest) *NullableVmActionsRequest {
	return &NullableVmActionsRequest{value: val, isSet: true}
}

func (v NullableVmActionsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmActionsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
