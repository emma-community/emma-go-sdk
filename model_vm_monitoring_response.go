/*
Public EMMA API

### About Infrastructure API  **Base URL:** **<u>https://api.emma.ms/external</u>**   This **Infrastructure API** is for managing the emma cloud infrastructure within a project. The API enables you to view, create, edit, and delete _Virtual machines, Spot instances, Applications, Kubernetes clusters, SSH keys, Security groups, and Backup policies_. For creating the resources you can use the endpoints with the dictionaries: _Data centers, Locations, Providers, Operating systems, Virtual machines configurations, Spot instances configurations, Kubernetes clusters configurations._   ### Authentication   #### 1. Create service application   To access the API, enter your project, navigate to **Settings** > **Service Apps**, and create a service application. Select the access level **Read**, **Operate**, or **Manage**.   - **Read** - only GET methods are allowed in the API.   - **Operate** - some operations are allowed with the resources (e.g. _Start, Reboot,_ and _Shutdown_ of the Virtual machines).   - **Manage** - full creating, updating, and deleting of the resources is allowed.    #### 2. Get access token   - Copy the **Client ID** and **Client Secret** in the service application.  - Send an API request to the endpoint **_/issue-token** as specified in the **Authentication** section of the API documentation. You will receive access and refresh tokens in the response.   _For Linux / Mac:_  ```  curl -X POST https://api.emma.ms/external/v1/issue-token \\  -H \"Content-Type: application/json\" \\  -d '{\"clientId\": \"YOUR-CLIENT-ID\", \"clientSecret\": \"YOUR-CLIENT-SECRET\"}'  ```  _For Windows:_  ```  curl -X POST https://api.emma.ms/external/v1/issue-token ^  -H \"Content-Type: application/json\" ^  -d \"{\\\"clientId\\\": \\\"YOUR-CLIENT-ID\\\", \\\"clientSecret\\\": \\\"YOUR-CLIENT-SECRET\\\"}\"  ```   #### 3. Use access token in requests  The Bearer access token is a text string, included in the request header, for example:   _For Linux / Mac:_  ```  curl -X GET https://api.emma.ms/external/v1/locations -H \"Authorization: Bearer YOUR-ACCESS-TOKEN-HERE\"  ```   Use this token for the API requests.    #### 4. Refresh token  The access token will expire in 10 minutes. A new access token may be created using the refresh token (without Client ID and Client Secret).   To get a new access token send a request to the **_/refresh-token** endpoint:    _For Linux / Mac:_  ```  curl -X POST https://api.emma.ms/external/v1/refresh-token \\  -H \"Content-Type: application/json\" \\  -d '{\"refreshToken\": \"YOUR-REFRESH-TOKEN\"}'  ```       ### Possible response status codes   We use standard HTTP response codes to show the success or failure of requests.   `2xx` - successful responses.   `4xx` - client error responses (the response contains an explanation of the error).   `5xx` - server error responses.   The API uses the following status codes:   | Status Code | Description                  | Notes                                                                  |  |-------------|------------------------------|------------------------------------------------------------------------|  | 200         | OK                           | The request was successful.                                             |  | 201         | Created                      | The object was successfully created. This code is only used with objects that are created immediately.  | 204         | No content                   | A successful request, but there is no additional information to send back in the response body (in a case when the object was deleted).    | 400         | Bad Request                  | The request could not be understood by the server. Incoming parameters might not be valid. |  | 401         | Unauthorized            | The client is unauthenticated. The client must authenticate itself to get the requested response. |  | 403         | Forbidden                   | The client does not have access rights to the content.  | 404         | Not Found                    | The requested resource is not found.                                    |  | 409         | Conflict | This response is sent when a request conflicts with the current state of the object (e.g. deleting the security group with the compute instances in it).|  | 422         | Unprocessable Content   | The request was well-formed but was unable to be followed due to incorrect field values (e.g. creation of a virtual machine in the non-existent data center).  |  | 500         | Internal server Error                 | The server could not return the representation due to an internal server error. | 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emma

import (
	"encoding/json"
)

// checks if the VmMonitoringResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VmMonitoringResponse{}

// VmMonitoringResponse struct for VmMonitoringResponse
type VmMonitoringResponse struct {
	Timecode *string `json:"timecode,omitempty"`
	// Internal service parameter
	CpuDataPresent *int32 `json:"cpuDataPresent,omitempty"`
	// CPU utilization with values in range [0, 100*vCPUs]
	CpuUtilizationAverageCores *float32 `json:"cpuUtilizationAverageCores,omitempty"`
	// Average CPU utilization for the requested period of statistics
	AvgCpuUtilizationAverageCores *float32 `json:"avgCpuUtilizationAverageCores,omitempty"`
	// Maximum CPU utilization for the requested period of statistics
	MaxCpuUtilizationAverageCores *float32 `json:"maxCpuUtilizationAverageCores,omitempty"`
	// Total CPU, %
	CpuTotalPercent *int32 `json:"cpuTotalPercent,omitempty"`
	// Label
	CpuHumanLabel *string `json:"cpuHumanLabel,omitempty"`
	// Internal service parameter
	RamDataPresent *int32 `json:"ramDataPresent,omitempty"`
	// Memory utilization
	RamUsageAverageGb *float32 `json:"ramUsageAverageGb,omitempty"`
	// Average memory utilization for the requested period of statistics
	AvgRamUsageAverageGb *float32 `json:"avgRamUsageAverageGb,omitempty"`
	// Maximum memory utilization for the requested period of statistics
	MaxRamUsageAverageGb *float32 `json:"maxRamUsageAverageGb,omitempty"`
	// Total memory, GB
	RamTotalAmountGb *float32 `json:"ramTotalAmountGb,omitempty"`
	// Label
	RamHumanLabel *string `json:"ramHumanLabel,omitempty"`
	// Internal service parameter
	DiskUsedDataPresent *int32 `json:"diskUsedDataPresent,omitempty"`
	// Disk utilization
	DiskSpaceUsedGb *float32 `json:"diskSpaceUsedGb,omitempty"`
	// Average disk utilization for the requested period of statistics
	AvgDiskSpaceUsedGb *float32 `json:"avgDiskSpaceUsedGb,omitempty"`
	// Maximum disk utilization for the requested period of statistics
	MaxDiskSpaceUsedGb *float32 `json:"maxDiskSpaceUsedGb,omitempty"`
	// Total disk size, GB
	DiskSpaceTotalGb *int32 `json:"diskSpaceTotalGb,omitempty"`
	// Label
	DiskSpaceHumanLabel *string `json:"diskSpaceHumanLabel,omitempty"`
	// Internal service parameter
	DiskWriteDataPresent *int32 `json:"diskWriteDataPresent,omitempty"`
	// Internal service parameter
	DiskWriteCoef *float32 `json:"diskWriteCoef,omitempty"`
	// Disk write
	DiskWriteHuman *float32 `json:"diskWriteHuman,omitempty"`
	// Average disk write for the requested period of statistics
	AvgDiskWriteHuman *float32 `json:"avgDiskWriteHuman,omitempty"`
	// Maximum disk write for the requested period of statistics
	MaxDiskWriteHuman *float32 `json:"maxDiskWriteHuman,omitempty"`
	// Label
	DiskWriteHumanLabel *string `json:"diskWriteHumanLabel,omitempty"`
	// Internal service parameter
	DiskReadDataPresent *int32 `json:"diskReadDataPresent,omitempty"`
	// Internal service parameter
	DiskReadCoef *float32 `json:"diskReadCoef,omitempty"`
	// Disk read
	DiskReadHuman *float32 `json:"diskReadHuman,omitempty"`
	// Average disk read for the requested period of statistics
	AvgDiskReadHuman *float32 `json:"avgDiskReadHuman,omitempty"`
	// Maximum disk read for the requested period of statistics
	MaxDiskReadHuman *float32 `json:"maxDiskReadHuman,omitempty"`
	// Label
	DiskReadHumanLabel *string `json:"diskReadHumanLabel,omitempty"`
	// Internal service parameter
	NetworkOutDataPresent *int32 `json:"networkOutDataPresent,omitempty"`
	// Internal service parameter
	NetworkOutCoef *float32 `json:"networkOutCoef,omitempty"`
	// Network out
	NetworkOutHuman *float32 `json:"networkOutHuman,omitempty"`
	// Average network out for the requested period of statistics
	AvgNetworkOutHuman *float32 `json:"avgNetworkOutHuman,omitempty"`
	// Maximum network out for the requested period of statistics
	MaxNetworkOutHuman *float32 `json:"maxNetworkOutHuman,omitempty"`
	// Label
	NetworkOutHumanLabel *string `json:"networkOutHumanLabel,omitempty"`
	// Internal service parameter
	NetworkInDataPresent *int32 `json:"networkInDataPresent,omitempty"`
	// Internal service parameter
	NetworkInCoef *float32 `json:"networkInCoef,omitempty"`
	// Network in
	NetworkInHuman *float32 `json:"networkInHuman,omitempty"`
	// Average network in for the requested period of statistics
	AvgNetworkInHuman *float32 `json:"avgNetworkInHuman,omitempty"`
	// Maximum network in for the requested period of statistics
	MaxNetworkInHuman *float32 `json:"maxNetworkInHuman,omitempty"`
	// Label
	NetworkInHumanLabel *string `json:"networkInHumanLabel,omitempty"`
}

// NewVmMonitoringResponse instantiates a new VmMonitoringResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmMonitoringResponse() *VmMonitoringResponse {
	this := VmMonitoringResponse{}
	return &this
}

// NewVmMonitoringResponseWithDefaults instantiates a new VmMonitoringResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmMonitoringResponseWithDefaults() *VmMonitoringResponse {
	this := VmMonitoringResponse{}
	return &this
}

// GetTimecode returns the Timecode field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetTimecode() string {
	if o == nil || IsNil(o.Timecode) {
		var ret string
		return ret
	}
	return *o.Timecode
}

// GetTimecodeOk returns a tuple with the Timecode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetTimecodeOk() (*string, bool) {
	if o == nil || IsNil(o.Timecode) {
		return nil, false
	}
	return o.Timecode, true
}

// HasTimecode returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasTimecode() bool {
	if o != nil && !IsNil(o.Timecode) {
		return true
	}

	return false
}

// SetTimecode gets a reference to the given string and assigns it to the Timecode field.
func (o *VmMonitoringResponse) SetTimecode(v string) {
	o.Timecode = &v
}

// GetCpuDataPresent returns the CpuDataPresent field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetCpuDataPresent() int32 {
	if o == nil || IsNil(o.CpuDataPresent) {
		var ret int32
		return ret
	}
	return *o.CpuDataPresent
}

// GetCpuDataPresentOk returns a tuple with the CpuDataPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetCpuDataPresentOk() (*int32, bool) {
	if o == nil || IsNil(o.CpuDataPresent) {
		return nil, false
	}
	return o.CpuDataPresent, true
}

// HasCpuDataPresent returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasCpuDataPresent() bool {
	if o != nil && !IsNil(o.CpuDataPresent) {
		return true
	}

	return false
}

// SetCpuDataPresent gets a reference to the given int32 and assigns it to the CpuDataPresent field.
func (o *VmMonitoringResponse) SetCpuDataPresent(v int32) {
	o.CpuDataPresent = &v
}

// GetCpuUtilizationAverageCores returns the CpuUtilizationAverageCores field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetCpuUtilizationAverageCores() float32 {
	if o == nil || IsNil(o.CpuUtilizationAverageCores) {
		var ret float32
		return ret
	}
	return *o.CpuUtilizationAverageCores
}

// GetCpuUtilizationAverageCoresOk returns a tuple with the CpuUtilizationAverageCores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetCpuUtilizationAverageCoresOk() (*float32, bool) {
	if o == nil || IsNil(o.CpuUtilizationAverageCores) {
		return nil, false
	}
	return o.CpuUtilizationAverageCores, true
}

// HasCpuUtilizationAverageCores returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasCpuUtilizationAverageCores() bool {
	if o != nil && !IsNil(o.CpuUtilizationAverageCores) {
		return true
	}

	return false
}

// SetCpuUtilizationAverageCores gets a reference to the given float32 and assigns it to the CpuUtilizationAverageCores field.
func (o *VmMonitoringResponse) SetCpuUtilizationAverageCores(v float32) {
	o.CpuUtilizationAverageCores = &v
}

// GetAvgCpuUtilizationAverageCores returns the AvgCpuUtilizationAverageCores field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetAvgCpuUtilizationAverageCores() float32 {
	if o == nil || IsNil(o.AvgCpuUtilizationAverageCores) {
		var ret float32
		return ret
	}
	return *o.AvgCpuUtilizationAverageCores
}

// GetAvgCpuUtilizationAverageCoresOk returns a tuple with the AvgCpuUtilizationAverageCores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetAvgCpuUtilizationAverageCoresOk() (*float32, bool) {
	if o == nil || IsNil(o.AvgCpuUtilizationAverageCores) {
		return nil, false
	}
	return o.AvgCpuUtilizationAverageCores, true
}

// HasAvgCpuUtilizationAverageCores returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasAvgCpuUtilizationAverageCores() bool {
	if o != nil && !IsNil(o.AvgCpuUtilizationAverageCores) {
		return true
	}

	return false
}

// SetAvgCpuUtilizationAverageCores gets a reference to the given float32 and assigns it to the AvgCpuUtilizationAverageCores field.
func (o *VmMonitoringResponse) SetAvgCpuUtilizationAverageCores(v float32) {
	o.AvgCpuUtilizationAverageCores = &v
}

// GetMaxCpuUtilizationAverageCores returns the MaxCpuUtilizationAverageCores field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetMaxCpuUtilizationAverageCores() float32 {
	if o == nil || IsNil(o.MaxCpuUtilizationAverageCores) {
		var ret float32
		return ret
	}
	return *o.MaxCpuUtilizationAverageCores
}

// GetMaxCpuUtilizationAverageCoresOk returns a tuple with the MaxCpuUtilizationAverageCores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetMaxCpuUtilizationAverageCoresOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxCpuUtilizationAverageCores) {
		return nil, false
	}
	return o.MaxCpuUtilizationAverageCores, true
}

// HasMaxCpuUtilizationAverageCores returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasMaxCpuUtilizationAverageCores() bool {
	if o != nil && !IsNil(o.MaxCpuUtilizationAverageCores) {
		return true
	}

	return false
}

// SetMaxCpuUtilizationAverageCores gets a reference to the given float32 and assigns it to the MaxCpuUtilizationAverageCores field.
func (o *VmMonitoringResponse) SetMaxCpuUtilizationAverageCores(v float32) {
	o.MaxCpuUtilizationAverageCores = &v
}

// GetCpuTotalPercent returns the CpuTotalPercent field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetCpuTotalPercent() int32 {
	if o == nil || IsNil(o.CpuTotalPercent) {
		var ret int32
		return ret
	}
	return *o.CpuTotalPercent
}

// GetCpuTotalPercentOk returns a tuple with the CpuTotalPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetCpuTotalPercentOk() (*int32, bool) {
	if o == nil || IsNil(o.CpuTotalPercent) {
		return nil, false
	}
	return o.CpuTotalPercent, true
}

// HasCpuTotalPercent returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasCpuTotalPercent() bool {
	if o != nil && !IsNil(o.CpuTotalPercent) {
		return true
	}

	return false
}

// SetCpuTotalPercent gets a reference to the given int32 and assigns it to the CpuTotalPercent field.
func (o *VmMonitoringResponse) SetCpuTotalPercent(v int32) {
	o.CpuTotalPercent = &v
}

// GetCpuHumanLabel returns the CpuHumanLabel field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetCpuHumanLabel() string {
	if o == nil || IsNil(o.CpuHumanLabel) {
		var ret string
		return ret
	}
	return *o.CpuHumanLabel
}

// GetCpuHumanLabelOk returns a tuple with the CpuHumanLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetCpuHumanLabelOk() (*string, bool) {
	if o == nil || IsNil(o.CpuHumanLabel) {
		return nil, false
	}
	return o.CpuHumanLabel, true
}

// HasCpuHumanLabel returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasCpuHumanLabel() bool {
	if o != nil && !IsNil(o.CpuHumanLabel) {
		return true
	}

	return false
}

// SetCpuHumanLabel gets a reference to the given string and assigns it to the CpuHumanLabel field.
func (o *VmMonitoringResponse) SetCpuHumanLabel(v string) {
	o.CpuHumanLabel = &v
}

// GetRamDataPresent returns the RamDataPresent field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetRamDataPresent() int32 {
	if o == nil || IsNil(o.RamDataPresent) {
		var ret int32
		return ret
	}
	return *o.RamDataPresent
}

// GetRamDataPresentOk returns a tuple with the RamDataPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetRamDataPresentOk() (*int32, bool) {
	if o == nil || IsNil(o.RamDataPresent) {
		return nil, false
	}
	return o.RamDataPresent, true
}

// HasRamDataPresent returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasRamDataPresent() bool {
	if o != nil && !IsNil(o.RamDataPresent) {
		return true
	}

	return false
}

// SetRamDataPresent gets a reference to the given int32 and assigns it to the RamDataPresent field.
func (o *VmMonitoringResponse) SetRamDataPresent(v int32) {
	o.RamDataPresent = &v
}

// GetRamUsageAverageGb returns the RamUsageAverageGb field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetRamUsageAverageGb() float32 {
	if o == nil || IsNil(o.RamUsageAverageGb) {
		var ret float32
		return ret
	}
	return *o.RamUsageAverageGb
}

// GetRamUsageAverageGbOk returns a tuple with the RamUsageAverageGb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetRamUsageAverageGbOk() (*float32, bool) {
	if o == nil || IsNil(o.RamUsageAverageGb) {
		return nil, false
	}
	return o.RamUsageAverageGb, true
}

// HasRamUsageAverageGb returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasRamUsageAverageGb() bool {
	if o != nil && !IsNil(o.RamUsageAverageGb) {
		return true
	}

	return false
}

// SetRamUsageAverageGb gets a reference to the given float32 and assigns it to the RamUsageAverageGb field.
func (o *VmMonitoringResponse) SetRamUsageAverageGb(v float32) {
	o.RamUsageAverageGb = &v
}

// GetAvgRamUsageAverageGb returns the AvgRamUsageAverageGb field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetAvgRamUsageAverageGb() float32 {
	if o == nil || IsNil(o.AvgRamUsageAverageGb) {
		var ret float32
		return ret
	}
	return *o.AvgRamUsageAverageGb
}

// GetAvgRamUsageAverageGbOk returns a tuple with the AvgRamUsageAverageGb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetAvgRamUsageAverageGbOk() (*float32, bool) {
	if o == nil || IsNil(o.AvgRamUsageAverageGb) {
		return nil, false
	}
	return o.AvgRamUsageAverageGb, true
}

// HasAvgRamUsageAverageGb returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasAvgRamUsageAverageGb() bool {
	if o != nil && !IsNil(o.AvgRamUsageAverageGb) {
		return true
	}

	return false
}

// SetAvgRamUsageAverageGb gets a reference to the given float32 and assigns it to the AvgRamUsageAverageGb field.
func (o *VmMonitoringResponse) SetAvgRamUsageAverageGb(v float32) {
	o.AvgRamUsageAverageGb = &v
}

// GetMaxRamUsageAverageGb returns the MaxRamUsageAverageGb field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetMaxRamUsageAverageGb() float32 {
	if o == nil || IsNil(o.MaxRamUsageAverageGb) {
		var ret float32
		return ret
	}
	return *o.MaxRamUsageAverageGb
}

// GetMaxRamUsageAverageGbOk returns a tuple with the MaxRamUsageAverageGb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetMaxRamUsageAverageGbOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxRamUsageAverageGb) {
		return nil, false
	}
	return o.MaxRamUsageAverageGb, true
}

// HasMaxRamUsageAverageGb returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasMaxRamUsageAverageGb() bool {
	if o != nil && !IsNil(o.MaxRamUsageAverageGb) {
		return true
	}

	return false
}

// SetMaxRamUsageAverageGb gets a reference to the given float32 and assigns it to the MaxRamUsageAverageGb field.
func (o *VmMonitoringResponse) SetMaxRamUsageAverageGb(v float32) {
	o.MaxRamUsageAverageGb = &v
}

// GetRamTotalAmountGb returns the RamTotalAmountGb field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetRamTotalAmountGb() float32 {
	if o == nil || IsNil(o.RamTotalAmountGb) {
		var ret float32
		return ret
	}
	return *o.RamTotalAmountGb
}

// GetRamTotalAmountGbOk returns a tuple with the RamTotalAmountGb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetRamTotalAmountGbOk() (*float32, bool) {
	if o == nil || IsNil(o.RamTotalAmountGb) {
		return nil, false
	}
	return o.RamTotalAmountGb, true
}

// HasRamTotalAmountGb returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasRamTotalAmountGb() bool {
	if o != nil && !IsNil(o.RamTotalAmountGb) {
		return true
	}

	return false
}

// SetRamTotalAmountGb gets a reference to the given float32 and assigns it to the RamTotalAmountGb field.
func (o *VmMonitoringResponse) SetRamTotalAmountGb(v float32) {
	o.RamTotalAmountGb = &v
}

// GetRamHumanLabel returns the RamHumanLabel field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetRamHumanLabel() string {
	if o == nil || IsNil(o.RamHumanLabel) {
		var ret string
		return ret
	}
	return *o.RamHumanLabel
}

// GetRamHumanLabelOk returns a tuple with the RamHumanLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetRamHumanLabelOk() (*string, bool) {
	if o == nil || IsNil(o.RamHumanLabel) {
		return nil, false
	}
	return o.RamHumanLabel, true
}

// HasRamHumanLabel returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasRamHumanLabel() bool {
	if o != nil && !IsNil(o.RamHumanLabel) {
		return true
	}

	return false
}

// SetRamHumanLabel gets a reference to the given string and assigns it to the RamHumanLabel field.
func (o *VmMonitoringResponse) SetRamHumanLabel(v string) {
	o.RamHumanLabel = &v
}

// GetDiskUsedDataPresent returns the DiskUsedDataPresent field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetDiskUsedDataPresent() int32 {
	if o == nil || IsNil(o.DiskUsedDataPresent) {
		var ret int32
		return ret
	}
	return *o.DiskUsedDataPresent
}

// GetDiskUsedDataPresentOk returns a tuple with the DiskUsedDataPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetDiskUsedDataPresentOk() (*int32, bool) {
	if o == nil || IsNil(o.DiskUsedDataPresent) {
		return nil, false
	}
	return o.DiskUsedDataPresent, true
}

// HasDiskUsedDataPresent returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasDiskUsedDataPresent() bool {
	if o != nil && !IsNil(o.DiskUsedDataPresent) {
		return true
	}

	return false
}

// SetDiskUsedDataPresent gets a reference to the given int32 and assigns it to the DiskUsedDataPresent field.
func (o *VmMonitoringResponse) SetDiskUsedDataPresent(v int32) {
	o.DiskUsedDataPresent = &v
}

// GetDiskSpaceUsedGb returns the DiskSpaceUsedGb field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetDiskSpaceUsedGb() float32 {
	if o == nil || IsNil(o.DiskSpaceUsedGb) {
		var ret float32
		return ret
	}
	return *o.DiskSpaceUsedGb
}

// GetDiskSpaceUsedGbOk returns a tuple with the DiskSpaceUsedGb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetDiskSpaceUsedGbOk() (*float32, bool) {
	if o == nil || IsNil(o.DiskSpaceUsedGb) {
		return nil, false
	}
	return o.DiskSpaceUsedGb, true
}

// HasDiskSpaceUsedGb returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasDiskSpaceUsedGb() bool {
	if o != nil && !IsNil(o.DiskSpaceUsedGb) {
		return true
	}

	return false
}

// SetDiskSpaceUsedGb gets a reference to the given float32 and assigns it to the DiskSpaceUsedGb field.
func (o *VmMonitoringResponse) SetDiskSpaceUsedGb(v float32) {
	o.DiskSpaceUsedGb = &v
}

// GetAvgDiskSpaceUsedGb returns the AvgDiskSpaceUsedGb field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetAvgDiskSpaceUsedGb() float32 {
	if o == nil || IsNil(o.AvgDiskSpaceUsedGb) {
		var ret float32
		return ret
	}
	return *o.AvgDiskSpaceUsedGb
}

// GetAvgDiskSpaceUsedGbOk returns a tuple with the AvgDiskSpaceUsedGb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetAvgDiskSpaceUsedGbOk() (*float32, bool) {
	if o == nil || IsNil(o.AvgDiskSpaceUsedGb) {
		return nil, false
	}
	return o.AvgDiskSpaceUsedGb, true
}

// HasAvgDiskSpaceUsedGb returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasAvgDiskSpaceUsedGb() bool {
	if o != nil && !IsNil(o.AvgDiskSpaceUsedGb) {
		return true
	}

	return false
}

// SetAvgDiskSpaceUsedGb gets a reference to the given float32 and assigns it to the AvgDiskSpaceUsedGb field.
func (o *VmMonitoringResponse) SetAvgDiskSpaceUsedGb(v float32) {
	o.AvgDiskSpaceUsedGb = &v
}

// GetMaxDiskSpaceUsedGb returns the MaxDiskSpaceUsedGb field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetMaxDiskSpaceUsedGb() float32 {
	if o == nil || IsNil(o.MaxDiskSpaceUsedGb) {
		var ret float32
		return ret
	}
	return *o.MaxDiskSpaceUsedGb
}

// GetMaxDiskSpaceUsedGbOk returns a tuple with the MaxDiskSpaceUsedGb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetMaxDiskSpaceUsedGbOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxDiskSpaceUsedGb) {
		return nil, false
	}
	return o.MaxDiskSpaceUsedGb, true
}

// HasMaxDiskSpaceUsedGb returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasMaxDiskSpaceUsedGb() bool {
	if o != nil && !IsNil(o.MaxDiskSpaceUsedGb) {
		return true
	}

	return false
}

// SetMaxDiskSpaceUsedGb gets a reference to the given float32 and assigns it to the MaxDiskSpaceUsedGb field.
func (o *VmMonitoringResponse) SetMaxDiskSpaceUsedGb(v float32) {
	o.MaxDiskSpaceUsedGb = &v
}

// GetDiskSpaceTotalGb returns the DiskSpaceTotalGb field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetDiskSpaceTotalGb() int32 {
	if o == nil || IsNil(o.DiskSpaceTotalGb) {
		var ret int32
		return ret
	}
	return *o.DiskSpaceTotalGb
}

// GetDiskSpaceTotalGbOk returns a tuple with the DiskSpaceTotalGb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetDiskSpaceTotalGbOk() (*int32, bool) {
	if o == nil || IsNil(o.DiskSpaceTotalGb) {
		return nil, false
	}
	return o.DiskSpaceTotalGb, true
}

// HasDiskSpaceTotalGb returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasDiskSpaceTotalGb() bool {
	if o != nil && !IsNil(o.DiskSpaceTotalGb) {
		return true
	}

	return false
}

// SetDiskSpaceTotalGb gets a reference to the given int32 and assigns it to the DiskSpaceTotalGb field.
func (o *VmMonitoringResponse) SetDiskSpaceTotalGb(v int32) {
	o.DiskSpaceTotalGb = &v
}

// GetDiskSpaceHumanLabel returns the DiskSpaceHumanLabel field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetDiskSpaceHumanLabel() string {
	if o == nil || IsNil(o.DiskSpaceHumanLabel) {
		var ret string
		return ret
	}
	return *o.DiskSpaceHumanLabel
}

// GetDiskSpaceHumanLabelOk returns a tuple with the DiskSpaceHumanLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetDiskSpaceHumanLabelOk() (*string, bool) {
	if o == nil || IsNil(o.DiskSpaceHumanLabel) {
		return nil, false
	}
	return o.DiskSpaceHumanLabel, true
}

// HasDiskSpaceHumanLabel returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasDiskSpaceHumanLabel() bool {
	if o != nil && !IsNil(o.DiskSpaceHumanLabel) {
		return true
	}

	return false
}

// SetDiskSpaceHumanLabel gets a reference to the given string and assigns it to the DiskSpaceHumanLabel field.
func (o *VmMonitoringResponse) SetDiskSpaceHumanLabel(v string) {
	o.DiskSpaceHumanLabel = &v
}

// GetDiskWriteDataPresent returns the DiskWriteDataPresent field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetDiskWriteDataPresent() int32 {
	if o == nil || IsNil(o.DiskWriteDataPresent) {
		var ret int32
		return ret
	}
	return *o.DiskWriteDataPresent
}

// GetDiskWriteDataPresentOk returns a tuple with the DiskWriteDataPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetDiskWriteDataPresentOk() (*int32, bool) {
	if o == nil || IsNil(o.DiskWriteDataPresent) {
		return nil, false
	}
	return o.DiskWriteDataPresent, true
}

// HasDiskWriteDataPresent returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasDiskWriteDataPresent() bool {
	if o != nil && !IsNil(o.DiskWriteDataPresent) {
		return true
	}

	return false
}

// SetDiskWriteDataPresent gets a reference to the given int32 and assigns it to the DiskWriteDataPresent field.
func (o *VmMonitoringResponse) SetDiskWriteDataPresent(v int32) {
	o.DiskWriteDataPresent = &v
}

// GetDiskWriteCoef returns the DiskWriteCoef field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetDiskWriteCoef() float32 {
	if o == nil || IsNil(o.DiskWriteCoef) {
		var ret float32
		return ret
	}
	return *o.DiskWriteCoef
}

// GetDiskWriteCoefOk returns a tuple with the DiskWriteCoef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetDiskWriteCoefOk() (*float32, bool) {
	if o == nil || IsNil(o.DiskWriteCoef) {
		return nil, false
	}
	return o.DiskWriteCoef, true
}

// HasDiskWriteCoef returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasDiskWriteCoef() bool {
	if o != nil && !IsNil(o.DiskWriteCoef) {
		return true
	}

	return false
}

// SetDiskWriteCoef gets a reference to the given float32 and assigns it to the DiskWriteCoef field.
func (o *VmMonitoringResponse) SetDiskWriteCoef(v float32) {
	o.DiskWriteCoef = &v
}

// GetDiskWriteHuman returns the DiskWriteHuman field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetDiskWriteHuman() float32 {
	if o == nil || IsNil(o.DiskWriteHuman) {
		var ret float32
		return ret
	}
	return *o.DiskWriteHuman
}

// GetDiskWriteHumanOk returns a tuple with the DiskWriteHuman field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetDiskWriteHumanOk() (*float32, bool) {
	if o == nil || IsNil(o.DiskWriteHuman) {
		return nil, false
	}
	return o.DiskWriteHuman, true
}

// HasDiskWriteHuman returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasDiskWriteHuman() bool {
	if o != nil && !IsNil(o.DiskWriteHuman) {
		return true
	}

	return false
}

// SetDiskWriteHuman gets a reference to the given float32 and assigns it to the DiskWriteHuman field.
func (o *VmMonitoringResponse) SetDiskWriteHuman(v float32) {
	o.DiskWriteHuman = &v
}

// GetAvgDiskWriteHuman returns the AvgDiskWriteHuman field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetAvgDiskWriteHuman() float32 {
	if o == nil || IsNil(o.AvgDiskWriteHuman) {
		var ret float32
		return ret
	}
	return *o.AvgDiskWriteHuman
}

// GetAvgDiskWriteHumanOk returns a tuple with the AvgDiskWriteHuman field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetAvgDiskWriteHumanOk() (*float32, bool) {
	if o == nil || IsNil(o.AvgDiskWriteHuman) {
		return nil, false
	}
	return o.AvgDiskWriteHuman, true
}

// HasAvgDiskWriteHuman returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasAvgDiskWriteHuman() bool {
	if o != nil && !IsNil(o.AvgDiskWriteHuman) {
		return true
	}

	return false
}

// SetAvgDiskWriteHuman gets a reference to the given float32 and assigns it to the AvgDiskWriteHuman field.
func (o *VmMonitoringResponse) SetAvgDiskWriteHuman(v float32) {
	o.AvgDiskWriteHuman = &v
}

// GetMaxDiskWriteHuman returns the MaxDiskWriteHuman field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetMaxDiskWriteHuman() float32 {
	if o == nil || IsNil(o.MaxDiskWriteHuman) {
		var ret float32
		return ret
	}
	return *o.MaxDiskWriteHuman
}

// GetMaxDiskWriteHumanOk returns a tuple with the MaxDiskWriteHuman field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetMaxDiskWriteHumanOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxDiskWriteHuman) {
		return nil, false
	}
	return o.MaxDiskWriteHuman, true
}

// HasMaxDiskWriteHuman returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasMaxDiskWriteHuman() bool {
	if o != nil && !IsNil(o.MaxDiskWriteHuman) {
		return true
	}

	return false
}

// SetMaxDiskWriteHuman gets a reference to the given float32 and assigns it to the MaxDiskWriteHuman field.
func (o *VmMonitoringResponse) SetMaxDiskWriteHuman(v float32) {
	o.MaxDiskWriteHuman = &v
}

// GetDiskWriteHumanLabel returns the DiskWriteHumanLabel field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetDiskWriteHumanLabel() string {
	if o == nil || IsNil(o.DiskWriteHumanLabel) {
		var ret string
		return ret
	}
	return *o.DiskWriteHumanLabel
}

// GetDiskWriteHumanLabelOk returns a tuple with the DiskWriteHumanLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetDiskWriteHumanLabelOk() (*string, bool) {
	if o == nil || IsNil(o.DiskWriteHumanLabel) {
		return nil, false
	}
	return o.DiskWriteHumanLabel, true
}

// HasDiskWriteHumanLabel returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasDiskWriteHumanLabel() bool {
	if o != nil && !IsNil(o.DiskWriteHumanLabel) {
		return true
	}

	return false
}

// SetDiskWriteHumanLabel gets a reference to the given string and assigns it to the DiskWriteHumanLabel field.
func (o *VmMonitoringResponse) SetDiskWriteHumanLabel(v string) {
	o.DiskWriteHumanLabel = &v
}

// GetDiskReadDataPresent returns the DiskReadDataPresent field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetDiskReadDataPresent() int32 {
	if o == nil || IsNil(o.DiskReadDataPresent) {
		var ret int32
		return ret
	}
	return *o.DiskReadDataPresent
}

// GetDiskReadDataPresentOk returns a tuple with the DiskReadDataPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetDiskReadDataPresentOk() (*int32, bool) {
	if o == nil || IsNil(o.DiskReadDataPresent) {
		return nil, false
	}
	return o.DiskReadDataPresent, true
}

// HasDiskReadDataPresent returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasDiskReadDataPresent() bool {
	if o != nil && !IsNil(o.DiskReadDataPresent) {
		return true
	}

	return false
}

// SetDiskReadDataPresent gets a reference to the given int32 and assigns it to the DiskReadDataPresent field.
func (o *VmMonitoringResponse) SetDiskReadDataPresent(v int32) {
	o.DiskReadDataPresent = &v
}

// GetDiskReadCoef returns the DiskReadCoef field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetDiskReadCoef() float32 {
	if o == nil || IsNil(o.DiskReadCoef) {
		var ret float32
		return ret
	}
	return *o.DiskReadCoef
}

// GetDiskReadCoefOk returns a tuple with the DiskReadCoef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetDiskReadCoefOk() (*float32, bool) {
	if o == nil || IsNil(o.DiskReadCoef) {
		return nil, false
	}
	return o.DiskReadCoef, true
}

// HasDiskReadCoef returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasDiskReadCoef() bool {
	if o != nil && !IsNil(o.DiskReadCoef) {
		return true
	}

	return false
}

// SetDiskReadCoef gets a reference to the given float32 and assigns it to the DiskReadCoef field.
func (o *VmMonitoringResponse) SetDiskReadCoef(v float32) {
	o.DiskReadCoef = &v
}

// GetDiskReadHuman returns the DiskReadHuman field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetDiskReadHuman() float32 {
	if o == nil || IsNil(o.DiskReadHuman) {
		var ret float32
		return ret
	}
	return *o.DiskReadHuman
}

// GetDiskReadHumanOk returns a tuple with the DiskReadHuman field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetDiskReadHumanOk() (*float32, bool) {
	if o == nil || IsNil(o.DiskReadHuman) {
		return nil, false
	}
	return o.DiskReadHuman, true
}

// HasDiskReadHuman returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasDiskReadHuman() bool {
	if o != nil && !IsNil(o.DiskReadHuman) {
		return true
	}

	return false
}

// SetDiskReadHuman gets a reference to the given float32 and assigns it to the DiskReadHuman field.
func (o *VmMonitoringResponse) SetDiskReadHuman(v float32) {
	o.DiskReadHuman = &v
}

// GetAvgDiskReadHuman returns the AvgDiskReadHuman field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetAvgDiskReadHuman() float32 {
	if o == nil || IsNil(o.AvgDiskReadHuman) {
		var ret float32
		return ret
	}
	return *o.AvgDiskReadHuman
}

// GetAvgDiskReadHumanOk returns a tuple with the AvgDiskReadHuman field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetAvgDiskReadHumanOk() (*float32, bool) {
	if o == nil || IsNil(o.AvgDiskReadHuman) {
		return nil, false
	}
	return o.AvgDiskReadHuman, true
}

// HasAvgDiskReadHuman returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasAvgDiskReadHuman() bool {
	if o != nil && !IsNil(o.AvgDiskReadHuman) {
		return true
	}

	return false
}

// SetAvgDiskReadHuman gets a reference to the given float32 and assigns it to the AvgDiskReadHuman field.
func (o *VmMonitoringResponse) SetAvgDiskReadHuman(v float32) {
	o.AvgDiskReadHuman = &v
}

// GetMaxDiskReadHuman returns the MaxDiskReadHuman field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetMaxDiskReadHuman() float32 {
	if o == nil || IsNil(o.MaxDiskReadHuman) {
		var ret float32
		return ret
	}
	return *o.MaxDiskReadHuman
}

// GetMaxDiskReadHumanOk returns a tuple with the MaxDiskReadHuman field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetMaxDiskReadHumanOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxDiskReadHuman) {
		return nil, false
	}
	return o.MaxDiskReadHuman, true
}

// HasMaxDiskReadHuman returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasMaxDiskReadHuman() bool {
	if o != nil && !IsNil(o.MaxDiskReadHuman) {
		return true
	}

	return false
}

// SetMaxDiskReadHuman gets a reference to the given float32 and assigns it to the MaxDiskReadHuman field.
func (o *VmMonitoringResponse) SetMaxDiskReadHuman(v float32) {
	o.MaxDiskReadHuman = &v
}

// GetDiskReadHumanLabel returns the DiskReadHumanLabel field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetDiskReadHumanLabel() string {
	if o == nil || IsNil(o.DiskReadHumanLabel) {
		var ret string
		return ret
	}
	return *o.DiskReadHumanLabel
}

// GetDiskReadHumanLabelOk returns a tuple with the DiskReadHumanLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetDiskReadHumanLabelOk() (*string, bool) {
	if o == nil || IsNil(o.DiskReadHumanLabel) {
		return nil, false
	}
	return o.DiskReadHumanLabel, true
}

// HasDiskReadHumanLabel returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasDiskReadHumanLabel() bool {
	if o != nil && !IsNil(o.DiskReadHumanLabel) {
		return true
	}

	return false
}

// SetDiskReadHumanLabel gets a reference to the given string and assigns it to the DiskReadHumanLabel field.
func (o *VmMonitoringResponse) SetDiskReadHumanLabel(v string) {
	o.DiskReadHumanLabel = &v
}

// GetNetworkOutDataPresent returns the NetworkOutDataPresent field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetNetworkOutDataPresent() int32 {
	if o == nil || IsNil(o.NetworkOutDataPresent) {
		var ret int32
		return ret
	}
	return *o.NetworkOutDataPresent
}

// GetNetworkOutDataPresentOk returns a tuple with the NetworkOutDataPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetNetworkOutDataPresentOk() (*int32, bool) {
	if o == nil || IsNil(o.NetworkOutDataPresent) {
		return nil, false
	}
	return o.NetworkOutDataPresent, true
}

// HasNetworkOutDataPresent returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasNetworkOutDataPresent() bool {
	if o != nil && !IsNil(o.NetworkOutDataPresent) {
		return true
	}

	return false
}

// SetNetworkOutDataPresent gets a reference to the given int32 and assigns it to the NetworkOutDataPresent field.
func (o *VmMonitoringResponse) SetNetworkOutDataPresent(v int32) {
	o.NetworkOutDataPresent = &v
}

// GetNetworkOutCoef returns the NetworkOutCoef field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetNetworkOutCoef() float32 {
	if o == nil || IsNil(o.NetworkOutCoef) {
		var ret float32
		return ret
	}
	return *o.NetworkOutCoef
}

// GetNetworkOutCoefOk returns a tuple with the NetworkOutCoef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetNetworkOutCoefOk() (*float32, bool) {
	if o == nil || IsNil(o.NetworkOutCoef) {
		return nil, false
	}
	return o.NetworkOutCoef, true
}

// HasNetworkOutCoef returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasNetworkOutCoef() bool {
	if o != nil && !IsNil(o.NetworkOutCoef) {
		return true
	}

	return false
}

// SetNetworkOutCoef gets a reference to the given float32 and assigns it to the NetworkOutCoef field.
func (o *VmMonitoringResponse) SetNetworkOutCoef(v float32) {
	o.NetworkOutCoef = &v
}

// GetNetworkOutHuman returns the NetworkOutHuman field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetNetworkOutHuman() float32 {
	if o == nil || IsNil(o.NetworkOutHuman) {
		var ret float32
		return ret
	}
	return *o.NetworkOutHuman
}

// GetNetworkOutHumanOk returns a tuple with the NetworkOutHuman field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetNetworkOutHumanOk() (*float32, bool) {
	if o == nil || IsNil(o.NetworkOutHuman) {
		return nil, false
	}
	return o.NetworkOutHuman, true
}

// HasNetworkOutHuman returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasNetworkOutHuman() bool {
	if o != nil && !IsNil(o.NetworkOutHuman) {
		return true
	}

	return false
}

// SetNetworkOutHuman gets a reference to the given float32 and assigns it to the NetworkOutHuman field.
func (o *VmMonitoringResponse) SetNetworkOutHuman(v float32) {
	o.NetworkOutHuman = &v
}

// GetAvgNetworkOutHuman returns the AvgNetworkOutHuman field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetAvgNetworkOutHuman() float32 {
	if o == nil || IsNil(o.AvgNetworkOutHuman) {
		var ret float32
		return ret
	}
	return *o.AvgNetworkOutHuman
}

// GetAvgNetworkOutHumanOk returns a tuple with the AvgNetworkOutHuman field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetAvgNetworkOutHumanOk() (*float32, bool) {
	if o == nil || IsNil(o.AvgNetworkOutHuman) {
		return nil, false
	}
	return o.AvgNetworkOutHuman, true
}

// HasAvgNetworkOutHuman returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasAvgNetworkOutHuman() bool {
	if o != nil && !IsNil(o.AvgNetworkOutHuman) {
		return true
	}

	return false
}

// SetAvgNetworkOutHuman gets a reference to the given float32 and assigns it to the AvgNetworkOutHuman field.
func (o *VmMonitoringResponse) SetAvgNetworkOutHuman(v float32) {
	o.AvgNetworkOutHuman = &v
}

// GetMaxNetworkOutHuman returns the MaxNetworkOutHuman field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetMaxNetworkOutHuman() float32 {
	if o == nil || IsNil(o.MaxNetworkOutHuman) {
		var ret float32
		return ret
	}
	return *o.MaxNetworkOutHuman
}

// GetMaxNetworkOutHumanOk returns a tuple with the MaxNetworkOutHuman field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetMaxNetworkOutHumanOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxNetworkOutHuman) {
		return nil, false
	}
	return o.MaxNetworkOutHuman, true
}

// HasMaxNetworkOutHuman returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasMaxNetworkOutHuman() bool {
	if o != nil && !IsNil(o.MaxNetworkOutHuman) {
		return true
	}

	return false
}

// SetMaxNetworkOutHuman gets a reference to the given float32 and assigns it to the MaxNetworkOutHuman field.
func (o *VmMonitoringResponse) SetMaxNetworkOutHuman(v float32) {
	o.MaxNetworkOutHuman = &v
}

// GetNetworkOutHumanLabel returns the NetworkOutHumanLabel field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetNetworkOutHumanLabel() string {
	if o == nil || IsNil(o.NetworkOutHumanLabel) {
		var ret string
		return ret
	}
	return *o.NetworkOutHumanLabel
}

// GetNetworkOutHumanLabelOk returns a tuple with the NetworkOutHumanLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetNetworkOutHumanLabelOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkOutHumanLabel) {
		return nil, false
	}
	return o.NetworkOutHumanLabel, true
}

// HasNetworkOutHumanLabel returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasNetworkOutHumanLabel() bool {
	if o != nil && !IsNil(o.NetworkOutHumanLabel) {
		return true
	}

	return false
}

// SetNetworkOutHumanLabel gets a reference to the given string and assigns it to the NetworkOutHumanLabel field.
func (o *VmMonitoringResponse) SetNetworkOutHumanLabel(v string) {
	o.NetworkOutHumanLabel = &v
}

// GetNetworkInDataPresent returns the NetworkInDataPresent field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetNetworkInDataPresent() int32 {
	if o == nil || IsNil(o.NetworkInDataPresent) {
		var ret int32
		return ret
	}
	return *o.NetworkInDataPresent
}

// GetNetworkInDataPresentOk returns a tuple with the NetworkInDataPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetNetworkInDataPresentOk() (*int32, bool) {
	if o == nil || IsNil(o.NetworkInDataPresent) {
		return nil, false
	}
	return o.NetworkInDataPresent, true
}

// HasNetworkInDataPresent returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasNetworkInDataPresent() bool {
	if o != nil && !IsNil(o.NetworkInDataPresent) {
		return true
	}

	return false
}

// SetNetworkInDataPresent gets a reference to the given int32 and assigns it to the NetworkInDataPresent field.
func (o *VmMonitoringResponse) SetNetworkInDataPresent(v int32) {
	o.NetworkInDataPresent = &v
}

// GetNetworkInCoef returns the NetworkInCoef field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetNetworkInCoef() float32 {
	if o == nil || IsNil(o.NetworkInCoef) {
		var ret float32
		return ret
	}
	return *o.NetworkInCoef
}

// GetNetworkInCoefOk returns a tuple with the NetworkInCoef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetNetworkInCoefOk() (*float32, bool) {
	if o == nil || IsNil(o.NetworkInCoef) {
		return nil, false
	}
	return o.NetworkInCoef, true
}

// HasNetworkInCoef returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasNetworkInCoef() bool {
	if o != nil && !IsNil(o.NetworkInCoef) {
		return true
	}

	return false
}

// SetNetworkInCoef gets a reference to the given float32 and assigns it to the NetworkInCoef field.
func (o *VmMonitoringResponse) SetNetworkInCoef(v float32) {
	o.NetworkInCoef = &v
}

// GetNetworkInHuman returns the NetworkInHuman field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetNetworkInHuman() float32 {
	if o == nil || IsNil(o.NetworkInHuman) {
		var ret float32
		return ret
	}
	return *o.NetworkInHuman
}

// GetNetworkInHumanOk returns a tuple with the NetworkInHuman field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetNetworkInHumanOk() (*float32, bool) {
	if o == nil || IsNil(o.NetworkInHuman) {
		return nil, false
	}
	return o.NetworkInHuman, true
}

// HasNetworkInHuman returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasNetworkInHuman() bool {
	if o != nil && !IsNil(o.NetworkInHuman) {
		return true
	}

	return false
}

// SetNetworkInHuman gets a reference to the given float32 and assigns it to the NetworkInHuman field.
func (o *VmMonitoringResponse) SetNetworkInHuman(v float32) {
	o.NetworkInHuman = &v
}

// GetAvgNetworkInHuman returns the AvgNetworkInHuman field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetAvgNetworkInHuman() float32 {
	if o == nil || IsNil(o.AvgNetworkInHuman) {
		var ret float32
		return ret
	}
	return *o.AvgNetworkInHuman
}

// GetAvgNetworkInHumanOk returns a tuple with the AvgNetworkInHuman field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetAvgNetworkInHumanOk() (*float32, bool) {
	if o == nil || IsNil(o.AvgNetworkInHuman) {
		return nil, false
	}
	return o.AvgNetworkInHuman, true
}

// HasAvgNetworkInHuman returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasAvgNetworkInHuman() bool {
	if o != nil && !IsNil(o.AvgNetworkInHuman) {
		return true
	}

	return false
}

// SetAvgNetworkInHuman gets a reference to the given float32 and assigns it to the AvgNetworkInHuman field.
func (o *VmMonitoringResponse) SetAvgNetworkInHuman(v float32) {
	o.AvgNetworkInHuman = &v
}

// GetMaxNetworkInHuman returns the MaxNetworkInHuman field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetMaxNetworkInHuman() float32 {
	if o == nil || IsNil(o.MaxNetworkInHuman) {
		var ret float32
		return ret
	}
	return *o.MaxNetworkInHuman
}

// GetMaxNetworkInHumanOk returns a tuple with the MaxNetworkInHuman field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetMaxNetworkInHumanOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxNetworkInHuman) {
		return nil, false
	}
	return o.MaxNetworkInHuman, true
}

// HasMaxNetworkInHuman returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasMaxNetworkInHuman() bool {
	if o != nil && !IsNil(o.MaxNetworkInHuman) {
		return true
	}

	return false
}

// SetMaxNetworkInHuman gets a reference to the given float32 and assigns it to the MaxNetworkInHuman field.
func (o *VmMonitoringResponse) SetMaxNetworkInHuman(v float32) {
	o.MaxNetworkInHuman = &v
}

// GetNetworkInHumanLabel returns the NetworkInHumanLabel field value if set, zero value otherwise.
func (o *VmMonitoringResponse) GetNetworkInHumanLabel() string {
	if o == nil || IsNil(o.NetworkInHumanLabel) {
		var ret string
		return ret
	}
	return *o.NetworkInHumanLabel
}

// GetNetworkInHumanLabelOk returns a tuple with the NetworkInHumanLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmMonitoringResponse) GetNetworkInHumanLabelOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkInHumanLabel) {
		return nil, false
	}
	return o.NetworkInHumanLabel, true
}

// HasNetworkInHumanLabel returns a boolean if a field has been set.
func (o *VmMonitoringResponse) HasNetworkInHumanLabel() bool {
	if o != nil && !IsNil(o.NetworkInHumanLabel) {
		return true
	}

	return false
}

// SetNetworkInHumanLabel gets a reference to the given string and assigns it to the NetworkInHumanLabel field.
func (o *VmMonitoringResponse) SetNetworkInHumanLabel(v string) {
	o.NetworkInHumanLabel = &v
}

func (o VmMonitoringResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VmMonitoringResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Timecode) {
		toSerialize["timecode"] = o.Timecode
	}
	if !IsNil(o.CpuDataPresent) {
		toSerialize["cpuDataPresent"] = o.CpuDataPresent
	}
	if !IsNil(o.CpuUtilizationAverageCores) {
		toSerialize["cpuUtilizationAverageCores"] = o.CpuUtilizationAverageCores
	}
	if !IsNil(o.AvgCpuUtilizationAverageCores) {
		toSerialize["avgCpuUtilizationAverageCores"] = o.AvgCpuUtilizationAverageCores
	}
	if !IsNil(o.MaxCpuUtilizationAverageCores) {
		toSerialize["maxCpuUtilizationAverageCores"] = o.MaxCpuUtilizationAverageCores
	}
	if !IsNil(o.CpuTotalPercent) {
		toSerialize["cpuTotalPercent"] = o.CpuTotalPercent
	}
	if !IsNil(o.CpuHumanLabel) {
		toSerialize["cpuHumanLabel"] = o.CpuHumanLabel
	}
	if !IsNil(o.RamDataPresent) {
		toSerialize["ramDataPresent"] = o.RamDataPresent
	}
	if !IsNil(o.RamUsageAverageGb) {
		toSerialize["ramUsageAverageGb"] = o.RamUsageAverageGb
	}
	if !IsNil(o.AvgRamUsageAverageGb) {
		toSerialize["avgRamUsageAverageGb"] = o.AvgRamUsageAverageGb
	}
	if !IsNil(o.MaxRamUsageAverageGb) {
		toSerialize["maxRamUsageAverageGb"] = o.MaxRamUsageAverageGb
	}
	if !IsNil(o.RamTotalAmountGb) {
		toSerialize["ramTotalAmountGb"] = o.RamTotalAmountGb
	}
	if !IsNil(o.RamHumanLabel) {
		toSerialize["ramHumanLabel"] = o.RamHumanLabel
	}
	if !IsNil(o.DiskUsedDataPresent) {
		toSerialize["diskUsedDataPresent"] = o.DiskUsedDataPresent
	}
	if !IsNil(o.DiskSpaceUsedGb) {
		toSerialize["diskSpaceUsedGb"] = o.DiskSpaceUsedGb
	}
	if !IsNil(o.AvgDiskSpaceUsedGb) {
		toSerialize["avgDiskSpaceUsedGb"] = o.AvgDiskSpaceUsedGb
	}
	if !IsNil(o.MaxDiskSpaceUsedGb) {
		toSerialize["maxDiskSpaceUsedGb"] = o.MaxDiskSpaceUsedGb
	}
	if !IsNil(o.DiskSpaceTotalGb) {
		toSerialize["diskSpaceTotalGb"] = o.DiskSpaceTotalGb
	}
	if !IsNil(o.DiskSpaceHumanLabel) {
		toSerialize["diskSpaceHumanLabel"] = o.DiskSpaceHumanLabel
	}
	if !IsNil(o.DiskWriteDataPresent) {
		toSerialize["diskWriteDataPresent"] = o.DiskWriteDataPresent
	}
	if !IsNil(o.DiskWriteCoef) {
		toSerialize["diskWriteCoef"] = o.DiskWriteCoef
	}
	if !IsNil(o.DiskWriteHuman) {
		toSerialize["diskWriteHuman"] = o.DiskWriteHuman
	}
	if !IsNil(o.AvgDiskWriteHuman) {
		toSerialize["avgDiskWriteHuman"] = o.AvgDiskWriteHuman
	}
	if !IsNil(o.MaxDiskWriteHuman) {
		toSerialize["maxDiskWriteHuman"] = o.MaxDiskWriteHuman
	}
	if !IsNil(o.DiskWriteHumanLabel) {
		toSerialize["diskWriteHumanLabel"] = o.DiskWriteHumanLabel
	}
	if !IsNil(o.DiskReadDataPresent) {
		toSerialize["diskReadDataPresent"] = o.DiskReadDataPresent
	}
	if !IsNil(o.DiskReadCoef) {
		toSerialize["diskReadCoef"] = o.DiskReadCoef
	}
	if !IsNil(o.DiskReadHuman) {
		toSerialize["diskReadHuman"] = o.DiskReadHuman
	}
	if !IsNil(o.AvgDiskReadHuman) {
		toSerialize["avgDiskReadHuman"] = o.AvgDiskReadHuman
	}
	if !IsNil(o.MaxDiskReadHuman) {
		toSerialize["maxDiskReadHuman"] = o.MaxDiskReadHuman
	}
	if !IsNil(o.DiskReadHumanLabel) {
		toSerialize["diskReadHumanLabel"] = o.DiskReadHumanLabel
	}
	if !IsNil(o.NetworkOutDataPresent) {
		toSerialize["networkOutDataPresent"] = o.NetworkOutDataPresent
	}
	if !IsNil(o.NetworkOutCoef) {
		toSerialize["networkOutCoef"] = o.NetworkOutCoef
	}
	if !IsNil(o.NetworkOutHuman) {
		toSerialize["networkOutHuman"] = o.NetworkOutHuman
	}
	if !IsNil(o.AvgNetworkOutHuman) {
		toSerialize["avgNetworkOutHuman"] = o.AvgNetworkOutHuman
	}
	if !IsNil(o.MaxNetworkOutHuman) {
		toSerialize["maxNetworkOutHuman"] = o.MaxNetworkOutHuman
	}
	if !IsNil(o.NetworkOutHumanLabel) {
		toSerialize["networkOutHumanLabel"] = o.NetworkOutHumanLabel
	}
	if !IsNil(o.NetworkInDataPresent) {
		toSerialize["networkInDataPresent"] = o.NetworkInDataPresent
	}
	if !IsNil(o.NetworkInCoef) {
		toSerialize["networkInCoef"] = o.NetworkInCoef
	}
	if !IsNil(o.NetworkInHuman) {
		toSerialize["networkInHuman"] = o.NetworkInHuman
	}
	if !IsNil(o.AvgNetworkInHuman) {
		toSerialize["avgNetworkInHuman"] = o.AvgNetworkInHuman
	}
	if !IsNil(o.MaxNetworkInHuman) {
		toSerialize["maxNetworkInHuman"] = o.MaxNetworkInHuman
	}
	if !IsNil(o.NetworkInHumanLabel) {
		toSerialize["networkInHumanLabel"] = o.NetworkInHumanLabel
	}
	return toSerialize, nil
}

type NullableVmMonitoringResponse struct {
	value *VmMonitoringResponse
	isSet bool
}

func (v NullableVmMonitoringResponse) Get() *VmMonitoringResponse {
	return v.value
}

func (v *NullableVmMonitoringResponse) Set(val *VmMonitoringResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableVmMonitoringResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableVmMonitoringResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmMonitoringResponse(val *VmMonitoringResponse) *NullableVmMonitoringResponse {
	return &NullableVmMonitoringResponse{value: val, isSet: true}
}

func (v NullableVmMonitoringResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmMonitoringResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


