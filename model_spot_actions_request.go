/*
Public EMMA API

### About Infrastructure API   **Base URL:** **<u>https://api.emma.ms/external</u>**   This **Infrastructure API** is for managing the emma cloud infrastructure within a project. The API enables you to view, create, edit, and delete _Virtual machines, Spot instances, Applications, Kubernetes clusters, SSH keys, Security groups, and Backup policies_. For creating the resources you can use the endpoints with the dictionaries: _Data centers, Locations, Providers, Operating systems, Virtual machines configurations, Spot instances configurations, Kubernetes clusters configurations._   ### Authentication   #### 1. Create service application   To access the API, enter your project, navigate to **Settings** > **Service Apps**, and create a service application. Select the access level **Read**, **Operate**, or **Manage**.   - **Read** - only GET methods are allowed in the API.   - **Operate** - some operations are allowed with the resources (e.g. _Start, Reboot,_ and _Shutdown_ of the Virtual machines).   - **Manage** - full creating, updating, and deleting of the resources is allowed.     #### 2. Get access token   - Copy the **Client ID** and **Client Secret** in the service application.  - Send an API request to the endpoint **_/issue-token** as specified in the **Authentication** section of the API documentation. You will receive access and refresh tokens in the response.   _For Linux / Mac:_  ```  curl -X POST https://api.emma.ms/external/v1/issue-token \\  -H \"Content-Type: application/json\" \\  -d '{\"clientId\": \"YOUR-CLIENT-ID\", \"clientSecret\": \"YOUR-CLIENT-SECRET\"}'  ```  _For Windows:_  ```  curl -X POST https://api.emma.ms/external/v1/issue-token ^  -H \"Content-Type: application/json\" ^  -d \"{\\\"clientId\\\": \\\"YOUR-CLIENT-ID\\\", \\\"clientSecret\\\": \\\"YOUR-CLIENT-SECRET\\\"}\"  ```      #### 3. Use access token in requests  The Bearer access token is a text string, included in the request header, for example:   _For Linux / Mac:_  ```  curl -X GET https://api.emma.ms/external/v1/locations -H \"Authorization: Bearer YOUR-ACCESS-TOKEN-HERE\"  ```   Use this token for the API requests.     #### 4. Refresh token  The access token will expire in 10 minutes. A new access token may be created using the refresh token (without Client ID and Client Secret).   To get a new access token send a request to the **_/refresh-token** endpoint:    _For Linux / Mac:_  ```  curl -X POST https://api.emma.ms/external/v1/refresh-token \\  -H \"Content-Type: application/json\" \\  -H \"Authorization: Bearer YOUR-ACCESS-TOKEN\" \\  -d '{\"refreshToken\": \"YOUR-REFRESH-TOKEN\"}'  ```       ### Possible response status codes   We use standard HTTP response codes to show the success or failure of requests.   `2xx` - successful responses.   `4xx` - client error responses (the response contains an explanation of the error).   `5xx` - server error responses.   The API uses the following status codes:   | Status Code | Description                  | Notes                                                                  |  |-------------|------------------------------|------------------------------------------------------------------------|  | 200         | OK                           | The request was successful.                                             |  | 201         | Created                      | The object was successfully created. This code is only used with objects that are created immediately.  | 400         | Bad Request                  | The request could not be understood by the server. Incoming parameters might not be valid. |  | 401         | Unauthorized            | The client is unauthenticated. The client must authenticate itself to get the requested response. |  | 403         | Forbidden                   | The client does not have access rights to the content.  | 404         | Not Found                    | The requested resource is not found.                                    |  | 409         | Conflict | This response is sent when a request conflicts with the current state of the object (e.g. deleting the security group with the compute instances in it).|  | 422         | Unprocessable Content   | The request was well-formed but was unable to be followed due to incorrect field values (e.g. creation of a virtual machine in the non-existent data center).  |  | 500         | Internal server Error                 | The server could not return the representation due to an internal server error. |

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emma

import (
	"encoding/json"
	"fmt"
)

// SpotActionsRequest - struct for SpotActionsRequest
type SpotActionsRequest struct {
	SpotReboot *SpotReboot
}

// SpotRebootAsSpotActionsRequest is a convenience function that returns SpotReboot wrapped in SpotActionsRequest
func SpotRebootAsSpotActionsRequest(v *SpotReboot) SpotActionsRequest {
	return SpotActionsRequest{
		SpotReboot: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SpotActionsRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SpotReboot
	err = newStrictDecoder(data).Decode(&dst.SpotReboot)
	if err == nil {
		jsonSpotReboot, _ := json.Marshal(dst.SpotReboot)
		if string(jsonSpotReboot) == "{}" { // empty struct
			dst.SpotReboot = nil
		} else {
			match++
		}
	} else {
		dst.SpotReboot = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SpotReboot = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SpotActionsRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SpotActionsRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SpotActionsRequest) MarshalJSON() ([]byte, error) {
	if src.SpotReboot != nil {
		return json.Marshal(&src.SpotReboot)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SpotActionsRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.SpotReboot != nil {
		return obj.SpotReboot
	}

	// all schemas are nil
	return nil
}

type NullableSpotActionsRequest struct {
	value *SpotActionsRequest
	isSet bool
}

func (v NullableSpotActionsRequest) Get() *SpotActionsRequest {
	return v.value
}

func (v *NullableSpotActionsRequest) Set(val *SpotActionsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSpotActionsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSpotActionsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpotActionsRequest(val *SpotActionsRequest) *NullableSpotActionsRequest {
	return &NullableSpotActionsRequest{value: val, isSet: true}
}

func (v NullableSpotActionsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpotActionsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
