/*
Public EMMA API

**Base URL:** *<u>https://api.emma.ms/external</u>*  This **Infrastructure API** is for managing the cloud infrastructure within a project.  To access the API, enter your project, navigate to **Settings** > **Service Apps**, and create a service application. Select the access level **Read**, **Operate**, or **Manage**.  After creating the service application, copy the **Client ID** and **Client Secret**. Send an API request to the endpoint **_/issue-token** as specified in the **Authentication** section of the API documentation. You will receive access and refresh tokens in the response.  The Bearer access token is a text string, included in the request header, example:  *-H Authorization: Bearer {token}*  Use this token for API requests. The access token will expire in 10 minutes. A new access token may be created using the refresh token (without Client ID and Client Secret).

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emma

import (
	"encoding/json"
	"fmt"
)

// SpotActionsRequest - struct for SpotActionsRequest
type SpotActionsRequest struct {
	SpotReboot *SpotReboot
}

// SpotRebootAsSpotActionsRequest is a convenience function that returns SpotReboot wrapped in SpotActionsRequest
func SpotRebootAsSpotActionsRequest(v *SpotReboot) SpotActionsRequest {
	return SpotActionsRequest{
		SpotReboot: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SpotActionsRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SpotReboot
	err = newStrictDecoder(data).Decode(&dst.SpotReboot)
	if err == nil {
		jsonSpotReboot, _ := json.Marshal(dst.SpotReboot)
		if string(jsonSpotReboot) == "{}" { // empty struct
			dst.SpotReboot = nil
		} else {
			match++
		}
	} else {
		dst.SpotReboot = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SpotReboot = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SpotActionsRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SpotActionsRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SpotActionsRequest) MarshalJSON() ([]byte, error) {
	if src.SpotReboot != nil {
		return json.Marshal(&src.SpotReboot)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SpotActionsRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.SpotReboot != nil {
		return obj.SpotReboot
	}

	// all schemas are nil
	return nil
}

type NullableSpotActionsRequest struct {
	value *SpotActionsRequest
	isSet bool
}

func (v NullableSpotActionsRequest) Get() *SpotActionsRequest {
	return v.value
}

func (v *NullableSpotActionsRequest) Set(val *SpotActionsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSpotActionsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSpotActionsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpotActionsRequest(val *SpotActionsRequest) *NullableSpotActionsRequest {
	return &NullableSpotActionsRequest{value: val, isSet: true}
}

func (v NullableSpotActionsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpotActionsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
