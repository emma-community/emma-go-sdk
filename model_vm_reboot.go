/*
Public EMMA API

This <b>Infrastructure</b> API is for managing the cloud infrastructure within a project.  To access the API, enter your project, navigate to <b>Settings</b> > <b>Service Apps</b>, and create a service application. Select the access level: <b>Read</b>, <b>Operate</b>, or <b>Manage</b>.  After creating the service application, copy the <b>Client ID</b> and <b>Client Secret</b>. Send an API request to the endpoint <b>/issue-token</b> as specified in the <b>Authentication</b> section of the API documentation. You will receive access and refresh tokens in the response.  The Bearer access token is a text string, included in the request header:  -H \"Authorization: Bearer {token}\"  Use this token for API requests.  The access token will expire in 5 minutes, after which it must be refreshed using the refresh token.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emma

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VmReboot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VmReboot{}

// VmReboot struct for VmReboot
type VmReboot struct {
	// Action with a virtual machine
	Action interface{} `json:"action"`
}

type _VmReboot VmReboot

// NewVmReboot instantiates a new VmReboot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmReboot(action interface{}) *VmReboot {
	this := VmReboot{}
	this.Action = action
	return &this
}

// NewVmRebootWithDefaults instantiates a new VmReboot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmRebootWithDefaults() *VmReboot {
	this := VmReboot{}
	return &this
}

// GetAction returns the Action field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *VmReboot) GetAction() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmReboot) GetActionOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *VmReboot) SetAction(v interface{}) {
	o.Action = v
}

func (o VmReboot) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VmReboot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Action != nil {
		toSerialize["action"] = o.Action
	}
	return toSerialize, nil
}

func (o *VmReboot) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVmReboot := _VmReboot{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVmReboot)

	if err != nil {
		return err
	}

	*o = VmReboot(varVmReboot)

	return err
}

type NullableVmReboot struct {
	value *VmReboot
	isSet bool
}

func (v NullableVmReboot) Get() *VmReboot {
	return v.value
}

func (v *NullableVmReboot) Set(val *VmReboot) {
	v.value = val
	v.isSet = true
}

func (v NullableVmReboot) IsSet() bool {
	return v.isSet
}

func (v *NullableVmReboot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmReboot(val *VmReboot) *NullableVmReboot {
	return &NullableVmReboot{value: val, isSet: true}
}

func (v NullableVmReboot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmReboot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
