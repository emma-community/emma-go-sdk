/*
Public EMMA API

This <b>Infrastructure</b> API is for managing the cloud infrastructure within a project.  To access the API, enter your project, navigate to <b>Settings</b> > <b>Service Apps</b>, and create a service application. Select the access level: <b>Read</b>, <b>Operate</b>, or <b>Manage</b>.  After creating the service application, copy the <b>Client ID</b> and <b>Client Secret</b>. Send an API request to the endpoint <b>/issue-token</b> as specified in the <b>Authentication</b> section of the API documentation. You will receive access and refresh tokens in the response.  The Bearer access token is a text string, included in the request header:  -H \"Authorization: Bearer {token}\"  Use this token for API requests.  The access token will expire in 5 minutes, after which it must be refreshed using the refresh token.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emma

import (
	"encoding/json"
)

// checks if the VmSecurityGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VmSecurityGroup{}

// VmSecurityGroup struct for VmSecurityGroup
type VmSecurityGroup struct {
	Id   interface{} `json:"id,omitempty"`
	Name interface{} `json:"name,omitempty"`
}

// NewVmSecurityGroup instantiates a new VmSecurityGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmSecurityGroup() *VmSecurityGroup {
	this := VmSecurityGroup{}
	return &this
}

// NewVmSecurityGroupWithDefaults instantiates a new VmSecurityGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmSecurityGroupWithDefaults() *VmSecurityGroup {
	this := VmSecurityGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmSecurityGroup) GetId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmSecurityGroup) GetIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return &o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VmSecurityGroup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given interface{} and assigns it to the Id field.
func (o *VmSecurityGroup) SetId(v interface{}) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmSecurityGroup) GetName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmSecurityGroup) GetNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return &o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VmSecurityGroup) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given interface{} and assigns it to the Name field.
func (o *VmSecurityGroup) SetName(v interface{}) {
	o.Name = v
}

func (o VmSecurityGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VmSecurityGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableVmSecurityGroup struct {
	value *VmSecurityGroup
	isSet bool
}

func (v NullableVmSecurityGroup) Get() *VmSecurityGroup {
	return v.value
}

func (v *NullableVmSecurityGroup) Set(val *VmSecurityGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableVmSecurityGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableVmSecurityGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmSecurityGroup(val *VmSecurityGroup) *NullableVmSecurityGroup {
	return &NullableVmSecurityGroup{value: val, isSet: true}
}

func (v NullableVmSecurityGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmSecurityGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
