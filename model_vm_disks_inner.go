/*
Public EMMA API

**Base URL:** *<u>https://api.emma.ms/external</u>*  This **Infrastructure API** is for managing the cloud infrastructure within a project.  To access the API, enter your project, navigate to **Settings** > **Service Apps**, and create a service application. Select the access level **Read**, **Operate**, or **Manage**.  After creating the service application, copy the **Client ID** and **Client Secret**. Send an API request to the endpoint **_/issue-token** as specified in the **Authentication** section of the API documentation. You will receive access and refresh tokens in the response.  The Bearer access token is a text string, included in the request header, example:  *-H Authorization: Bearer {token}*  Use this token for API requests. The access token will expire in 10 minutes. A new access token may be created using the refresh token (without Client ID and Client Secret).

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emma

import (
	"encoding/json"
)

// checks if the VmDisksInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VmDisksInner{}

// VmDisksInner struct for VmDisksInner
type VmDisksInner struct {
	Id         *int32  `json:"id,omitempty"`
	SizeGb     *int32  `json:"sizeGb,omitempty"`
	TypeId     *int32  `json:"typeId,omitempty"`
	Type       *string `json:"type,omitempty"`
	IsBootable *bool   `json:"isBootable,omitempty"`
}

// NewVmDisksInner instantiates a new VmDisksInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmDisksInner() *VmDisksInner {
	this := VmDisksInner{}
	return &this
}

// NewVmDisksInnerWithDefaults instantiates a new VmDisksInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmDisksInnerWithDefaults() *VmDisksInner {
	this := VmDisksInner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VmDisksInner) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmDisksInner) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VmDisksInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *VmDisksInner) SetId(v int32) {
	o.Id = &v
}

// GetSizeGb returns the SizeGb field value if set, zero value otherwise.
func (o *VmDisksInner) GetSizeGb() int32 {
	if o == nil || IsNil(o.SizeGb) {
		var ret int32
		return ret
	}
	return *o.SizeGb
}

// GetSizeGbOk returns a tuple with the SizeGb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmDisksInner) GetSizeGbOk() (*int32, bool) {
	if o == nil || IsNil(o.SizeGb) {
		return nil, false
	}
	return o.SizeGb, true
}

// HasSizeGb returns a boolean if a field has been set.
func (o *VmDisksInner) HasSizeGb() bool {
	if o != nil && !IsNil(o.SizeGb) {
		return true
	}

	return false
}

// SetSizeGb gets a reference to the given int32 and assigns it to the SizeGb field.
func (o *VmDisksInner) SetSizeGb(v int32) {
	o.SizeGb = &v
}

// GetTypeId returns the TypeId field value if set, zero value otherwise.
func (o *VmDisksInner) GetTypeId() int32 {
	if o == nil || IsNil(o.TypeId) {
		var ret int32
		return ret
	}
	return *o.TypeId
}

// GetTypeIdOk returns a tuple with the TypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmDisksInner) GetTypeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TypeId) {
		return nil, false
	}
	return o.TypeId, true
}

// HasTypeId returns a boolean if a field has been set.
func (o *VmDisksInner) HasTypeId() bool {
	if o != nil && !IsNil(o.TypeId) {
		return true
	}

	return false
}

// SetTypeId gets a reference to the given int32 and assigns it to the TypeId field.
func (o *VmDisksInner) SetTypeId(v int32) {
	o.TypeId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *VmDisksInner) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmDisksInner) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *VmDisksInner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *VmDisksInner) SetType(v string) {
	o.Type = &v
}

// GetIsBootable returns the IsBootable field value if set, zero value otherwise.
func (o *VmDisksInner) GetIsBootable() bool {
	if o == nil || IsNil(o.IsBootable) {
		var ret bool
		return ret
	}
	return *o.IsBootable
}

// GetIsBootableOk returns a tuple with the IsBootable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmDisksInner) GetIsBootableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBootable) {
		return nil, false
	}
	return o.IsBootable, true
}

// HasIsBootable returns a boolean if a field has been set.
func (o *VmDisksInner) HasIsBootable() bool {
	if o != nil && !IsNil(o.IsBootable) {
		return true
	}

	return false
}

// SetIsBootable gets a reference to the given bool and assigns it to the IsBootable field.
func (o *VmDisksInner) SetIsBootable(v bool) {
	o.IsBootable = &v
}

func (o VmDisksInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VmDisksInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.SizeGb) {
		toSerialize["sizeGb"] = o.SizeGb
	}
	if !IsNil(o.TypeId) {
		toSerialize["typeId"] = o.TypeId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.IsBootable) {
		toSerialize["isBootable"] = o.IsBootable
	}
	return toSerialize, nil
}

type NullableVmDisksInner struct {
	value *VmDisksInner
	isSet bool
}

func (v NullableVmDisksInner) Get() *VmDisksInner {
	return v.value
}

func (v *NullableVmDisksInner) Set(val *VmDisksInner) {
	v.value = val
	v.isSet = true
}

func (v NullableVmDisksInner) IsSet() bool {
	return v.isSet
}

func (v *NullableVmDisksInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmDisksInner(val *VmDisksInner) *NullableVmDisksInner {
	return &NullableVmDisksInner{value: val, isSet: true}
}

func (v NullableVmDisksInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmDisksInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
