/*
Public EMMA API

**Base URL:** *<u>https://api.emma.ms/external</u>*  This **Infrastructure API** is for managing the cloud infrastructure within a project.  To access the API, enter your project, navigate to **Settings** > **Service Apps**, and create a service application. Select the access level **Read**, **Operate**, or **Manage**.  After creating the service application, copy the **Client ID** and **Client Secret**. Send an API request to the endpoint **_/issue-token** as specified in the **Authentication** section of the API documentation. You will receive access and refresh tokens in the response.  The Bearer access token is a text string, included in the request header, example:  *-H Authorization: Bearer {token}*  Use this token for API requests. The access token will expire in 10 minutes. A new access token may be created using the refresh token (without Client ID and Client Secret).

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emma

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SecurityGroupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityGroupRequest{}

// SecurityGroupRequest struct for SecurityGroupRequest
type SecurityGroupRequest struct {
	// Name of the security group
	Name  string                     `json:"name"`
	Rules []SecurityGroupRuleRequest `json:"rules"`
}

type _SecurityGroupRequest SecurityGroupRequest

// NewSecurityGroupRequest instantiates a new SecurityGroupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityGroupRequest(name string, rules []SecurityGroupRuleRequest) *SecurityGroupRequest {
	this := SecurityGroupRequest{}
	this.Name = name
	this.Rules = rules
	return &this
}

// NewSecurityGroupRequestWithDefaults instantiates a new SecurityGroupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityGroupRequestWithDefaults() *SecurityGroupRequest {
	this := SecurityGroupRequest{}
	return &this
}

// GetName returns the Name field value
func (o *SecurityGroupRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SecurityGroupRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SecurityGroupRequest) SetName(v string) {
	o.Name = v
}

// GetRules returns the Rules field value
func (o *SecurityGroupRequest) GetRules() []SecurityGroupRuleRequest {
	if o == nil {
		var ret []SecurityGroupRuleRequest
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *SecurityGroupRequest) GetRulesOk() ([]SecurityGroupRuleRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rules, true
}

// SetRules sets field value
func (o *SecurityGroupRequest) SetRules(v []SecurityGroupRuleRequest) {
	o.Rules = v
}

func (o SecurityGroupRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityGroupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["rules"] = o.Rules
	return toSerialize, nil
}

func (o *SecurityGroupRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"rules",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSecurityGroupRequest := _SecurityGroupRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSecurityGroupRequest)

	if err != nil {
		return err
	}

	*o = SecurityGroupRequest(varSecurityGroupRequest)

	return err
}

type NullableSecurityGroupRequest struct {
	value *SecurityGroupRequest
	isSet bool
}

func (v NullableSecurityGroupRequest) Get() *SecurityGroupRequest {
	return v.value
}

func (v *NullableSecurityGroupRequest) Set(val *SecurityGroupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityGroupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityGroupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityGroupRequest(val *SecurityGroupRequest) *NullableSecurityGroupRequest {
	return &NullableSecurityGroupRequest{value: val, isSet: true}
}

func (v NullableSecurityGroupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityGroupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
