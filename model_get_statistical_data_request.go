/*
Public EMMA API

### About Infrastructure API  **Base URL:** **<u>https://api.emma.ms/external</u>**   This **Infrastructure API** is for managing the emma cloud infrastructure within a project. The API enables you to view, create, edit, and delete _Virtual machines, Spot instances, Applications, Kubernetes clusters, SSH keys, Security groups, and Backup policies_. For creating the resources you can use the endpoints with the dictionaries: _Data centers, Locations, Providers, Operating systems, Virtual machines configurations, Spot instances configurations, Kubernetes clusters configurations._   ### Authentication   #### 1. Create service application   To access the API, enter your project, navigate to **Settings** > **Service Apps**, and create a service application. Select the access level **Read**, **Operate**, or **Manage**.   - **Read** - only GET methods are allowed in the API.   - **Operate** - some operations are allowed with the resources (e.g. _Start, Reboot,_ and _Shutdown_ of the Virtual machines).   - **Manage** - full creating, updating, and deleting of the resources is allowed.    #### 2. Get access token   - Copy the **Client ID** and **Client Secret** in the service application.  - Send an API request to the endpoint **_/issue-token** as specified in the **Authentication** section of the API documentation. You will receive access and refresh tokens in the response.   _For Linux / Mac:_  ```  curl -X POST https://api.emma.ms/external/v1/issue-token \\  -H \"Content-Type: application/json\" \\  -d '{\"clientId\": \"YOUR-CLIENT-ID\", \"clientSecret\": \"YOUR-CLIENT-SECRET\"}'  ```  _For Windows:_  ```  curl -X POST https://api.emma.ms/external/v1/issue-token ^  -H \"Content-Type: application/json\" ^  -d \"{\\\"clientId\\\": \\\"YOUR-CLIENT-ID\\\", \\\"clientSecret\\\": \\\"YOUR-CLIENT-SECRET\\\"}\"  ```   #### 3. Use access token in requests  The Bearer access token is a text string, included in the request header, for example:   _For Linux / Mac:_  ```  curl -X GET https://api.emma.ms/external/v1/locations -H \"Authorization: Bearer YOUR-ACCESS-TOKEN-HERE\"  ```   Use this token for the API requests.    #### 4. Refresh token  The access token will expire in 10 minutes. A new access token may be created using the refresh token (without Client ID and Client Secret).   To get a new access token send a request to the **_/refresh-token** endpoint:    _For Linux / Mac:_  ```  curl -X POST https://api.emma.ms/external/v1/refresh-token \\  -H \"Content-Type: application/json\" \\  -d '{\"refreshToken\": \"YOUR-REFRESH-TOKEN\"}'  ```       ### Possible response status codes   We use standard HTTP response codes to show the success or failure of requests.   `2xx` - successful responses.   `4xx` - client error responses (the response contains an explanation of the error).   `5xx` - server error responses.   The API uses the following status codes:   | Status Code | Description                  | Notes                                                                  |  |-------------|------------------------------|------------------------------------------------------------------------|  | 200         | OK                           | The request was successful.                                             |  | 201         | Created                      | The object was successfully created. This code is only used with objects that are created immediately.  | 204         | No content                   | A successful request, but there is no additional information to send back in the response body (in a case when the object was deleted).    | 400         | Bad Request                  | The request could not be understood by the server. Incoming parameters might not be valid. |  | 401         | Unauthorized            | The client is unauthenticated. The client must authenticate itself to get the requested response. |  | 403         | Forbidden                   | The client does not have access rights to the content.  | 404         | Not Found                    | The requested resource is not found.                                    |  | 409         | Conflict | This response is sent when a request conflicts with the current state of the object (e.g. deleting the security group with the compute instances in it).|  | 422         | Unprocessable Content   | The request was well-formed but was unable to be followed due to incorrect field values (e.g. creation of a virtual machine in the non-existent data center).  |  | 500         | Internal server Error                 | The server could not return the representation due to an internal server error. | 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emma

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// GetStatisticalDataRequest - struct for GetStatisticalDataRequest
type GetStatisticalDataRequest struct {
	ExpenseHistoryQuery *ExpenseHistoryQuery
	KubernetesClusterChangingMetricsQuery *KubernetesClusterChangingMetricsQuery
	KubernetesClusterCurrentStateQuery *KubernetesClusterCurrentStateQuery
	KubernetesClusterMetricsQuery *KubernetesClusterMetricsQuery
	KubernetesClusterObjectStatesQuery *KubernetesClusterObjectStatesQuery
	KubernetesClusterObjectsQuery *KubernetesClusterObjectsQuery
	ProductStatisticsQuery *ProductStatisticsQuery
	ProjectSummaryQuery *ProjectSummaryQuery
	ResourceAnalysisQuery *ResourceAnalysisQuery
	VmAnalyticsQuery *VmAnalyticsQuery
	VmMonitoringQuery *VmMonitoringQuery
}

// ExpenseHistoryQueryAsGetStatisticalDataRequest is a convenience function that returns ExpenseHistoryQuery wrapped in GetStatisticalDataRequest
func ExpenseHistoryQueryAsGetStatisticalDataRequest(v *ExpenseHistoryQuery) GetStatisticalDataRequest {
	return GetStatisticalDataRequest{
		ExpenseHistoryQuery: v,
	}
}

// KubernetesClusterChangingMetricsQueryAsGetStatisticalDataRequest is a convenience function that returns KubernetesClusterChangingMetricsQuery wrapped in GetStatisticalDataRequest
func KubernetesClusterChangingMetricsQueryAsGetStatisticalDataRequest(v *KubernetesClusterChangingMetricsQuery) GetStatisticalDataRequest {
	return GetStatisticalDataRequest{
		KubernetesClusterChangingMetricsQuery: v,
	}
}

// KubernetesClusterCurrentStateQueryAsGetStatisticalDataRequest is a convenience function that returns KubernetesClusterCurrentStateQuery wrapped in GetStatisticalDataRequest
func KubernetesClusterCurrentStateQueryAsGetStatisticalDataRequest(v *KubernetesClusterCurrentStateQuery) GetStatisticalDataRequest {
	return GetStatisticalDataRequest{
		KubernetesClusterCurrentStateQuery: v,
	}
}

// KubernetesClusterMetricsQueryAsGetStatisticalDataRequest is a convenience function that returns KubernetesClusterMetricsQuery wrapped in GetStatisticalDataRequest
func KubernetesClusterMetricsQueryAsGetStatisticalDataRequest(v *KubernetesClusterMetricsQuery) GetStatisticalDataRequest {
	return GetStatisticalDataRequest{
		KubernetesClusterMetricsQuery: v,
	}
}

// KubernetesClusterObjectStatesQueryAsGetStatisticalDataRequest is a convenience function that returns KubernetesClusterObjectStatesQuery wrapped in GetStatisticalDataRequest
func KubernetesClusterObjectStatesQueryAsGetStatisticalDataRequest(v *KubernetesClusterObjectStatesQuery) GetStatisticalDataRequest {
	return GetStatisticalDataRequest{
		KubernetesClusterObjectStatesQuery: v,
	}
}

// KubernetesClusterObjectsQueryAsGetStatisticalDataRequest is a convenience function that returns KubernetesClusterObjectsQuery wrapped in GetStatisticalDataRequest
func KubernetesClusterObjectsQueryAsGetStatisticalDataRequest(v *KubernetesClusterObjectsQuery) GetStatisticalDataRequest {
	return GetStatisticalDataRequest{
		KubernetesClusterObjectsQuery: v,
	}
}

// ProductStatisticsQueryAsGetStatisticalDataRequest is a convenience function that returns ProductStatisticsQuery wrapped in GetStatisticalDataRequest
func ProductStatisticsQueryAsGetStatisticalDataRequest(v *ProductStatisticsQuery) GetStatisticalDataRequest {
	return GetStatisticalDataRequest{
		ProductStatisticsQuery: v,
	}
}

// ProjectSummaryQueryAsGetStatisticalDataRequest is a convenience function that returns ProjectSummaryQuery wrapped in GetStatisticalDataRequest
func ProjectSummaryQueryAsGetStatisticalDataRequest(v *ProjectSummaryQuery) GetStatisticalDataRequest {
	return GetStatisticalDataRequest{
		ProjectSummaryQuery: v,
	}
}

// ResourceAnalysisQueryAsGetStatisticalDataRequest is a convenience function that returns ResourceAnalysisQuery wrapped in GetStatisticalDataRequest
func ResourceAnalysisQueryAsGetStatisticalDataRequest(v *ResourceAnalysisQuery) GetStatisticalDataRequest {
	return GetStatisticalDataRequest{
		ResourceAnalysisQuery: v,
	}
}

// VmAnalyticsQueryAsGetStatisticalDataRequest is a convenience function that returns VmAnalyticsQuery wrapped in GetStatisticalDataRequest
func VmAnalyticsQueryAsGetStatisticalDataRequest(v *VmAnalyticsQuery) GetStatisticalDataRequest {
	return GetStatisticalDataRequest{
		VmAnalyticsQuery: v,
	}
}

// VmMonitoringQueryAsGetStatisticalDataRequest is a convenience function that returns VmMonitoringQuery wrapped in GetStatisticalDataRequest
func VmMonitoringQueryAsGetStatisticalDataRequest(v *VmMonitoringQuery) GetStatisticalDataRequest {
	return GetStatisticalDataRequest{
		VmMonitoringQuery: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetStatisticalDataRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ExpenseHistoryQuery
	err = newStrictDecoder(data).Decode(&dst.ExpenseHistoryQuery)
	if err == nil {
		jsonExpenseHistoryQuery, _ := json.Marshal(dst.ExpenseHistoryQuery)
		if string(jsonExpenseHistoryQuery) == "{}" { // empty struct
			dst.ExpenseHistoryQuery = nil
		} else {
			if err = validator.Validate(dst.ExpenseHistoryQuery); err != nil {
				dst.ExpenseHistoryQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.ExpenseHistoryQuery = nil
	}

	// try to unmarshal data into KubernetesClusterChangingMetricsQuery
	err = newStrictDecoder(data).Decode(&dst.KubernetesClusterChangingMetricsQuery)
	if err == nil {
		jsonKubernetesClusterChangingMetricsQuery, _ := json.Marshal(dst.KubernetesClusterChangingMetricsQuery)
		if string(jsonKubernetesClusterChangingMetricsQuery) == "{}" { // empty struct
			dst.KubernetesClusterChangingMetricsQuery = nil
		} else {
			if err = validator.Validate(dst.KubernetesClusterChangingMetricsQuery); err != nil {
				dst.KubernetesClusterChangingMetricsQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.KubernetesClusterChangingMetricsQuery = nil
	}

	// try to unmarshal data into KubernetesClusterCurrentStateQuery
	err = newStrictDecoder(data).Decode(&dst.KubernetesClusterCurrentStateQuery)
	if err == nil {
		jsonKubernetesClusterCurrentStateQuery, _ := json.Marshal(dst.KubernetesClusterCurrentStateQuery)
		if string(jsonKubernetesClusterCurrentStateQuery) == "{}" { // empty struct
			dst.KubernetesClusterCurrentStateQuery = nil
		} else {
			if err = validator.Validate(dst.KubernetesClusterCurrentStateQuery); err != nil {
				dst.KubernetesClusterCurrentStateQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.KubernetesClusterCurrentStateQuery = nil
	}

	// try to unmarshal data into KubernetesClusterMetricsQuery
	err = newStrictDecoder(data).Decode(&dst.KubernetesClusterMetricsQuery)
	if err == nil {
		jsonKubernetesClusterMetricsQuery, _ := json.Marshal(dst.KubernetesClusterMetricsQuery)
		if string(jsonKubernetesClusterMetricsQuery) == "{}" { // empty struct
			dst.KubernetesClusterMetricsQuery = nil
		} else {
			if err = validator.Validate(dst.KubernetesClusterMetricsQuery); err != nil {
				dst.KubernetesClusterMetricsQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.KubernetesClusterMetricsQuery = nil
	}

	// try to unmarshal data into KubernetesClusterObjectStatesQuery
	err = newStrictDecoder(data).Decode(&dst.KubernetesClusterObjectStatesQuery)
	if err == nil {
		jsonKubernetesClusterObjectStatesQuery, _ := json.Marshal(dst.KubernetesClusterObjectStatesQuery)
		if string(jsonKubernetesClusterObjectStatesQuery) == "{}" { // empty struct
			dst.KubernetesClusterObjectStatesQuery = nil
		} else {
			if err = validator.Validate(dst.KubernetesClusterObjectStatesQuery); err != nil {
				dst.KubernetesClusterObjectStatesQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.KubernetesClusterObjectStatesQuery = nil
	}

	// try to unmarshal data into KubernetesClusterObjectsQuery
	err = newStrictDecoder(data).Decode(&dst.KubernetesClusterObjectsQuery)
	if err == nil {
		jsonKubernetesClusterObjectsQuery, _ := json.Marshal(dst.KubernetesClusterObjectsQuery)
		if string(jsonKubernetesClusterObjectsQuery) == "{}" { // empty struct
			dst.KubernetesClusterObjectsQuery = nil
		} else {
			if err = validator.Validate(dst.KubernetesClusterObjectsQuery); err != nil {
				dst.KubernetesClusterObjectsQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.KubernetesClusterObjectsQuery = nil
	}

	// try to unmarshal data into ProductStatisticsQuery
	err = newStrictDecoder(data).Decode(&dst.ProductStatisticsQuery)
	if err == nil {
		jsonProductStatisticsQuery, _ := json.Marshal(dst.ProductStatisticsQuery)
		if string(jsonProductStatisticsQuery) == "{}" { // empty struct
			dst.ProductStatisticsQuery = nil
		} else {
			if err = validator.Validate(dst.ProductStatisticsQuery); err != nil {
				dst.ProductStatisticsQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.ProductStatisticsQuery = nil
	}

	// try to unmarshal data into ProjectSummaryQuery
	err = newStrictDecoder(data).Decode(&dst.ProjectSummaryQuery)
	if err == nil {
		jsonProjectSummaryQuery, _ := json.Marshal(dst.ProjectSummaryQuery)
		if string(jsonProjectSummaryQuery) == "{}" { // empty struct
			dst.ProjectSummaryQuery = nil
		} else {
			if err = validator.Validate(dst.ProjectSummaryQuery); err != nil {
				dst.ProjectSummaryQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.ProjectSummaryQuery = nil
	}

	// try to unmarshal data into ResourceAnalysisQuery
	err = newStrictDecoder(data).Decode(&dst.ResourceAnalysisQuery)
	if err == nil {
		jsonResourceAnalysisQuery, _ := json.Marshal(dst.ResourceAnalysisQuery)
		if string(jsonResourceAnalysisQuery) == "{}" { // empty struct
			dst.ResourceAnalysisQuery = nil
		} else {
			if err = validator.Validate(dst.ResourceAnalysisQuery); err != nil {
				dst.ResourceAnalysisQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.ResourceAnalysisQuery = nil
	}

	// try to unmarshal data into VmAnalyticsQuery
	err = newStrictDecoder(data).Decode(&dst.VmAnalyticsQuery)
	if err == nil {
		jsonVmAnalyticsQuery, _ := json.Marshal(dst.VmAnalyticsQuery)
		if string(jsonVmAnalyticsQuery) == "{}" { // empty struct
			dst.VmAnalyticsQuery = nil
		} else {
			if err = validator.Validate(dst.VmAnalyticsQuery); err != nil {
				dst.VmAnalyticsQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.VmAnalyticsQuery = nil
	}

	// try to unmarshal data into VmMonitoringQuery
	err = newStrictDecoder(data).Decode(&dst.VmMonitoringQuery)
	if err == nil {
		jsonVmMonitoringQuery, _ := json.Marshal(dst.VmMonitoringQuery)
		if string(jsonVmMonitoringQuery) == "{}" { // empty struct
			dst.VmMonitoringQuery = nil
		} else {
			if err = validator.Validate(dst.VmMonitoringQuery); err != nil {
				dst.VmMonitoringQuery = nil
			} else {
				match++
			}
		}
	} else {
		dst.VmMonitoringQuery = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ExpenseHistoryQuery = nil
		dst.KubernetesClusterChangingMetricsQuery = nil
		dst.KubernetesClusterCurrentStateQuery = nil
		dst.KubernetesClusterMetricsQuery = nil
		dst.KubernetesClusterObjectStatesQuery = nil
		dst.KubernetesClusterObjectsQuery = nil
		dst.ProductStatisticsQuery = nil
		dst.ProjectSummaryQuery = nil
		dst.ResourceAnalysisQuery = nil
		dst.VmAnalyticsQuery = nil
		dst.VmMonitoringQuery = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetStatisticalDataRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetStatisticalDataRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetStatisticalDataRequest) MarshalJSON() ([]byte, error) {
	if src.ExpenseHistoryQuery != nil {
		return json.Marshal(&src.ExpenseHistoryQuery)
	}

	if src.KubernetesClusterChangingMetricsQuery != nil {
		return json.Marshal(&src.KubernetesClusterChangingMetricsQuery)
	}

	if src.KubernetesClusterCurrentStateQuery != nil {
		return json.Marshal(&src.KubernetesClusterCurrentStateQuery)
	}

	if src.KubernetesClusterMetricsQuery != nil {
		return json.Marshal(&src.KubernetesClusterMetricsQuery)
	}

	if src.KubernetesClusterObjectStatesQuery != nil {
		return json.Marshal(&src.KubernetesClusterObjectStatesQuery)
	}

	if src.KubernetesClusterObjectsQuery != nil {
		return json.Marshal(&src.KubernetesClusterObjectsQuery)
	}

	if src.ProductStatisticsQuery != nil {
		return json.Marshal(&src.ProductStatisticsQuery)
	}

	if src.ProjectSummaryQuery != nil {
		return json.Marshal(&src.ProjectSummaryQuery)
	}

	if src.ResourceAnalysisQuery != nil {
		return json.Marshal(&src.ResourceAnalysisQuery)
	}

	if src.VmAnalyticsQuery != nil {
		return json.Marshal(&src.VmAnalyticsQuery)
	}

	if src.VmMonitoringQuery != nil {
		return json.Marshal(&src.VmMonitoringQuery)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetStatisticalDataRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ExpenseHistoryQuery != nil {
		return obj.ExpenseHistoryQuery
	}

	if obj.KubernetesClusterChangingMetricsQuery != nil {
		return obj.KubernetesClusterChangingMetricsQuery
	}

	if obj.KubernetesClusterCurrentStateQuery != nil {
		return obj.KubernetesClusterCurrentStateQuery
	}

	if obj.KubernetesClusterMetricsQuery != nil {
		return obj.KubernetesClusterMetricsQuery
	}

	if obj.KubernetesClusterObjectStatesQuery != nil {
		return obj.KubernetesClusterObjectStatesQuery
	}

	if obj.KubernetesClusterObjectsQuery != nil {
		return obj.KubernetesClusterObjectsQuery
	}

	if obj.ProductStatisticsQuery != nil {
		return obj.ProductStatisticsQuery
	}

	if obj.ProjectSummaryQuery != nil {
		return obj.ProjectSummaryQuery
	}

	if obj.ResourceAnalysisQuery != nil {
		return obj.ResourceAnalysisQuery
	}

	if obj.VmAnalyticsQuery != nil {
		return obj.VmAnalyticsQuery
	}

	if obj.VmMonitoringQuery != nil {
		return obj.VmMonitoringQuery
	}

	// all schemas are nil
	return nil
}

type NullableGetStatisticalDataRequest struct {
	value *GetStatisticalDataRequest
	isSet bool
}

func (v NullableGetStatisticalDataRequest) Get() *GetStatisticalDataRequest {
	return v.value
}

func (v *NullableGetStatisticalDataRequest) Set(val *GetStatisticalDataRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGetStatisticalDataRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGetStatisticalDataRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetStatisticalDataRequest(val *GetStatisticalDataRequest) *NullableGetStatisticalDataRequest {
	return &NullableGetStatisticalDataRequest{value: val, isSet: true}
}

func (v NullableGetStatisticalDataRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetStatisticalDataRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


