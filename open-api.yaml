openapi: 3.1.0
info:
  title: Public EMMA API
  description: >
    This <b>Infrastructure</b> API is for managing the cloud infrastructure within a project.


    To access the API, enter your project, navigate to <b>Settings</b> > <b>Service Apps</b>, and create a service application. Select the access level: <b>Read</b>, <b>Operate</b>, or <b>Manage</b>.


    After creating the service application, copy the <b>Client ID</b> and <b>Client Secret</b>. Send an API request to the endpoint <b>/issue-token</b> as specified in the <b>Authentication</b> section of the API documentation. You will receive access and refresh tokens in the response.


    The Bearer access token is a text string, included in the request header:


    -H "Authorization: Bearer {token}"


    Use this token for API requests.


    The access token will expire in 5 minutes, after which it must be refreshed using the refresh token.
  version: 0.0.1

servers:
  - description: Public EMMA API
    url: https://api.emma.ms/external

tags:

  - name: Authentication
    description: Authentication operations
  - name: Data centers
    description: Viewing data centers
  - name: Locations
    description: Viewing locations
  - name: Operating systems
    description:  Viewing operating Systems
  - name: Providers
    description: Viewing providers
  - name: SSH keys
    description: SSH keys operations
  - name: Virtual machines
    description: Virtual machines operations
  - name: Compute instances configurations
    description: Viewing configurations of virtual machines and spot instances


paths:

  # Authentication

  /v1/issue-token:
    post:
      tags:
        - Authentication
      summary: Issue token
      operationId: issueToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'

  /v1/refresh-token:
    post:
      tags:
        - Authentication
      summary: Refresh token
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'

  #Data centers

  /v1/data-centers:
    get:
      security:
        - bearerAuth: []
      tags:
        - Data centers
      summary: Get list of data centers
      operationId: GetDataCenters
      parameters:
        - $ref: '#/components/parameters/dataCenterName'
        - $ref: '#/components/parameters/locationIdQuery'
        - $ref: '#/components/parameters/providerName'

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataCenter'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'


  /v1/data-centers/{dataCenterId}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Data centers
      summary: Get data center by ID
      operationId: GetDataCenter
      parameters:
        - $ref: '#/components/parameters/dataCenterId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataCenter'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'



  # Locations

  /v1/locations:
    get:
      security:
        - bearerAuth: []
      tags:
        - Locations
      summary: Get list of locations
      operationId: GetLocations
      parameters:
        - $ref: '#/components/parameters/locationName'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

  /v1/locations/{locationId}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Locations
      summary: Get location by ID
      operationId: GetLocation
      parameters:
        - $ref: '#/components/parameters/locationId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'


  #Operating systems

  /v1/operating-systems:
    get:
      security:
        - bearerAuth: []
      tags:
        - Operating systems
      summary: Get list of operating systems
      operationId: GetOperatingSystems
      parameters:
        - $ref: '#/components/parameters/osType'
        - $ref: '#/components/parameters/osArchitecture'
        - $ref: '#/components/parameters/osVersion'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OperatingSystem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
  /v1/operating-systems/{operatingSystemId}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Operating systems
      summary: Get operating system by ID
      operationId: GetOperatingSystem
      parameters:
        - $ref: '#/components/parameters/operatingSystemId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatingSystem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  #Providers

  /v1/providers:
    get:
      security:
        - bearerAuth: []
      tags:
        - Providers
      summary: Get list of cloud providers
      operationId: GetProviders
      parameters:
        - $ref: '#/components/parameters/providerName'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Provider'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

  /v1/providers/{providerId}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Providers
      summary: Get cloud provider by ID
      operationId: GetProvider
      parameters:
        - $ref: '#/components/parameters/providerId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Provider'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  #SSH-KEYS

  /v1/ssh-keys:
    get:
      security:
        - bearerAuth: []
      tags:
        - SSH keys
      summary: Get list of SSH keys
      operationId: SshKeys
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SshKey'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
    post:
      security:
        - bearerAuth: []
      tags:
        - SSH keys
      summary: Create or import SSH key
      operationId: SshKeysCreateImport
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/SshKeyCreate'
                - $ref: '#/components/schemas/SshKeyImport'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/SshKey'
                  - $ref: '#/components/schemas/SshKeyGenerated'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden - Access is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

  /v1/ssh-keys/{sshKeyId}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - SSH keys
      summary: Get SSH key by id
      operationId: GetSshKey
      parameters:
        - $ref: '#/components/parameters/sshKeyId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SshKey'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    delete:
      security:
        - bearerAuth: [ ]
      tags:
        - SSH keys
      summary: Delete SSH keys
      operationId: SshKeyDelete
      parameters:
        - $ref: '#/components/parameters/sshKeyId'
      responses:
        '204':
          description: Successful operation
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - SSH keys
      summary: Update SSH keys
      operationId: SshKeyUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SshKeyUpdate'
      parameters:
        - $ref: '#/components/parameters/sshKeyId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SshKey'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  #VMs


  /v1/vms:
    get:
      security:
        - bearerAuth: []
      tags:
        - Virtual machines
      summary: Get list of virtual machines
      operationId: GetVms
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vm'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden - Access is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
    post:
      security:
        - bearerAuth: []
      tags:
        - Virtual machines
      summary: Create virtual machine
      operationId: VmCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VmCreate'
      responses:
        '200':
          description: Virtual machine created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vm'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden - Access is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'

  /v1/vms/{vmId}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Virtual machines
      summary: Get virtual machine by id
      operationId: GetVm
      parameters:
        - $ref: '#/components/parameters/vmId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vm'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden - Access is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
    delete:
      security:
        - bearerAuth: []
      tags:
        - Virtual machines
      summary: Delete virtual machine
      operationId: VmDelete
      parameters:
        - $ref: '#/components/parameters/vmId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vm'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden - Access is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  /v1/vms/{vmId}/actions:
    post:
      security:
        - bearerAuth: []
      tags:
        - Virtual machines
      summary: Perform actions with a virtual machine
      operationId: VmActions
      parameters:
        - $ref: '#/components/parameters/vmId'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/VmStart'
                - $ref: '#/components/schemas/VmShutdown'
                - $ref: '#/components/schemas/VmReboot'
                - $ref: '#/components/schemas/VmTransfer'
                - $ref: '#/components/schemas/VmClone'
                - $ref: '#/components/schemas/VmEditHardware'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Vm'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden - Access is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'

  #VM configurations

  /v1/vms-configs:
    get:
      security:
        - bearerAuth: []
      tags:
        - Compute instances configurations
      summary: Search available configurations for virtual machine creation
      operationId: GetVmConfigs
      parameters:
        - $ref: '#/components/parameters/providerIdQuery'
        - $ref: '#/components/parameters/locationIdQuery'
        - $ref: '#/components/parameters/dataCenterIdQuery'
        - $ref: '#/components/parameters/cloudNetworkType'
        - $ref: '#/components/parameters/vCpuType'
        - $ref: '#/components/parameters/vCpu'
        - $ref: '#/components/parameters/vCpuMin'
        - $ref: '#/components/parameters/vCpuMax'
        - $ref: '#/components/parameters/ramGb'
        - $ref: '#/components/parameters/ramGbMin'
        - $ref: '#/components/parameters/ramGbMax'
        - $ref: '#/components/parameters/volumeGb'
        - $ref: '#/components/parameters/volumeGbMin'
        - $ref: '#/components/parameters/volumeGbMax'
        - $ref: '#/components/parameters/volumeType'
        - $ref: '#/components/parameters/priceMin'
        - $ref: '#/components/parameters/priceMax'
        - $ref: '#/components/parameters/pageQuery'
        - $ref: '#/components/parameters/sizeQuery'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResult"
                  - type: object
                    properties:
                      content:
                        type: array
                        items:
                          $ref: '#/components/schemas/VmConfiguration'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden - Access is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'


  /v1/spots-configs:
    get:
      security:
        - bearerAuth: []
      tags:
        - Compute instances configurations
      summary: Search available configurations for spot instance creation
      operationId: GetSpotConfigs
      parameters:
        - $ref: '#/components/parameters/providerIdQuery'
        - $ref: '#/components/parameters/locationIdQuery'
        - $ref: '#/components/parameters/dataCenterIdQuery'
        - $ref: '#/components/parameters/cloudNetworkType'
        - $ref: '#/components/parameters/vCpuType'
        - $ref: '#/components/parameters/vCpu'
        - $ref: '#/components/parameters/vCpuMin'
        - $ref: '#/components/parameters/vCpuMax'
        - $ref: '#/components/parameters/ramGb'
        - $ref: '#/components/parameters/ramGbMin'
        - $ref: '#/components/parameters/ramGbMax'
        - $ref: '#/components/parameters/volumeGb'
        - $ref: '#/components/parameters/volumeGbMin'
        - $ref: '#/components/parameters/volumeGbMax'
        - $ref: '#/components/parameters/volumeType'
        - $ref: '#/components/parameters/priceMin'
        - $ref: '#/components/parameters/priceMax'
        - $ref: '#/components/parameters/pageQuery'
        - $ref: '#/components/parameters/sizeQuery'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResult"
                  - type: object
                    properties:
                      content:
                        type: array
                        items:
                          $ref: '#/components/schemas/VmConfiguration'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '403':
          description: Forbidden - Access is denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'




components:

  parameters:
    applicationId:
      name: applicationId
      in: path
      description: Application ID
      required: true
      schema:
        type: integer

    cloudNetworkType:
      name: cloudNetworkType
      in: query
      description: Cloud network type
      schema:
        type: string
        enum:
          - isolated
          - multi-cloud
          - default
        example: multi-cloud

    estoreAppId:
      name: estoreAppId
      in: path
      description: ID of an application available for set up
      required: true
      schema:
        type: integer


    backupId:
      name: backupId
      in: path
      description: Backup ID
      required: true
      schema:
        type: integer

    backupPolicyId:
      name: backupPolicyId
      in: path
      description: Backup policy ID
      required: true
      schema:
        type: integer

    dataCenterId:
      name: dataCenterId
      in: path
      description: Data center ID
      required: true
      schema:
        type: string
        example: "aws-us-west-1"

    dataCenterName:
      name: dataCenterName
      in: query
      description: Data center name
      required: false
      schema:
        type: string
        example: eu-north-1

    dataCenterIdQuery:
      name: dataCenterId
      in: query
      description: Data center ID
      schema:
        type: string
        example: "aws-us-west-1"

    instanceId:
      name: instanceId
      in: path
      description: Instance ID in backup policy
      required: true
      schema:
        type: integer

    kClusterId:
      name: kClusterId
      in: path
      description: Kubernetes cluster ID
      required: true
      schema:
        type: integer

    locationId:
      name: locationId
      in: path
      description: Location ID
      required: true
      schema:
        type: integer

    locationName:
      name: name
      in: query
      description: Location name
      required: false
      schema:
        type: string
        example: Stockholm

    locationIdQuery:
      name: locationId
      in: query
      description: Location ID
      schema:
        type: integer
        example: 6

    nodeId:
      name: nodeId
      in: path
      description: ID of an instance (node)
      required: true
      schema:
        type: integer

    operatingSystemId:
      name: operatingSystemId
      in: path
      description: Operating system ID
      required: true
      schema:
        type: integer

    osType:
      name: type
      in: query
      description: Operating system type
      schema:
        type: string
        example: Ubuntu

    osArchitecture:
      name: architecture
      in: query
      description: Operating system architecture
      schema:
        type: string
        example: x86-64

    osVersion:
      name: version
      in: query
      description: Operating system version
      schema:
        type: string
        example: 18.04

    pageQuery:
      name: page
      in: query
      description: Page number
      schema:
        type: integer
        example: 0

    priceMin:
      name: priceMin
      in: query
      description: Instance price minimum
      schema:
        type: number

    priceMax:
      name: priceMax
      in: query
      description: Instance price maximum
      schema:
        type: number

    projectId:
      name: projectId
      in: path
      description: Project ID
      required: true
      schema:
        type: integer

    providerId:
      name: providerId
      in: path
      description: Provider ID
      required: true
      schema:
        type: integer

    providerIdQuery:
      name: providerId
      in: query
      description: Provider ID
      schema:
        type: integer
        example: 5

    providerName:
      name: providerName
      in: query
      description: Provider name
      required: false
      schema:
        type: string
        example: GCP

    ramGb:
      name: ramGb
      in: query
      description: Compute instance RAM (GB)
      schema:
        type: integer
        example: 16

    ramGbMin:
      name: ramGbMin
      in: query
      description: Compute instance RAM (GB) minimum
      schema:
        type: integer
        example: 8

    ramGbMax:
      name: ramGbMax
      in: query
      description: Compute instance RAM (GB) maximum
      schema:
        type: integer
        example: 32

    reservedIpId:
      name: reservedIpId
      in: path
      description: Reserved IP id
      required: true
      schema:
        type: integer

    securityGroupId:
      name: securityGroupId
      in: path
      description: Security group id
      required: true
      schema:
        type: integer

    securityGroupRuleId:
      name: securityGroupRuleId
      in: path
      description: Security group rule id
      required: true
      schema:
        type: integer

    sizeQuery:
      name: size
      in: query
      description: Query size
      schema:
        type: integer
        example: 100

    spotInstanceId:
      name: spotInstanceId
      in: path
      description: Spot instance id
      required: true
      schema:
        type: integer

    sshKeyId:
      name: sshKeyId
      in: path
      description: SSH key ID
      required: true
      schema:
        type: integer

    vCpu:
      name: vCpu
      in: query
      description: Compute instance vCPU
      schema:
        type: integer
        example: 4

    vCpuMin:
      name: vCpuMin
      in: query
      description: Compute instance vCPU minimum
      schema:
        type: integer
        example: 1

    vCpuMax:
      name: vCpuMax
      in: query
      description: Compute instance vCPU maximum
      schema:
        type: integer
        example: 8

    vCpuType:
      name: vCpuType
      in: query
      description: Compute instance vCPU type
      schema:
        type: string
        example: Standard
        enum:
          - shared
          - standard
          - hpc

    vmId:
      name: vmId
      in: path
      description: Virtual machine ID
      required: true
      schema:
        type: integer

    vmHardwareConfig:
      name: vmHardwareConfig
      in: query
      description: Virtual machine hardware configuration ID
      schema:
        type: integer

    volumeGb:
      name: volumeGb
      in: query
      description: Compute instance volume (GB)
      schema:
        type: integer
        example: 500

    volumeGbMin:
      name: volumeGbMin
      in: query
      description: Compute instance volume minimum (GB)
      schema:
        type: integer
        example: 250

    volumeGbMax:
      name: volumeGbMax
      in: query
      description: Compute instance volume maximun (GB)
      schema:
        type: integer
        example: 1000

    volumeType:
      name: volumeType
      in: query
      description: Compute instance volume type
      schema:
        type: string
        example: ssd
        enum:
          - ssd
          - ssd-plus


  schemas:


    Credentials:
      type: object
      properties:
        clientId:
          type: string
          example: "ad6f8c5c-223f-4102-8664-8044b84864e2"
        clientSecret:
          type: string
          example: "e0eb8a09-b7fe-4acc-a72b-79ce0dd26068"
      required:
        - clientId
        - clientSecret

    DataCenter:
      type: object
      properties:
        id:
          type: string
          example: aws-us-west-1
        name:
          type: string
          example: eu-north-1
        providerId:
          type: integer
          example: 5
        providerName:
          type: string
          example: AWS
        locationId:
          type: integer
          example: 15
        locationName:
          type: string
          example: Stockholm


    Location:
      type: object
      properties:
        id:
          type: integer
          example: 18
        name:
          type: string
          example: London


    OperatingSystem:
      type: object
      properties:
        id:
          type: integer
          example: 18
        family:
          type: string
          example: Linux
        type:
          type: string
          example: Ubuntu
        architecture:
          type: string
          example: x86-64
        version:
          type: string
          example: 18.04

    Provider:
      type: object
      properties:
        id:
          type: integer
          example: 5
        name:
          type: string
          example: GCP


    RefreshToken:
      type: object
      properties:
        refreshToken:
          type: string
          example: "ad6f8c5js6dkj;s43dv3jljhf9fxej4236235tgdgrthreth8044b84864e2"
          description: Refresh token
      required:
        - refreshToken

    SshKey:
      type: object
      properties:
        id:
          type: integer
          example: 60
        name:
          type: string
          example: mykey
        key:
          type: string
          example: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMwmR5qB5VU9X4VYQJjXDT3qketmrrqEABSNAEEkfTtOtIZrKJmMST9bEus/5FFm9b5w5unyZaW39PUe/QDrxwB8Y3b+DTyA1LcRzd2UhCQsybh9DKbDb+HX0lKrgIeUkadwIq5gE2nx3VBQUifa2BGYC7b+FtFLjtHaOwWIvuQC7AYozCB+B69P3q8tK0D9UXlLyGGsBe8MYjl0mV9IumWS7WBz2VDqLhAvFIzpcERVstepLM9Y4mePpDhfQqt85MRIrqTWikhZExwbRmbSFCZHPi85Os2oxSHoXH1NMSBNEt3yJB4Cn5f2nBV45ysd0HcQmn7eLmRPzbkmhfYoOL Lego%20Group@localhost"
        fingerprint:
          type: string
          example: "f2:60:34:c8:34:b2:a3:da:22:f9:12:f9:03:f0:33:c0"
        keyType:
          type: string
          example: RSA
        createdAt:
          type: string
          example: "2021-11-26T14:54:11"
        createdByName:
          type: string
          example: "Automation User"
        createdById:
          type: integer
          example: 123

    SshKeyGenerated:
      type: object
      properties:
        id:
          type: integer
          example: 60
        name:
          type: string
          example: mykey
        key:
          type: string
          example: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMwmR5qB5VU9X4VYQJjXDT3qketmrrqEABSNAEEkfTtOtIZrKJmMST9bEus/5FFm9b5w5unyZaW39PUe/QDrxwB8Y3b+DTyA1LcRzd2UhCQsybh9DKbDb+HX0lKrgIeUkadwIq5gE2nx3VBQUifa2BGYC7b+FtFLjtHaOwWIvuQC7AYozCB+B69P3q8tK0D9UXlLyGGsBe8MYjl0mV9IumWS7WBz2VDqLhAvFIzpcERVstepLM9Y4mePpDhfQqt85MRIrqTWikhZExwbRmbSFCZHPi85Os2oxSHoXH1NMSBNEt3yJB4Cn5f2nBV45ysd0HcQmn7eLmRPzbkmhfYoOL Lego%20Group@localhost"
        fingerprint:
          type: string
          example: "f2:60:34:c8:34:b2:a3:da:22:f9:12:f9:03:f0:33:c0"
        keyType:
          type: string
          example: RSA
        privateKey:
          type: string
          example: "-----BEGIN RSA PRIVATE KEY-----MIIEpAIBAAKCAQEA72Raj49bugh+eX+tUWmHUT+KKzYNcvBs8F+/GTHHRcUwcYhs-----END RSA PRIVATE KEY-----"
        createdAt:
          type: string
          example: "2021-11-26T14:54:11"
        createdByName:
          type: string
          example: "Automation User"
        createdById:
          type: integer
          example: 123



    SshKeyCreate:
      type: object
      properties:
        name:
          type: string
          example: mykey
        keyType:
          type: string
          example: RSA
          enum:
            - RSA
            - ED25519
      required:
        - name
        - keyType


    SshKeyImport:
      type: object
      properties:
        name:
          type: string
          example: mykey
        key:
          type: string
          example: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMwmR5qB5VU9X4VYQJjXDT3qketmrrqEABSNAEEkfTtOtIZrKJmMST9bEus/5FFm9b5w5unyZaW39PUe/QDrxwB8Y3b+DTyA1LcRzd2UhCQsybh9DKbDb+HX0lKrgIeUkadwIq5gE2nx3VBQUifa2BGYC7b+FtFLjtHaOwWIvuQC7AYozCB+B69P3q8tK0D9UXlLyGGsBe8MYjl0mV9IumWS7WBz2VDqLhAvFIzpcERVstepLM9Y4mePpDhfQqt85MRIrqTWikhZExwbRmbSFCZHPi85Os2oxSHoXH1NMSBNEt3yJB4Cn5f2nBV45ysd0HcQmn7eLmRPzbkmhfYoOL Lego%20Group@localhost"
      required:
        - name
        - key


    SshKeyUpdate:
      type: object
      properties:
        name:
          type: string
          example: mykey
      required:
        - name

    Token:
      type: object
      properties:
        otherClaims:
          type: object
        accessToken:
          type: string
          example: "eyJhbGcih3In0.eyJleHAiOjE3MDA2Mzc4NjksImlhdCI6MTcwMDYzNzU2OSwianRpIjoiYTMwOGRhMDItYmIwNy00MjVkLTk2NzUtNzFiMjczNzdkMjYxIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLmVtbWEubXMvYXV0aC9yZWFsbXMvZW1tYSIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIzMDg1YzdlOS1kYjExLT.VCXC-D43-8zp7FVYSNgbbz8KUASAWlFcCqj6wJwif_FReGSIofgDoya54bIBPEugVq0Is7TmbBaXCzkEEASxkMxrCg7r6-7XBWC3P5w8It8Kc-wdVRgjVGSnzz4B8hA"
        expiresIn:
          type: integer
          example: 300
        refreshExpiresIn:
          type: integer
          example: 1800
        refreshToken:
          type: string
          example: "eyJhIwOGIyYi00YzgwLTQ5NTQtODY4Ni02YmY2OWJiYjg0ZjcifQ.eyJleHAiOjE3MDA2MzkzNjksImlhdCI6MTcwMDYzNzU2OSwianRpIjoiYTIxMjRmZWQtODA5MS00ZDAyLTljtYXBpIiwic2Vzc2lvbl9zdGF0ZSI6IjMzZmNlMWQzLWM1MWUtNDY5Zi1iMmNiLTQ0YzY3YjRmNTEyZSIsInNjb3BlIjoidXNlckF0dHJpYnV0ZSBw"
        tokenType:
          type: string
          example: "Bearer"
        idToken:
          type: integer
          example: null
        notBeforePolicy:
          type: integer
          example: 1668610246
        sessionState:
          type: string
          example: "33fce1d3-c51e-469f-b2cb-44c67b4f512e"





    Vm:
      type: object
      properties:
        id:
          type: integer
          example: 8100
        createdAt:
          type: string
          example: "2021-11-26T14:54:11"
        createdByName:
          type: string
          example: "Automation User"
        createdById:
          type: integer
          example: 123
        modifiedAt:
          type: string
          example: "2021-11-26T14:54:11"
        modifiedByName:
          type: string
          example: "Automation User"
        modifiedById:
          type: integer
          example: 123
        name:
          type: string
          example: vm-default-e08149hp
        projectId:
          type: integer
          example: 933
        status:
          type: string
          example: POWERED_ON
          enum:
            - POWERED_ON
            - POWERED_OFF
            - BUSY
            - DRAFT
        provider:
          type: object
          properties:
            id:
              type: integer
              example: 22
            name:
              type: string
              example: Digital Ocean
        location:
          type: object
          properties:
            id:
              type: integer
              example: 6
            name:
              type: string
              example: London
        dataCenter:
          type: object
          properties:
            id:
              type: string
              example: aws-ap-south-1
            name:
              type: string
              example: eu-north-1
            providerId:
              type: integer
              example: 5
            providerName:
              type: string
              example: DO
            locationId:
              type: integer
              example: 35
            locationName:
              type: string
              example: Pune
        os:
          type: object
          properties:
            id:
              type: integer
              example: 35
            family:
              type: string
              example: Linux
            architecture:
              type: string
              example: x86-64
            type:
              type: string
              example: Ubuntu
            version:
              type: string
              example: 22.04
        cpu:
          type: integer
          example: 1
        ramGb:
          type: integer
          example: 2
        disks:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 5819
              sizeGb:
                type: integer
                example: 250
              typeId:
                type: integer
                example: 2
              type:
                type: string
                example: SSD
              isBootable:
                type: boolean
                example: true
        networks:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 9826
              ip:
                type: string
                example: 10.106.0.2
              networkTypeId:
                type: integer
                example: 2
              networkType:
                type: string
                example: PRIVATE
          example:
            - id: 9826
              ip: "10.106.0.2"
              networkTypeId: 2
              networkType: "PRIVATE"
            - id: 9825
              ip: "134.122.100.131"
              networkTypeId: 1
              networkType: "PUBLIC"
        securityGroup:
          type: object
          properties:
            id:
              type: integer
              example: 208
            name:
              type: string
              example: default
        sshKeyId:
          type: integer
          example: 123
        userName:
          type: string
          example: root
        cost:
          type: object
          properties:
            unit:
              type: string
              example: MONTHS
            currency:
              type: string
              example: EUR
            price:
              type: number
              example: 5.479952


    VmCreate:
      type: object
      properties:
        name:
          type: string
          example: vm-test1
          description: Virtual machine name
        dataCenterId:
          type: string
          example: "aws-us-west-1"
          description: Provider's data center ID
        osId:
          type: integer
          example: 5
          description: Operating system ID
        cloudNetworkType:
          type: string
          enum:
            - isolated
            - multi-cloud
            - default
          example: multi-cloud
          description: Cloud network type
        vCpuType:
          type: string
          example: shared
          description: vCPU type
          enum:
            - shared
            - standard
            - hpc
        vCpu:
          type: integer
          example: 2
          description:  Number of virtual Central Processing Units (vCPUs)
        ramGb:
          type: integer
          example: 1
          description: Capacity of RAM in gigabytes
        volumeType:
          type: string
          example: ssd
          description: Volume type
          enum:
            - ssd
            - ssd-plus
        volumeGb:
          type: integer
          example: 16
          description: Capacity of volume in gigabytes
        sshKeyId:
          type: integer
          example: 124
          description: SSH-key ID
        securityGroupId:
          type: integer
          example: 208
          description: Security group ID
      required:
        - name
        - dataCenterId
        - osId
        - cloudNetworkType
        - vCpuType
        - vCpu
        - ramGb
        - volumeType
        - volumeGb
        - sshKeyId




    VmStart:
      type: object
      properties:
        action:
          type: string
          enum:
            - start
          example: start
          description: Action with a virtual machine
      required:
        - action

    VmShutdown:
      type: object
      properties:
        action:
          type: string
          enum:
            - shutdown
          example: shutdown
          description: Action with a virtual machine
      required:
        - action

    VmReboot:
      type: object
      properties:
        action:
          type: string
          enum:
            - reboot
          example: reboot
          description: Action with a virtual machine
      required:
        - action

    VmTransfer:
      type: object
      properties:
        action:
          type: string
          enum:
            - transfer
          example: transfer
          description: Action with a virtual machine
        dataCenterId:
          type: string
          example: "aws-us-west-1"
          description: Provider's data center ID
        isKeepOriginalInstance:
          type: boolean
          example: true
          description: Keep original instance
          default: true
      required:
        - action
        - dataCenterId

    VmClone:
      type: object
      properties:
        action:
          type: string
          enum:
            - clone
          example: clone
          description: Action with a virtual machine
        name:
          type: string
          example: vm-default-name
          description: Virtual machine name
      required:
        - action
        - name

    VmEditHardware:
      type: object
      properties:
        action:
          type: string
          enum:
            - edithardware
          example: edithardware
          description: Action with a virtual machine
        vCpu:
          type: integer
          example: 4
        vCpuType:
          type: string
          example: shared
          description: vCPU type
          enum:
            - shared
            - standard
            - hpc
        ramGb:
          type: integer
          example: 16
        volumeGb:
          type: integer
          example: 500
      required:
        - action
        - vCpu
        - ramGb
        - volumeGb


    VmConfiguration:
      type: object
      properties:
        id:
          type: integer
          example: 2456
        providerId:
          type: integer
          example: 5
        providerName:
          type: string
          example: GCP
        locationId:
          type: integer
          example: 6
        locationName:
          type: string
          example: London
        dataCenterId:
          type: string
          example: "aws-us-west-1"
        dataCenterName:
          type: string
          example: europe-west2
        osId:
          type: integer
          example: 35
        osType:
          type: string
          example: Ubuntu
        osVersion:
          type: string
          example: 18.04
        cloudNetworkType:
          type: string
          example: multi-cloud
        vCpuType:
          type: string
          example: Standard
        vCpu:
          type: integer
          example: 4
        ramGb:
          type: integer
          example: 16
        volumeGb:
          type: integer
          example: 500
        volumeType:
          type: string
          example: SSD
        cost:
          properties:
            unit:
              type: string
              example: MONTHS
            currency:
              type: string
              example: EUR
            pricePerUnit:
              type: number
              example: 5.479952



    PaginatedResult:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items: { }
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        last:
          type: boolean
        first:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean

    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        pageSize:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean

    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        unsorted:
          type: boolean
        sorted:
          type: boolean

    BadRequestError:
      properties:
        code:
          type: string
          example: "BAD_REQUEST"
        message:
          type: string
          example: "Bad request"
      required:
        - code
        - message

    NotFoundError:
      properties:
        code:
          type: string
          example: "NOT_FOUND"
        message:
          type: string
          example: "Not found"
      required:
        - code
        - message

    UnauthorizedError:
      properties:
        code:
          type: string
          example: "UNAUTHORIZED"
        message:
          type: string
          example: "Token is not provided"
      required:
        - code
        - message

    ForbiddenError:
      properties:
        code:
          type: string
          example: "FORBIDDEN"
        message:
          type: string
          example: "Access is denied. You do not have the necessary permissions to perform this action."
      required:
        - code
        - message

  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
