openapi: 3.0.0
info:
  description: "### About Infrastructure API\n\n **Base URL:** **<u>https://api.emma.ms/external</u>**\n\
    \n This **Infrastructure API** is for managing the emma cloud infrastructure within\
    \ a project. The API enables you to view, create, edit, and delete _Virtual machines,\
    \ Spot instances, Applications, Kubernetes clusters, SSH keys, Security groups,\
    \ and Backup policies_. For creating the resources you can use the endpoints with\
    \ the dictionaries: _Data centers, Locations, Providers, Operating systems, Virtual\
    \ machines configurations, Spot instances configurations, Kubernetes clusters\
    \ configurations._\n\n ### Authentication\n\n #### 1. Create service application\n\
    \n To access the API, enter your project, navigate to **Settings** > **Service\
    \ Apps**, and create a service application. Select the access level **Read**,\
    \ **Operate**, or **Manage**.\n\n - **Read** - only GET methods are allowed in\
    \ the API.\n\n - **Operate** - some operations are allowed with the resources\
    \ (e.g. _Start, Reboot,_ and _Shutdown_ of the Virtual machines).\n\n - **Manage**\
    \ - full creating, updating, and deleting of the resources is allowed.\n\n \n\
    \ #### 2. Get access token\n\n - Copy the **Client ID** and **Client Secret**\
    \ in the service application.\n - Send an API request to the endpoint **/issue-token**\
    \ as specified in the **Authentication** section of the API documentation. You\
    \ will receive access and refresh tokens in the response.\n\n _For Linux / Mac:_\n\
    \ ```\n curl -X POST https://api.emma.ms/external/v1/issue-token \\\n -H \"Content-Type:\
    \ application/json\" \\\n -d '{\"clientId\": \"YOUR-CLIENT-ID\", \"clientSecret\"\
    : \"YOUR-CLIENT-SECRET\"}'\n ```\n _For Windows:_\n ```\n curl -X POST https://api.emma.ms/external/v1/issue-token\
    \ ^\n -H \"Content-Type: application/json\" ^\n -d \"{\\\"clientId\\\": \\\"YOUR-CLIENT-ID\\\
    \", \\\"clientSecret\\\": \\\"YOUR-CLIENT-SECRET\\\"}\"\n ```\n   \n #### 3. Use\
    \ access token in requests\n The Bearer access token is a text string, included\
    \ in the request header, for example:\n\n _For Linux / Mac:_\n ```\n curl -X GET\
    \ https://api.emma.ms/external/v1/locations -H \"Authorization: Bearer YOUR-ACCESS-TOKEN-HERE\"\
    \n ```\n\n Use this token for the API requests. \n \n #### 4. Refresh token\n\
    \ The access token will expire in 10 minutes. A new access token may be created\
    \ using the refresh token (without Client ID and Client Secret).\n\n To get a\
    \ new access token send a request to the **/refresh-token** endpoint:\n\n\n _For\
    \ Linux / Mac:_\n ```\n curl -X POST https://api.emma.ms/external/v1/refresh-token\
    \ \\\n -H \"Content-Type: application/json\" \\\n -H \"Authorization: Bearer YOUR-ACCESS-TOKEN\"\
    \ \\\n -d '{\"refreshToken\": \"YOUR-REFRESH-TOKEN\"}'\n ```    \n\n ### Possible\
    \ response status codes\n\n We use standard HTTP response codes to show the success\
    \ or failure of requests.\n\n `2xx` - successful responses.\n\n `4xx` - client\
    \ error responses (the response contains an explanation of the error).\n\n `5xx`\
    \ - server error responses.\n\n The API uses the following status codes:\n\n |\
    \ Status Code | Description                  | Notes                         \
    \                                         |\n |-------------|------------------------------|------------------------------------------------------------------------|\n\
    \ | 200         | OK                           | The request was successful. \
    \                                            |\n | 201         | Created     \
    \                 | The object was successfully created. This code is only used\
    \ with objects that are created immediately.\n | 400         | Bad Request   \
    \               | The request could not be understood by the server. Incoming\
    \ parameters might not be valid. |\n | 401         | Unauthorized            |\
    \ The client is unauthenticated. The client must authenticate itself to get the\
    \ requested response. |\n | 403         | Forbidden                   | The client\
    \ does not have access rights to the content.\n | 404         | Not Found    \
    \                | The requested resource is not found.                      \
    \              |\n | 409         | Conflict | This response is sent when a request\
    \ conflicts with the current state of the object (e.g. deleting the security group\
    \ with the compute instances in it).|\n | 422         | Unprocessable Content\
    \   | The request was well-formed but was unable to be followed due to incorrect\
    \ field values (e.g. creation of a virtual machine in the non-existent data center).\
    \  |\n | 500         | Internal server Error                 | The server could\
    \ not return the representation due to an internal server error. |\n"
  title: Public EMMA API
  version: 0.0.1
servers:
- description: Public EMMA API
  url: https://api.emma.ms/external
tags:
- description: |
    Includes two endpoints for obtaining access tokens for authentication in the current API. The first endpoint enables you to get an access token and a refresh token. To send a request, you first need to create a Service application in your project (in the Settings section). After creating the application, you will get a Client ID and a Client Secret. Use them in your API request body to get the access and refresh tokens.

    The second endpoint is used for getting a new access token using the refresh token. Since the access token can expire in a few minutes, you can generate a new access token without providing the Client ID and Client Secret.
  name: Authentication
- description: |
    When creating virtual machines, spot instances, or Kubernetes clusters, you need to provide the desired hardware configurations. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.

    Use these three endpoints as references for available configurations for virtual machines, spot instances, and Kubernetes clusters. You can search the available configurations by different parameters (provider, location, data center, cloud network type, CPU, CPU type, RAM, volume size, volume type, and price).

    When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a virtual machine, spot instance, or Kubernetes cluster.
  name: Compute instances configurations
- description: |
    Data centers from cloud providers. The data center ID is necessary for creating compute instances. Use data center endpoints to find the provider's data centers.
  name: Data centers
- description: |
    Geographic locations of the provider's data centers. These endpoints provide the ID and name of each geographic location. Use the retrieved location ID for searching data centers.
  name: Locations
- description: |
    Operating systems of compute instances supported by the cloud providers. Endpoints provide detailed information about each operating system, including its family, type, version, and architecture. The operating system ID is necessary when creating virtual machines and spot instances.
  name: Operating systems
- description: |
    Cloud service provider is a third-party company that provides scalable computing resources that users can access over emma platform. When you create any computing resources in emma you create them in the provider's datacenters.
  name: Providers
- description: |
    A security group refers to a set of rules that determine what network traffic is allowed to enter or leave a particular network or system. It acts as a virtual firewall, controlling inbound and outbound traffic based on predefined rules.
    Security groups operate based on predefined rules that allow or deny traffic based on specified criteria, such as source IP address, destination IP address, port number, and protocol. You can create and modify security groups, and add or delete compute instances from the security group.
  name: Security groups
- description: |
    A Spot Instance is a specialized compute instance that allows you to access and utilize unused instance capacity at a steeply discounted rate.  Spot price is charged on an hourly basis.
  name: Spot instances
- description: |
    Provides endpoints for managing SSH keys within the project. These endpoints allow users to create, retrieve, update, and delete SSH keys, facilitating secure access to cloud resources.
    You can only manage the SSH keys created by the current Service application that you use to authenticate to the API. You can't retrieve a list of SSH keys created by other users. You can't use other user's SSH keys when creating compute instances.
  name: SSH keys
- description: |
    Provides a comprehensive set of endpoints for managing virtual machines (VMs) within the project. These endpoints enable users to create, retrieve, update, and delete virtual machines.
  name: Virtual machines
paths:
  /v1/issue-token:
    post:
      description: |
        Returns an access token and a refresh token for this API. The bearer access token enables you to get access and send requests to the endpoints in this API.

        To get the tokens, you need to send a Client ID and a Client Secret, which you can obtain from the Service application in your project. First, create a Service app in your project (Project -> Settings -> Service apps).

        To manage access rights to the API, select an appropriate access level for your app when creating the service app - **Read**, **Operate,** or **Manage**.

        The Bearer access token is a text string, included in the request header, for example:

        ```
        curl -X GET https://api.emma.ms/external/v1/locations -H "Authorization: Bearer YOUR-ACCESS-TOKEN-HERE"
        ```
      operationId: issueToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
      summary: Issue token
      tags:
      - Authentication
  /v1/refresh-token:
    post:
      description: |
        Returns an access token for this API using a refresh token. The refresh token enables you to get a new access token (when it is expired) without needing the Client ID and Client Secret. To get the access token, you need to send the refresh token in the payload. You can obtain the refresh token from the `/v1/issue-token` endpoint.
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
      summary: Refresh token
      tags:
      - Authentication
  /v1/data-centers:
    get:
      description: |
        Returns a list of data centers from cloud providers. All compute instances are created in data centers. The data center ID is necessary for creating any compute instance. Use this endpoint to find the provider's data centers.
      operationId: GetDataCenters
      parameters:
      - description: Name of the cloud provider's data center
        explode: true
        in: query
        name: dataCenterName
        required: false
        schema:
          example: eu-north-1
          type: string
        style: form
      - description: ID of the geographic location
        explode: true
        in: query
        name: locationId
        required: false
        schema:
          example: 6
          type: integer
        style: form
      - description: Name of the cloud provider
        explode: true
        in: query
        name: providerName
        required: false
        schema:
          example: GCP
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DataCenter'
                type: array
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
      security:
      - bearerAuth: []
      summary: Get list of data centers
      tags:
      - Data centers
  /v1/data-centers/{dataCenterId}:
    get:
      description: |
        Returns a data center from a cloud provider by data center ID. Information on the data center includes its name, provider and location.
      operationId: GetDataCenter
      parameters:
      - description: ID of the cloud provider's data center
        explode: false
        in: path
        name: dataCenterId
        required: true
        schema:
          example: aws-us-west-1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataCenter'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Get data center by ID
      tags:
      - Data centers
  /v1/locations:
    get:
      description: |
        Returns a list of geographic locations of the provider's data centers. Locations are cities or states (in the case of the USA). When creating any compute instance, you need to specify a data center. This method helps you find locations with data centers.
      operationId: GetLocations
      parameters:
      - description: Name of the geographic location
        explode: true
        in: query
        name: name
        required: false
        schema:
          example: Stockholm
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Location'
                type: array
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
      security:
      - bearerAuth: []
      summary: Get list of locations
      tags:
      - Locations
  /v1/locations/{locationId}:
    get:
      description: |
        Returns a geographic location by its ID. Locations are cities or states (in the case of the USA) where providers have data centers.
      operationId: GetLocation
      parameters:
      - description: ID of the geographic location
        explode: false
        in: path
        name: locationId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Get location by ID
      tags:
      - Locations
  /v1/operating-systems:
    get:
      description: |
        Returns a list of available operating systems of compute instances supported by the cloud providers. The method provides detailed information about each operating system, including its family, type, version, and architecture. Use this list of the operating systems to find an OS when you create any compute instance.
      operationId: GetOperatingSystems
      parameters:
      - description: Type of the operating system
        explode: true
        in: query
        name: type
        required: false
        schema:
          example: Ubuntu
          type: string
        style: form
      - description: Architecture of the operating system
        explode: true
        in: query
        name: architecture
        required: false
        schema:
          example: x86-64
          type: string
        style: form
      - description: Version of the operating system
        explode: true
        in: query
        name: version
        required: false
        schema:
          example: "18.04"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OperatingSystem'
                type: array
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
      security:
      - bearerAuth: []
      summary: Get list of operating systems
      tags:
      - Operating systems
  /v1/operating-systems/{operatingSystemId}:
    get:
      description: |
        Returns an operating system (supported by the cloud providers) by its ID. The method provides detailed information about each operating system, including its family, type, version, and architecture.
      operationId: GetOperatingSystem
      parameters:
      - description: ID of the operating system
        explode: false
        in: path
        name: operatingSystemId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatingSystem'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Get operating system by ID
      tags:
      - Operating systems
  /v1/providers:
    get:
      description: |
        Returns a list of cloud providers. Cloud service provider is a third-party company that provides scalable computing resources that users can access over emma platform. When you create any computing resources in emma you create them in the provider's datacenters.
        Provider is necessary when you select a data center for creating compute instances.
      operationId: GetProviders
      parameters:
      - description: Name of the cloud provider
        explode: true
        in: query
        name: providerName
        required: false
        schema:
          example: GCP
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Provider'
                type: array
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
      security:
      - bearerAuth: []
      summary: Get list of cloud providers
      tags:
      - Providers
  /v1/providers/{providerId}:
    get:
      description: |
        Returns a cloud provider by provider ID. Cloud service provider is a third-party company that provides scalable computing resources that users can access over emma platform.
        Provider is necessary when you select a data center for creating compute instances.
      operationId: GetProvider
      parameters:
      - description: ID of the cloud provider
        explode: false
        in: path
        name: providerId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Provider'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Get cloud provider by ID
      tags:
      - Providers
  /v1/security-groups:
    get:
      description: |
        Returns a list of security groups.
        A security group refers to a set of rules that determine what network traffic is allowed to enter or leave a particular compute instance. It acts as a virtual firewall, controlling inbound and outbound traffic based on predefined rules.
        Security groups operate based on predefined rules that allow or deny traffic based on specified criteria, such as source IP address, destination IP address, port number, and protocol.
      operationId: GetSecurityGroups
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SecurityGroup'
                type: array
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Get list of security groups
      tags:
      - Security groups
    post:
      description: |
        This method creates a security group.

        A security group refers to a set of rules that determine what network traffic is allowed to enter or leave a particular compute instance. It acts as a virtual firewall, controlling inbound and outbound traffic based on predefined rules.

        Security groups operate based on predefined rules that allow traffic based on specified criteria, such as source IP address, destination IP address, port number, and protocol.

        When creating a security group, provide its name and a set of inbound and outbound rules. You can only define rules that allow traffic, not deny it. All traffic is denied except for explicitly allowed traffic.

        Security groups control TCP, SCTP, GRE, ESP, AH, UDP, and ICMP protocols, or all the selected protocols at once.

        After creating a security group, a set of default rules is added to the security group. These rules are immutable, and you can't edit or delete them.

        All traffic in the selected protocol is allowed if the IP range in a rule is set to `0.0.0.0/0`.
      operationId: SecurityGroupCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityGroupRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroup'
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Create security group
      tags:
      - Security groups
  /v1/security-groups/{securityGroupId}:
    delete:
      description: |
        This method deletes a security group.

        A security group refers to a set of rules that determine what network traffic is allowed to enter or leave a particular compute instance. It acts as a virtual firewall, controlling inbound and outbound traffic based on predefined rules.

        Security groups operate based on predefined rules that allow traffic based on specified criteria, such as source IP address, destination IP address, port number, and protocol.

        You can't delete a security group if any compute instance is using this security group. To delete a security group, first remove a compute instance from the security group using this method: `POST /v1/security-groups/{securityGroupId}/instances`
      operationId: SecurityGroupDelete
      parameters:
      - description: ID of the security group
        explode: false
        in: path
        name: securityGroupId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroup'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
          description: Conflict
      security:
      - bearerAuth: []
      summary: Delete security group
      tags:
      - Security groups
    get:
      description: |
        Returns a security groups by its ID.

        A security group refers to a set of rules that determine what network traffic is allowed to enter or leave a particular compute instance. It acts as a virtual firewall, controlling inbound and outbound traffic based on predefined rules.

        Security groups operate based on predefined rules that allow or deny traffic based on specified criteria, such as source IP address, destination IP address, port number, and protocol.
      operationId: GetSecurityGroup
      parameters:
      - description: ID of the security group
        explode: false
        in: path
        name: securityGroupId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroup'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Get security group by ID
      tags:
      - Security groups
    put:
      description: |
        This method updates a security group.

        A security group refers to a set of rules that determine what network traffic is allowed to enter or leave a particular compute instance. It acts as a virtual firewall, controlling inbound and outbound traffic based on predefined rules.

        Security groups operate based on predefined rules that allow traffic based on specified criteria, such as source IP address, destination IP address, port number, and protocol.

        When editing a security group, you can add and delete the inbound and outbound rules. You can only define rules that allow traffic, not deny it. All traffic is denied except for explicitly allowed traffic.

        Security groups control TCP, SCTP, GRE, ESP, AH, UDP, and ICMP protocols, or all the selected protocols at once.

        After creating a security group, a set of default rules is added to the security group. These rules are immutable, and you can't edit or delete them. When editing a security group, _you should provide the default rules along with any other rules._

        All traffic in the selected protocol is allowed if the IP range in a rule is set to `0.0.0.0/0`.
      operationId: SecurityGroupUpdate
      parameters:
      - description: ID of the security group
        explode: false
        in: path
        name: securityGroupId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityGroupRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroup'
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
          description: Conflict
      security:
      - bearerAuth: []
      summary: Update security group
      tags:
      - Security groups
  /v1/security-groups/{securityGroupId}/instances:
    get:
      description: |
        Returns a list of compute instances using the selected security group.

        A security group refers to a set of rules that determine what network traffic is allowed to enter or leave a particular compute instance. It acts as a virtual firewall, controlling inbound and outbound traffic based on predefined rules.

        Security groups operate based on predefined rules that allow traffic based on specified criteria, such as source IP address, destination IP address, port number, and protocol.
      operationId: SecurityGroupInstances
      parameters:
      - description: ID of the security group
        explode: false
        in: path
        name: securityGroupId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Vm'
                type: array
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Get instances in security group
      tags:
      - Security groups
    post:
      description: |
        This method adds a compute instance to the selected security group.

        A security group refers to a set of rules that determine what network traffic is allowed to enter or leave a particular compute instance. It acts as a virtual firewall, controlling inbound and outbound traffic based on predefined rules.

        Security groups operate based on predefined rules that allow traffic based on specified criteria, such as source IP address, destination IP address, port number, and protocol.

        Any compute instance always uses some security group since its creation. Adding a compute instance to a security group effectively means moving it from one security group to another. When adding a compute instance to a new security group, it is automatically removed from the previous security group.
      operationId: SecurityGroupInstanceAdd
      parameters:
      - description: ID of the security group
        explode: false
        in: path
        name: securityGroupId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityGroupInstanceAdd'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vm'
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntityError'
          description: Unprocessable entity
      security:
      - bearerAuth: []
      summary: Add instance to security group
      tags:
      - Security groups
  /v1/spot-instances:
    get:
      description: |
        Returns a list of spot instances.

        A Spot Instance is a specialized compute instance that allows you to access and utilize unused instance capacity at a steeply discounted rate.  Spot price is charged on an hourly basis.
      operationId: GetSpots
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Vm'
                type: array
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden - Access is denied
      security:
      - bearerAuth: []
      summary: Get list of spot instances
      tags:
      - Spot instances
    post:
      description: "This method creates a spot instance according to the specified\
        \ parameters.\n\nA Spot Instance is a specialized compute instance that allows\
        \ you to access and utilize unused instance capacity at a steeply discounted\
        \ rate. Spot price is charged on an hourly basis. \n\nTo create a spot instance,\
        \ follow these steps:\n\n1. Select a data center using the `/v1/data-centers`\
        \ endpoint. The data center determines the provider and location of the spot\
        \ instance.\n\n2. Select an available hardware configuration for the spot\
        \ instance using the `/v1/spots-configs` endpoint.\n\n3. Select an SSH key\
        \ for the Linux spot instance using the `/v1/ssh-keys` endpoint.\n\n4. Select\
        \ an operating system using the `/v1/operating-systems` endpoint.\n\n5. Choose\
        \ one of the cloud network types: _multi-cloud, isolated,_ or _default_. Choose\
        \ the _multi-cloud_ network type if you need to connect compute instances\
        \ from different providers.\n\nYou may choose not to specify a security group.\
        \ In this case, the spot instance will be added to the default security group.\n\
        \nA `price` field of a spot instance is not required. \n\nThe spot instance\
        \ market operates on a bidding system. Your specified price acts as your bid\
        \ in this market. If your bid is higher than the current spot price, your\
        \ instance request will likely be fulfilled. However, if the market price\
        \ exceeds your bid, your instance may not be launched or could be terminated\
        \ if already running.\n"
      operationId: SpotCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpotCreate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vm'
          description: Spot instance created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden - Access is denied
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntityError'
          description: Unprocessable entity
      security:
      - bearerAuth: []
      summary: Create spot instance
      tags:
      - Spot instances
  /v1/spot-instances/{spotInstanceId}:
    delete:
      description: |
        This method deletes a spot instance.
      operationId: SpotDelete
      parameters:
      - description: ID of the spot instance
        explode: false
        in: path
        name: spotInstanceId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vm'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden - Access is denied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Delete spot instance
      tags:
      - Spot instances
    get:
      description: |
        Returns a spot instance by its ID.

        A Spot Instance is a specialized compute instance that allows you to access and utilize unused instance capacity at a steeply discounted rate.  Spot price is charged on an hourly basis.
      operationId: GetSpot
      parameters:
      - description: ID of the spot instance
        explode: false
        in: path
        name: spotInstanceId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vm'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden - Access is denied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Get spot instance by id
      tags:
      - Spot instances
  /v1/spot-instances/{spotInstanceId}/actions:
    post:
      description: |
        This endpoint reboots a spot instance.
      operationId: SpotActions
      parameters:
      - description: ID of the spot instance
        explode: false
        in: path
        name: spotInstanceId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpotActions_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vm'
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden - Access is denied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Perform actions with a spot instance
      tags:
      - Spot instances
  /v1/ssh-keys:
    get:
      description: "Returns a list of the SSH keys for access to Linux compute instances.\
        \ You can use these keys to create compute instances. \n\nThe list only contains\
        \ the SSH keys created by the current Service application that you use to\
        \ send a request. \n\nYou can't retrieve a list of SSH keys created by other\
        \ users and applications.\n"
      operationId: SshKeys
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SshKey'
                type: array
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
      security:
      - bearerAuth: []
      summary: Get list of SSH keys
      tags:
      - SSH keys
    post:
      description: |
        This method creates an SSH key that can be used for Linux compute instance creation. An SSH key can be created in two ways: generated by emma or imported by the user.

        If you want to **generate** a key, specify two fields: name and keyType (RSA or ED25519). The key will be generated, and you will receive a private key in the response. The private key will be shown only once, so copy and save it to connect to the Linux compute instances.

        If you want to **import** an existing SSH key, specify two fields: name and key. In the key field, insert your public SSH key as a string. It will be imported.
      operationId: SshKeysCreateImport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SshKeysCreateImport_request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SshKeysCreateImport_201_response'
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden - Access is denied
      security:
      - bearerAuth: []
      summary: Create or import SSH key
      tags:
      - SSH keys
  /v1/ssh-keys/{sshKeyId}:
    delete:
      description: |
        This method deletes a SSH key. You can only delete an SSH key created by the current Service application that you use to send a request. You can't delete SSH keys created by other users and applications.
      operationId: SshKeyDelete
      parameters:
      - description: SSH key ID
        explode: false
        in: path
        name: sshKeyId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Delete SSH keys
      tags:
      - SSH keys
    get:
      description: |
        Returns an SSH key by ID for access to Linux compute instances. You can only retrieve the SSH keys created by the current Service application that you use to send a request. You can't retrieve SSH keys created by other users and applications.
      operationId: GetSshKey
      parameters:
      - description: SSH key ID
        explode: false
        in: path
        name: sshKeyId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SshKey'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Get SSH key by id
      tags:
      - SSH keys
    put:
      description: |
        This method updates a name of an existing SSH-key. You can only update an SSH key created by the current Service application that you use to send a request. You can't update SSH keys created by other users and applications.
      operationId: SshKeyUpdate
      parameters:
      - description: SSH key ID
        explode: false
        in: path
        name: sshKeyId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SshKeyUpdate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SshKey'
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Update SSH keys
      tags:
      - SSH keys
  /v1/vms:
    get:
      description: |
        Returns a list of virtual machines within the project.
      operationId: GetVms
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Vm'
                type: array
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden - Access is denied
      security:
      - bearerAuth: []
      summary: Get list of virtual machines
      tags:
      - Virtual machines
    post:
      description: |
        This method creates a virtual machine according to the specified parameters.

        To create a virtual machine, follow these steps:

        1. Select a data center using the `/v1/data-centers` endpoint. The data center determines the provider and location of the virtual machine.

        2. Select an available hardware configuration for the virtual machine using the `/v1/vms-configs` endpoint.

        3. Select an SSH key for the Linux virtual machine using the `/v1/ssh-keys` endpoint.

        4. Select an operating system using the `/v1/operating-systems` endpoint.

        5. Choose one of the cloud network types: _multi-cloud, isolated,_ or _default_. Choose the _multi-cloud_ network type if you need to connect compute instances from different providers.

        You may choose not to specify a security group. In this case, the virtual machine will be added to the default security group.
      operationId: VmCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VmCreate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vm'
          description: Virtual machine created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden - Access is denied
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntityError'
          description: Unprocessable entity
      security:
      - bearerAuth: []
      summary: Create virtual machine
      tags:
      - Virtual machines
  /v1/vms/{vmId}:
    delete:
      description: |
        This method deletes a virtual machine.
      operationId: VmDelete
      parameters:
      - description: ID of the virtual machine
        explode: false
        in: path
        name: vmId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vm'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden - Access is denied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Delete virtual machine
      tags:
      - Virtual machines
    get:
      description: |
        This endpoint returns a virtual machine by ID.
      operationId: GetVm
      parameters:
      - description: ID of the virtual machine
        explode: false
        in: path
        name: vmId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vm'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden - Access is denied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Get virtual machine by id
      tags:
      - Virtual machines
  /v1/vms/{vmId}/actions:
    post:
      description: |
        This method performs several actions with a virtual machine:
          - Start a virtual machine
          - Shutdown a virtual machine
          - Reboot a virtual machine
          - Transfer a virtual machine
          - Clone a virtual machine
          - Edit hardware of a virtual machine
      operationId: VmActions
      parameters:
      - description: ID of the virtual machine
        explode: false
        in: path
        name: vmId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VmActions_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vm'
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden - Access is denied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Perform actions with a virtual machine
      tags:
      - Virtual machines
  /v1/vms-configs:
    get:
      description: |
        When creating virtual machines you need to provide the desired hardware configurations. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.

        Use this endpoint as a reference for available configurations for virtual machines. You can search the available configurations by different parameters (provider, location, data center, cloud network type, CPU, CPU type, RAM, volume size, volume type, and price).

        When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a virtual machine.
      operationId: GetVmConfigs
      parameters:
      - description: ID of the cloud provider
        explode: true
        in: query
        name: providerId
        required: false
        schema:
          example: 5
          type: integer
        style: form
      - description: ID of the geographic location
        explode: true
        in: query
        name: locationId
        required: false
        schema:
          example: 6
          type: integer
        style: form
      - description: ID of the cloud provider's data center
        explode: true
        in: query
        name: dataCenterId
        required: false
        schema:
          example: aws-us-west-1
          type: string
        style: form
      - description: Type of cloud network
        explode: true
        in: query
        name: cloudNetworkType
        required: false
        schema:
          enum:
          - isolated
          - multi-cloud
          - default
          example: multi-cloud
          type: string
        style: form
      - description: Type of vCPUs for the compute instance
        explode: true
        in: query
        name: vCpuType
        required: false
        schema:
          enum:
          - shared
          - standard
          - hpc
          example: Standard
          type: string
        style: form
      - description: virtual Central Processing Units (vCPUs) for the compute instance
        explode: true
        in: query
        name: vCpu
        required: false
        schema:
          example: 4
          type: integer
        style: form
      - description: Minimum number of vCPUs for the compute instance
        explode: true
        in: query
        name: vCpuMin
        required: false
        schema:
          example: 1
          type: integer
        style: form
      - description: Maximum number of vCPUs for the compute instance
        explode: true
        in: query
        name: vCpuMax
        required: false
        schema:
          example: 8
          type: integer
        style: form
      - description: RAM of the compute instance in gigabytes
        explode: true
        in: query
        name: ramGb
        required: false
        schema:
          example: 16
          format: float
          type: number
        style: form
      - description: Minimum RAM of the compute instance in gigabytes
        explode: true
        in: query
        name: ramGbMin
        required: false
        schema:
          example: 8
          format: float
          type: number
        style: form
      - description: Maximum RAM of the compute instance in gigabytes
        explode: true
        in: query
        name: ramGbMax
        required: false
        schema:
          example: 32
          format: float
          type: number
        style: form
      - description: Volume size of the compute instance in gigabytes
        explode: true
        in: query
        name: volumeGb
        required: false
        schema:
          example: 500
          type: integer
        style: form
      - description: Minimum volume size of the compute instance in gigabytes
        explode: true
        in: query
        name: volumeGbMin
        required: false
        schema:
          example: 250
          type: integer
        style: form
      - description: Maximum volume size of the compute instance in gigabytes
        explode: true
        in: query
        name: volumeGbMax
        required: false
        schema:
          example: 1000
          type: integer
        style: form
      - description: Volume type of the compute instance
        explode: true
        in: query
        name: volumeType
        required: false
        schema:
          enum:
          - ssd
          - ssd-plus
          example: ssd
          type: string
        style: form
      - description: Minimum price of the compute instance
        explode: true
        in: query
        name: priceMin
        required: false
        schema:
          type: number
        style: form
      - description: Maximum price of the compute instance
        explode: true
        in: query
        name: priceMax
        required: false
        schema:
          type: number
        style: form
      - description: Page number
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 0
          type: integer
        style: form
      - description: Query size
        explode: true
        in: query
        name: size
        required: false
        schema:
          example: 100
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVmConfigs_200_response'
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden - Access is denied
      security:
      - bearerAuth: []
      summary: Search available configurations for virtual machine creation
      tags:
      - Compute instances configurations
  /v1/spots-configs:
    get:
      description: |
        When creating spot instances you need to provide the desired hardware configurations. These configurations include CPU, CPU type, RAM, volume size, and volume type. Different cloud providers offer various configurations in different data centers. Therefore, before creating any compute instance, you need to verify the available configurations.

        Use this endpoint as a reference for available configurations for spot instances. You can search the available configurations by different parameters (provider, location, data center, cloud network type, CPU, CPU type, RAM, volume size, volume type, and price).

        When you find an appropriate configuration, provide the hardware parameters in the endpoint for creating or editing a spot instance.
      operationId: GetSpotConfigs
      parameters:
      - description: ID of the cloud provider
        explode: true
        in: query
        name: providerId
        required: false
        schema:
          example: 5
          type: integer
        style: form
      - description: ID of the geographic location
        explode: true
        in: query
        name: locationId
        required: false
        schema:
          example: 6
          type: integer
        style: form
      - description: ID of the cloud provider's data center
        explode: true
        in: query
        name: dataCenterId
        required: false
        schema:
          example: aws-us-west-1
          type: string
        style: form
      - description: Type of cloud network
        explode: true
        in: query
        name: cloudNetworkType
        required: false
        schema:
          enum:
          - isolated
          - multi-cloud
          - default
          example: multi-cloud
          type: string
        style: form
      - description: Type of vCPUs for the compute instance
        explode: true
        in: query
        name: vCpuType
        required: false
        schema:
          enum:
          - shared
          - standard
          - hpc
          example: Standard
          type: string
        style: form
      - description: virtual Central Processing Units (vCPUs) for the compute instance
        explode: true
        in: query
        name: vCpu
        required: false
        schema:
          example: 4
          type: integer
        style: form
      - description: Minimum number of vCPUs for the compute instance
        explode: true
        in: query
        name: vCpuMin
        required: false
        schema:
          example: 1
          type: integer
        style: form
      - description: Maximum number of vCPUs for the compute instance
        explode: true
        in: query
        name: vCpuMax
        required: false
        schema:
          example: 8
          type: integer
        style: form
      - description: RAM of the compute instance in gigabytes
        explode: true
        in: query
        name: ramGb
        required: false
        schema:
          example: 16
          format: float
          type: number
        style: form
      - description: Minimum RAM of the compute instance in gigabytes
        explode: true
        in: query
        name: ramGbMin
        required: false
        schema:
          example: 8
          format: float
          type: number
        style: form
      - description: Maximum RAM of the compute instance in gigabytes
        explode: true
        in: query
        name: ramGbMax
        required: false
        schema:
          example: 32
          format: float
          type: number
        style: form
      - description: Volume size of the compute instance in gigabytes
        explode: true
        in: query
        name: volumeGb
        required: false
        schema:
          example: 500
          type: integer
        style: form
      - description: Minimum volume size of the compute instance in gigabytes
        explode: true
        in: query
        name: volumeGbMin
        required: false
        schema:
          example: 250
          type: integer
        style: form
      - description: Maximum volume size of the compute instance in gigabytes
        explode: true
        in: query
        name: volumeGbMax
        required: false
        schema:
          example: 1000
          type: integer
        style: form
      - description: Volume type of the compute instance
        explode: true
        in: query
        name: volumeType
        required: false
        schema:
          enum:
          - ssd
          - ssd-plus
          example: ssd
          type: string
        style: form
      - description: Minimum price of the compute instance
        explode: true
        in: query
        name: priceMin
        required: false
        schema:
          type: number
        style: form
      - description: Maximum price of the compute instance
        explode: true
        in: query
        name: priceMax
        required: false
        schema:
          type: number
        style: form
      - description: Page number
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 0
          type: integer
        style: form
      - description: Query size
        explode: true
        in: query
        name: size
        required: false
        schema:
          example: 100
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVmConfigs_200_response'
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden - Access is denied
      security:
      - bearerAuth: []
      summary: Search available configurations for spot instance creation
      tags:
      - Compute instances configurations
components:
  parameters:
    cloudNetworkType:
      description: Type of cloud network
      explode: true
      in: query
      name: cloudNetworkType
      required: false
      schema:
        enum:
        - isolated
        - multi-cloud
        - default
        example: multi-cloud
        type: string
      style: form
    dataCenterId:
      description: ID of the cloud provider's data center
      explode: false
      in: path
      name: dataCenterId
      required: true
      schema:
        example: aws-us-west-1
        type: string
      style: simple
    dataCenterName:
      description: Name of the cloud provider's data center
      explode: true
      in: query
      name: dataCenterName
      required: false
      schema:
        example: eu-north-1
        type: string
      style: form
    dataCenterIdQuery:
      description: ID of the cloud provider's data center
      explode: true
      in: query
      name: dataCenterId
      required: false
      schema:
        example: aws-us-west-1
        type: string
      style: form
    locationId:
      description: ID of the geographic location
      explode: false
      in: path
      name: locationId
      required: true
      schema:
        type: integer
      style: simple
    locationName:
      description: Name of the geographic location
      explode: true
      in: query
      name: name
      required: false
      schema:
        example: Stockholm
        type: string
      style: form
    locationIdQuery:
      description: ID of the geographic location
      explode: true
      in: query
      name: locationId
      required: false
      schema:
        example: 6
        type: integer
      style: form
    operatingSystemId:
      description: ID of the operating system
      explode: false
      in: path
      name: operatingSystemId
      required: true
      schema:
        type: integer
      style: simple
    osType:
      description: Type of the operating system
      explode: true
      in: query
      name: type
      required: false
      schema:
        example: Ubuntu
        type: string
      style: form
    osArchitecture:
      description: Architecture of the operating system
      explode: true
      in: query
      name: architecture
      required: false
      schema:
        example: x86-64
        type: string
      style: form
    osVersion:
      description: Version of the operating system
      explode: true
      in: query
      name: version
      required: false
      schema:
        example: "18.04"
        type: string
      style: form
    pageQuery:
      description: Page number
      explode: true
      in: query
      name: page
      required: false
      schema:
        example: 0
        type: integer
      style: form
    priceMin:
      description: Minimum price of the compute instance
      explode: true
      in: query
      name: priceMin
      required: false
      schema:
        type: number
      style: form
    priceMax:
      description: Maximum price of the compute instance
      explode: true
      in: query
      name: priceMax
      required: false
      schema:
        type: number
      style: form
    providerId:
      description: ID of the cloud provider
      explode: false
      in: path
      name: providerId
      required: true
      schema:
        type: integer
      style: simple
    providerIdQuery:
      description: ID of the cloud provider
      explode: true
      in: query
      name: providerId
      required: false
      schema:
        example: 5
        type: integer
      style: form
    providerName:
      description: Name of the cloud provider
      explode: true
      in: query
      name: providerName
      required: false
      schema:
        example: GCP
        type: string
      style: form
    ramGb:
      description: RAM of the compute instance in gigabytes
      explode: true
      in: query
      name: ramGb
      required: false
      schema:
        example: 16
        format: float
        type: number
      style: form
    ramGbMin:
      description: Minimum RAM of the compute instance in gigabytes
      explode: true
      in: query
      name: ramGbMin
      required: false
      schema:
        example: 8
        format: float
        type: number
      style: form
    ramGbMax:
      description: Maximum RAM of the compute instance in gigabytes
      explode: true
      in: query
      name: ramGbMax
      required: false
      schema:
        example: 32
        format: float
        type: number
      style: form
    securityGroupId:
      description: ID of the security group
      explode: false
      in: path
      name: securityGroupId
      required: true
      schema:
        type: integer
      style: simple
    securityGroupRuleId:
      description: ID of the rule in the security group
      explode: false
      in: path
      name: securityGroupRuleId
      required: true
      schema:
        type: integer
      style: simple
    sizeQuery:
      description: Query size
      explode: true
      in: query
      name: size
      required: false
      schema:
        example: 100
        type: integer
      style: form
    spotInstanceId:
      description: ID of the spot instance
      explode: false
      in: path
      name: spotInstanceId
      required: true
      schema:
        type: integer
      style: simple
    sshKeyId:
      description: SSH key ID
      explode: false
      in: path
      name: sshKeyId
      required: true
      schema:
        type: integer
      style: simple
    vCpu:
      description: virtual Central Processing Units (vCPUs) for the compute instance
      explode: true
      in: query
      name: vCpu
      required: false
      schema:
        example: 4
        type: integer
      style: form
    vCpuMin:
      description: Minimum number of vCPUs for the compute instance
      explode: true
      in: query
      name: vCpuMin
      required: false
      schema:
        example: 1
        type: integer
      style: form
    vCpuMax:
      description: Maximum number of vCPUs for the compute instance
      explode: true
      in: query
      name: vCpuMax
      required: false
      schema:
        example: 8
        type: integer
      style: form
    vCpuType:
      description: Type of vCPUs for the compute instance
      explode: true
      in: query
      name: vCpuType
      required: false
      schema:
        enum:
        - shared
        - standard
        - hpc
        example: Standard
        type: string
      style: form
    vmId:
      description: ID of the virtual machine
      explode: false
      in: path
      name: vmId
      required: true
      schema:
        type: integer
      style: simple
    volumeGb:
      description: Volume size of the compute instance in gigabytes
      explode: true
      in: query
      name: volumeGb
      required: false
      schema:
        example: 500
        type: integer
      style: form
    volumeGbMin:
      description: Minimum volume size of the compute instance in gigabytes
      explode: true
      in: query
      name: volumeGbMin
      required: false
      schema:
        example: 250
        type: integer
      style: form
    volumeGbMax:
      description: Maximum volume size of the compute instance in gigabytes
      explode: true
      in: query
      name: volumeGbMax
      required: false
      schema:
        example: 1000
        type: integer
      style: form
    volumeType:
      description: Volume type of the compute instance
      explode: true
      in: query
      name: volumeType
      required: false
      schema:
        enum:
        - ssd
        - ssd-plus
        example: ssd
        type: string
      style: form
  schemas:
    Credentials:
      example:
        clientId: ad6f8c5c-223f-4102-8664-8044b84864e2
        clientSecret: e0eb8a09-b7fe-4acc-a72b-79ce0dd26068
      properties:
        clientId:
          description: Client ID from the Service application in the project
          example: ad6f8c5c-223f-4102-8664-8044b84864e2
          type: string
        clientSecret:
          description: Client secret from the Service application in the project
          example: e0eb8a09-b7fe-4acc-a72b-79ce0dd26068
          type: string
      required:
      - clientId
      - clientSecret
      type: object
    DataCenter:
      example:
        locationName: Stockholm
        providerId: 5
        locationId: 15
        name: eu-north-1
        id: aws-us-west-1
        providerName: AWS
      properties:
        id:
          description: ID of the cloud provider's data center
          example: aws-us-west-1
          type: string
        name:
          description: Name of the cloud provider's data center
          example: eu-north-1
          type: string
        providerId:
          description: ID of the cloud provider that owns the datacenter
          example: 5
          type: integer
        providerName:
          description: Name of the cloud provider that owns the datacenter
          example: AWS
          type: string
        locationId:
          description: ID of the data center location
          example: 15
          type: integer
        locationName:
          description: Name of the data center location (city or state)
          example: Stockholm
          type: string
      type: object
    Location:
      example:
        name: London
        id: 18
      properties:
        id:
          description: ID of the geographical location
          example: 18
          type: integer
        name:
          description: Name of the geographical location (city or state)
          example: London
          type: string
      type: object
    OperatingSystem:
      example:
        id: 18
        family: Linux
        type: Ubuntu
        version: "18.04"
        architecture: x86-64
      properties:
        id:
          description: Operating system ID
          example: 18
          type: integer
        family:
          description: Operating system family
          example: Linux
          type: string
        type:
          description: Operating system type
          example: Ubuntu
          type: string
        architecture:
          description: Operating system architecture
          example: x86-64
          type: string
        version:
          description: Operating system version
          example: "18.04"
          type: string
      type: object
    Provider:
      example:
        name: GCP
        id: 5
      properties:
        id:
          description: ID of the cloud provider
          example: 5
          type: integer
        name:
          description: Name of the cloud provider
          example: GCP
          type: string
      type: object
    RefreshToken:
      example:
        refreshToken: ad6f8c5js6dkj;s43dv3jljhf9fxej4236235tgdgrthreth8044b84864e2
      properties:
        refreshToken:
          description: Refresh token. You can obtain a refresh token from the `/v1/issue-token`
            endpoint
          example: ad6f8c5js6dkj;s43dv3jljhf9fxej4236235tgdgrthreth8044b84864e2
          type: string
      required:
      - refreshToken
      type: object
    SecurityGroup:
      example:
        createdByName: Jack Rur
        createdAt: 2023-08-31T09:26:19.347+00:00
        modifiedByName: Jack Rur
        modifiedById: 123
        modifiedAt: 2023-08-31T09:26:19.347+00:00
        synchronizationStatus: SYNCHRONIZED
        name: default
        recomposingStatus: RECOMPOSED
        rules:
        - protocol: TCP
          isMutable: true
          ipRange: 0.0.0.0/0
          type: Custom TCP
          ports: "30321"
          policy: ALLOW
          direction: INBOUND
        - protocol: TCP
          isMutable: true
          ipRange: 0.0.0.0/0
          type: Custom TCP
          ports: "30321"
          policy: ALLOW
          direction: INBOUND
        id: 5
        lastModificationErrorDescription: Unable to update security group
        createdById: 123
      properties:
        id:
          description: Security group id
          example: 5
          type: integer
        name:
          description: Security group name
          example: default
          type: string
        createdById:
          description: ID of the user who created the security group
          example: 123
          type: integer
        createdByName:
          description: Name of the user who created the security group
          example: Jack Rur
          type: string
        modifiedById:
          description: ID of the user who last edited the security group
          example: 123
          type: integer
        modifiedByName:
          description: Name of the user who last edited the security group
          example: Jack Rur
          type: string
        createdAt:
          description: Date and time of the security group's creation
          example: 2023-08-31T09:26:19.347+00:00
          type: string
        modifiedAt:
          description: Date and time of the security group's last update
          example: 2023-08-31T09:26:19.347+00:00
          type: string
        synchronizationStatus:
          description: "Synchronization status of the security group. When you make\
            \ changes in the rules the changes are propagated to the respective provider’\
            s security groups. While this is happening the security groups have the\
            \ status Synchronizing. After it is done the status changes to Synchronized.\
            \ When another VM is added to the security group it will not be synchronized\
            \ at first with the other VMs, therefore the status will be Desynchronized."
          enum:
          - SYNCHRONIZED
          - DESYNCHRONIZED
          - SYNCHRONIZING
          type: string
        recomposingStatus:
          description: Recomposing status of the security group. When a new Virtual
            machine is added to the Security group it starts a synchronization process.
            During this process the Security group will have a Recomposing status.
          enum:
          - RECOMPOSED
          - RECOMPOSING
          type: string
        lastModificationErrorDescription:
          description: Text of the error when the Security group was last edited
          example: Unable to update security group
          type: string
        rules:
          description: List of the inbound and outbound rules in the Security group
          items:
            $ref: '#/components/schemas/SecurityGroupRule'
          type: array
      type: object
    SecurityGroupRequest:
      example:
        name: new_default
        rules:
        - protocol: TCP
          ipRange: 0.0.0.0/0
          ports: 1-30321
          direction: INBOUND
        - protocol: TCP
          ipRange: 0.0.0.0/0
          ports: 1-30321
          direction: INBOUND
      properties:
        name:
          description: Name of the security group
          example: new_default
          type: string
        rules:
          description: List of the inbound and outbound rules in the Security group
          items:
            $ref: '#/components/schemas/SecurityGroupRuleRequest'
          type: array
      required:
      - name
      - rules
      type: object
    SecurityGroupInstanceAdd:
      example:
        instanceId: 8003
      properties:
        instanceId:
          description: ID of the compute instance to be added to the Security group
          example: 8003
          type: integer
      type: object
    SecurityGroupRule:
      example:
        protocol: TCP
        isMutable: true
        ipRange: 0.0.0.0/0
        type: Custom TCP
        ports: "30321"
        policy: ALLOW
        direction: INBOUND
      properties:
        type:
          description: Type of the security group rule
          example: Custom TCP
          type: string
        policy:
          description: Rule policy (all rules are allowing)
          example: ALLOW
          type: string
        direction:
          description: |
            Direction of the network traffic: inbound or outbound.
          example: INBOUND
          type: string
        protocol:
          description: Network protocol of the rule
          example: TCP
          type: string
        ports:
          description: Allowed port or port range
          example: "30321"
          type: string
        ipRange:
          description: Allowed IP or IP range
          example: 0.0.0.0/0
          type: string
        isMutable:
          description: "Indicates if the rule can be edited. Some security group rules\
            \ are added by default, cannot be changed, and are marked as immutable."
          example: true
          type: boolean
      type: object
    SecurityGroupRuleRequest:
      example:
        protocol: TCP
        ipRange: 0.0.0.0/0
        ports: 1-30321
        direction: INBOUND
      properties:
        direction:
          description: Direction of the network traffic
          enum:
          - INBOUND
          - OUTBOUND
          example: INBOUND
          type: string
        protocol:
          description: Network protocol
          enum:
          - all
          - TCP
          - SCTP
          - GRE
          - ESP
          - AH
          - UDP
          - ICMP
          example: TCP
          type: string
        ports:
          description: Allowed port or port range
          example: 1-30321
          type: string
        ipRange:
          description: Allowed IP or IP range
          example: 0.0.0.0/0
          type: string
      required:
      - direction
      - ipRange
      - ports
      - protocol
      type: object
    SpotCreate:
      example:
        securityGroupId: 208
        volumeType: ssd
        vCpu: 4
        price: 0.002635
        dataCenterId: aws-us-west-1
        name: spot-default
        volumeGb: 16
        osId: 35
        cloudNetworkType: multi-cloud
        ramGb: 1
        sshKeyId: 124
        vCpuType: shared
      properties:
        name:
          description: Name of the spot instance
          example: spot-default
          type: string
        dataCenterId:
          description: ID of the provider's data center
          example: aws-us-west-1
          type: string
        osId:
          description: ID of the operating system
          example: 35
          type: integer
        cloudNetworkType:
          description: Type of the cloud network
          enum:
          - isolated
          - multi-cloud
          - default
          example: multi-cloud
          type: string
        vCpuType:
          description: Type of the Central Processing Units (vCPUs)
          enum:
          - shared
          - standard
          - hpc
          example: shared
          type: string
        vCpu:
          description: Number of virtual Central Processing Units (vCPUs)
          example: 4
          type: integer
        ramGb:
          description: Capacity of the RAM in gigabytes
          example: 1
          format: float
          type: number
        volumeType:
          description: Volume type
          enum:
          - ssd
          - ssd-plus
          example: ssd
          type: string
        volumeGb:
          description: Capacity of the volume in gigabytes
          example: 16
          type: integer
        sshKeyId:
          description: SSH-key ID
          example: 124
          type: integer
        securityGroupId:
          description: ID of the security group
          example: 208
          type: integer
        price:
          description: Offer price of the spot instance
          example: 0.002635
          format: float
          type: number
      required:
      - cloudNetworkType
      - dataCenterId
      - name
      - osId
      - price
      - ramGb
      - sshKeyId
      - vCpu
      - vCpuType
      - volumeGb
      - volumeType
      type: object
    SpotReboot:
      properties:
        action:
          description: Action with the spot instance - reboot
          enum:
          - reboot
          example: reboot
          type: string
      required:
      - action
      type: object
    SshKey:
      example:
        createdAt: 2021-11-26T14:54:11
        createdByName: Automation User
        name: mykey
        fingerprint: f2:60:34:c8:34:b2:a3:da:22:f9:12:f9:03:f0:33:c0
        id: 60
        keyType: RSA
        key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMwmR5qB5VU9X4VYQJjXDT3qketmrrqEABSNAEEkfTtOtIZrKJmMST9bEus/5FFm9b5w5unyZaW39PUe/QDrxwB8Y3b+DTyA1LcRzd2UhCQsybh9DKbDb+HX0lKrgIeUkadwIq5gE2nx3VBQUifa2BGYC7b+FtFLjtHaOwWIvuQC7AYozCB+B69P3q8tK0D9UXlLyGGsBe8MYjl0mV9IumWS7WBz2VDqLhAvFIzpcERVstepLM9Y4mePpDhfQqt85MRIrqTWikhZExwbRmbSFCZHPi85Os2oxSHoXH1NMSBNEt3yJB4Cn5f2nBV45ysd0HcQmn7eLmRPzbkmhfYoOL
          Lego%20Group@localhost
        createdById: 123
      properties:
        id:
          description: SSH key ID
          example: 60
          type: integer
        name:
          description: SSH key name
          example: mykey
          type: string
        key:
          description: SSH public key
          example: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMwmR5qB5VU9X4VYQJjXDT3qketmrrqEABSNAEEkfTtOtIZrKJmMST9bEus/5FFm9b5w5unyZaW39PUe/QDrxwB8Y3b+DTyA1LcRzd2UhCQsybh9DKbDb+HX0lKrgIeUkadwIq5gE2nx3VBQUifa2BGYC7b+FtFLjtHaOwWIvuQC7AYozCB+B69P3q8tK0D9UXlLyGGsBe8MYjl0mV9IumWS7WBz2VDqLhAvFIzpcERVstepLM9Y4mePpDhfQqt85MRIrqTWikhZExwbRmbSFCZHPi85Os2oxSHoXH1NMSBNEt3yJB4Cn5f2nBV45ysd0HcQmn7eLmRPzbkmhfYoOL
            Lego%20Group@localhost
          type: string
        fingerprint:
          description: SSH key fingerprint
          example: f2:60:34:c8:34:b2:a3:da:22:f9:12:f9:03:f0:33:c0
          type: string
        keyType:
          description: SSH key type (RSA or ED25519)
          example: RSA
          type: string
        createdAt:
          description: Date and time when the SSH key was created
          example: 2021-11-26T14:54:11
          type: string
        createdByName:
          description: Name of the user who created the SSH key
          example: Automation User
          type: string
        createdById:
          description: ID of the user who created the SSH key
          example: 123
          type: integer
      type: object
    SshKeyGenerated:
      properties:
        id:
          description: SSH key ID
          example: 60
          type: integer
        name:
          description: SSH key name
          example: mykey
          type: string
        key:
          description: SSH public key
          example: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMwmR5qB5VU9X4VYQJjXDT3qketmrrqEABSNAEEkfTtOtIZrKJmMST9bEus/5FFm9b5w5unyZaW39PUe/QDrxwB8Y3b+DTyA1LcRzd2UhCQsybh9DKbDb+HX0lKrgIeUkadwIq5gE2nx3VBQUifa2BGYC7b+FtFLjtHaOwWIvuQC7AYozCB+B69P3q8tK0D9UXlLyGGsBe8MYjl0mV9IumWS7WBz2VDqLhAvFIzpcERVstepLM9Y4mePpDhfQqt85MRIrqTWikhZExwbRmbSFCZHPi85Os2oxSHoXH1NMSBNEt3yJB4Cn5f2nBV45ysd0HcQmn7eLmRPzbkmhfYoOL
            Lego%20Group@localhost
          type: string
        fingerprint:
          description: SSH key fingerprint
          example: f2:60:34:c8:34:b2:a3:da:22:f9:12:f9:03:f0:33:c0
          type: string
        keyType:
          description: SSH key type (RSA or ED25519)
          example: RSA
          type: string
        privateKey:
          description: SSH private key
          example: '-----BEGIN RSA PRIVATE KEY-----MIIEpAIBAAKCAQEA72Raj49bugh+eX+tUWmHUT+KKzYNcvBs8F+/GTHHRcUwcYhs-----END
            RSA PRIVATE KEY-----'
          type: string
        createdAt:
          description: Date and time when the SSH key was created
          example: 2021-11-26T14:54:11
          type: string
        createdByName:
          description: Name of the user who created the SSH key
          example: Automation User
          type: string
        createdById:
          description: ID of the user who created the SSH key
          example: 123
          type: integer
      type: object
    SshKeyCreate:
      properties:
        name:
          description: SSH key name
          example: mykey
          type: string
        keyType:
          description: SSH key type (RSA or ED25519)
          enum:
          - RSA
          - ED25519
          example: RSA
          type: string
      required:
      - keyType
      - name
      type: object
    SshKeyImport:
      properties:
        name:
          description: SSH key name
          example: mykey
          type: string
        key:
          description: SSH public key
          example: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMwmR5qB5VU9X4VYQJjXDT3qketmrrqEABSNAEEkfTtOtIZrKJmMST9bEus/5FFm9b5w5unyZaW39PUe/QDrxwB8Y3b+DTyA1LcRzd2UhCQsybh9DKbDb+HX0lKrgIeUkadwIq5gE2nx3VBQUifa2BGYC7b+FtFLjtHaOwWIvuQC7AYozCB+B69P3q8tK0D9UXlLyGGsBe8MYjl0mV9IumWS7WBz2VDqLhAvFIzpcERVstepLM9Y4mePpDhfQqt85MRIrqTWikhZExwbRmbSFCZHPi85Os2oxSHoXH1NMSBNEt3yJB4Cn5f2nBV45ysd0HcQmn7eLmRPzbkmhfYoOL
            Lego%20Group@localhost
          type: string
      required:
      - key
      - name
      type: object
    SshKeyUpdate:
      example:
        name: mykey
      properties:
        name:
          description: SSH key name
          example: mykey
          type: string
      required:
      - name
      type: object
    Token:
      example:
        expiresIn: 300
        notBeforePolicy: 1668610246
        sessionState: 33fce1d3-c51e-469f-b2cb-44c67b4f512e
        otherClaims: "{}"
        idToken: 0
        accessToken: eyJhbGcih3In0.eyJleHAiOjE3MDA2Mzc4NjksImlhdCI6MTcwMDYzNzU2OSwianRpIjoiYTMwOGRhMDItYmIwNy00MjVkLTk2NzUtNzFiMjczNzdkMjYxIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLmVtbWEubXMvYXV0aC9yZWFsbXMvZW1tYSIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIzMDg1YzdlOS1kYjExLT.VCXC-D43-8zp7FVYSNgbbz8KUASAWlFcCqj6wJwif_FReGSIofgDoya54bIBPEugVq0Is7TmbBaXCzkEEASxkMxrCg7r6-7XBWC3P5w8It8Kc-wdVRgjVGSnzz4B8hA
        tokenType: Bearer
        refreshExpiresIn: 1800
        refreshToken: eyJhIwOGIyYi00YzgwLTQ5NTQtODY4Ni02YmY2OWJiYjg0ZjcifQ.eyJleHAiOjE3MDA2MzkzNjksImlhdCI6MTcwMDYzNzU2OSwianRpIjoiYTIxMjRmZWQtODA5MS00ZDAyLTljtYXBpIiwic2Vzc2lvbl9zdGF0ZSI6IjMzZmNlMWQzLWM1MWUtNDY5Zi1iMmNiLTQ0YzY3YjRmNTEyZSIsInNjb3BlIjoidXNlckF0dHJpYnV0ZSBw
      properties:
        otherClaims:
          description: ""
          type: object
        accessToken:
          description: Access token
          example: eyJhbGcih3In0.eyJleHAiOjE3MDA2Mzc4NjksImlhdCI6MTcwMDYzNzU2OSwianRpIjoiYTMwOGRhMDItYmIwNy00MjVkLTk2NzUtNzFiMjczNzdkMjYxIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLmVtbWEubXMvYXV0aC9yZWFsbXMvZW1tYSIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIzMDg1YzdlOS1kYjExLT.VCXC-D43-8zp7FVYSNgbbz8KUASAWlFcCqj6wJwif_FReGSIofgDoya54bIBPEugVq0Is7TmbBaXCzkEEASxkMxrCg7r6-7XBWC3P5w8It8Kc-wdVRgjVGSnzz4B8hA
          type: string
        expiresIn:
          description: Seconds until access token expiration
          example: 300
          type: integer
        refreshExpiresIn:
          description: Seconds until refresh token expiration
          example: 1800
          type: integer
        refreshToken:
          description: Refresh token
          example: eyJhIwOGIyYi00YzgwLTQ5NTQtODY4Ni02YmY2OWJiYjg0ZjcifQ.eyJleHAiOjE3MDA2MzkzNjksImlhdCI6MTcwMDYzNzU2OSwianRpIjoiYTIxMjRmZWQtODA5MS00ZDAyLTljtYXBpIiwic2Vzc2lvbl9zdGF0ZSI6IjMzZmNlMWQzLWM1MWUtNDY5Zi1iMmNiLTQ0YzY3YjRmNTEyZSIsInNjb3BlIjoidXNlckF0dHJpYnV0ZSBw
          type: string
        tokenType:
          description: Token type
          example: Bearer
          type: string
        idToken:
          description: ""
          type: integer
          example: null
        notBeforePolicy:
          description: Timestamp before which the token is not valid
          example: 1668610246
          type: integer
        sessionState:
          description: ""
          example: 33fce1d3-c51e-469f-b2cb-44c67b4f512e
          type: string
      type: object
    Vm:
      example:
        createdByName: Automation User
        cost:
          unit: MONTHS
          price: 5.479952
          currency: EUR
        os:
          id: 35
          family: Linux
          type: Ubuntu
          version: "22.04"
          architecture: x86-64
        vCpu: 1
        disks:
        - sizeGb: 250
          typeId: 2
          id: 5819
          type: SSD
          isBootable: true
        - sizeGb: 250
          typeId: 2
          id: 5819
          type: SSD
          isBootable: true
        dataCenter:
          locationName: Pune
          providerId: 5
          locationId: 35
          name: eu-north-1
          id: aws-ap-south-1
          providerName: DO
        modifiedAt: 2021-11-26T14:54:11
        securityGroup:
          name: default
          id: 208
        networks:
        - id: 9826
          ip: 10.106.0.2
          networkTypeId: 2
          networkType: PRIVATE
        - id: 9825
          ip: 134.122.100.131
          networkTypeId: 1
          networkType: PUBLIC
        userName: root
        ramGb: 2
        sshKeyId: 123
        vCpuType: shared
        createdAt: 2021-11-26T14:54:11
        modifiedByName: Automation User
        modifiedById: 123
        provider:
          name: Digital Ocean
          id: 22
        name: vm-default-e08149hp
        location:
          name: London
          id: 6
        id: 8100
        cloudNetworkType: multi-cloud
        projectId: 933
        createdById: 123
        status: POWERED_ON
      properties:
        id:
          description: ID of the virtual machine
          example: 8100
          type: integer
        createdAt:
          description: Date and time when the virtual machine was created
          example: 2021-11-26T14:54:11
          type: string
        createdByName:
          description: Name of the user who created the virtual machine
          example: Automation User
          type: string
        createdById:
          description: ID of the user who created the virtual machine
          example: 123
          type: integer
        modifiedAt:
          description: Date and time when the virtual machine was last edited
          example: 2021-11-26T14:54:11
          type: string
        modifiedByName:
          description: Name of the user who last edited the virtual machine
          example: Automation User
          type: string
        modifiedById:
          description: ID of the user who last edited the virtual machine
          example: 123
          type: integer
        name:
          description: Name of the virtual machine
          example: vm-default-e08149hp
          type: string
        projectId:
          description: Project ID
          example: 933
          type: integer
        status:
          description: Status of the virtual machine
          enum:
          - POWERED_ON
          - POWERED_OFF
          - BUSY
          - DRAFT
          example: POWERED_ON
          type: string
        provider:
          $ref: '#/components/schemas/Vm_provider'
        location:
          $ref: '#/components/schemas/Vm_location'
        dataCenter:
          $ref: '#/components/schemas/Vm_dataCenter'
        os:
          $ref: '#/components/schemas/Vm_os'
        vCpu:
          description: Number of virtual Central Processing Units (vCPUs)
          example: 1
          type: integer
        vCpuType:
          description: Type of virtual Central Processing Units (vCPUs)
          enum:
          - shared
          - standard
          - hpc
          example: shared
          type: string
        cloudNetworkType:
          description: Cloud network type
          enum:
          - isolated
          - multi-cloud
          - default
          example: multi-cloud
          type: string
        ramGb:
          description: Capacity of the RAM in gigabytes
          example: 2
          format: float
          type: number
        disks:
          description: List of volumes
          items:
            $ref: '#/components/schemas/Vm_disks_inner'
          type: array
        networks:
          description: ""
          example:
          - id: 9826
            ip: 10.106.0.2
            networkTypeId: 2
            networkType: PRIVATE
          - id: 9825
            ip: 134.122.100.131
            networkTypeId: 1
            networkType: PUBLIC
          items:
            $ref: '#/components/schemas/Vm_networks_inner'
          type: array
        securityGroup:
          $ref: '#/components/schemas/Vm_securityGroup'
        sshKeyId:
          description: SSH key ID
          example: 123
          type: integer
        userName:
          description: User name
          example: root
          type: string
        cost:
          $ref: '#/components/schemas/Vm_cost'
      type: object
    VmCreate:
      example:
        securityGroupId: 208
        volumeType: ssd
        vCpu: 2
        dataCenterId: aws-us-west-1
        name: vm-test1
        volumeGb: 16
        osId: 5
        cloudNetworkType: multi-cloud
        ramGb: 1
        sshKeyId: 124
        vCpuType: shared
      properties:
        name:
          description: Virtual machine name
          example: vm-test1
          type: string
        dataCenterId:
          description: ID of the provider's data center
          example: aws-us-west-1
          type: string
        osId:
          description: ID of the operating system
          example: 5
          type: integer
        cloudNetworkType:
          description: Type of the cloud network
          enum:
          - isolated
          - multi-cloud
          - default
          example: multi-cloud
          type: string
        vCpuType:
          description: Type of virtual Central Processing Units (vCPUs)
          enum:
          - shared
          - standard
          - hpc
          example: shared
          type: string
        vCpu:
          description: Number of virtual Central Processing Units (vCPUs)
          example: 2
          type: integer
        ramGb:
          description: Capacity of the RAM in gigabytes
          example: 1
          format: float
          type: number
        volumeType:
          description: Volume type
          enum:
          - ssd
          - ssd-plus
          example: ssd
          type: string
        volumeGb:
          description: Capacity of the volume in gigabytes
          example: 16
          type: integer
        sshKeyId:
          description: SSH-key ID
          example: 124
          type: integer
        securityGroupId:
          description: ID of the security group
          example: 208
          type: integer
      required:
      - cloudNetworkType
      - dataCenterId
      - name
      - osId
      - ramGb
      - sshKeyId
      - vCpu
      - vCpuType
      - volumeGb
      - volumeType
      type: object
    VmStart:
      properties:
        action:
          description: Action with a virtual machine
          enum:
          - start
          example: start
          type: string
      required:
      - action
      type: object
    VmShutdown:
      properties:
        action:
          description: Action with a virtual machine
          enum:
          - shutdown
          example: shutdown
          type: string
      required:
      - action
      type: object
    VmReboot:
      properties:
        action:
          description: Action with a virtual machine
          enum:
          - reboot
          example: reboot
          type: string
      required:
      - action
      type: object
    VmTransfer:
      properties:
        action:
          description: Action with a virtual machine
          enum:
          - transfer
          example: transfer
          type: string
        dataCenterId:
          description: ID of the provider's data center
          example: aws-us-west-1
          type: string
        isKeepOriginalInstance:
          default: true
          description: Indicate if it is necessary to keep the original instance
          example: true
          type: boolean
      required:
      - action
      - dataCenterId
      type: object
    VmClone:
      properties:
        action:
          description: Action with a virtual machine
          enum:
          - clone
          example: clone
          type: string
        name:
          description: Name of the virtual machine
          example: vm-default-name
          type: string
      required:
      - action
      - name
      type: object
    VmEditHardware:
      properties:
        action:
          description: Action with a virtual machine
          enum:
          - edithardware
          example: edithardware
          type: string
        vCpu:
          description: Number of virtual Central Processing Units (vCPUs)
          example: 4
          type: integer
        vCpuType:
          description: Type of virtual Central Processing Units (vCPUs)
          enum:
          - shared
          - standard
          - hpc
          example: shared
          type: string
        ramGb:
          description: Capacity of the RAM in gigabytes
          example: 16
          format: float
          type: number
        volumeGb:
          description: Capacity of the volume in gigabytes
          example: 500
          type: integer
      required:
      - action
      - ramGb
      - vCpu
      - volumeGb
      type: object
    VmConfiguration:
      example:
        volumeType: SSD
        locationName: London
        cost:
          unit: MONTHS
          currency: EUR
          pricePerUnit: 5.479952
        vCpu: 4
        dataCenterName: europe-west2
        osId: 35
        ramGb: 16
        vCpuType: Standard
        cloudNetworkTypes:
        - default
        - multi-cloud
        - isolated
        osVersion: "18.04"
        providerId: 5
        locationId: 6
        dataCenterId: aws-us-west-1
        osType: Ubuntu
        volumeGb: 500
        id: 2456
        providerName: GCP
      properties:
        id:
          description: Configuration ID
          example: 2456
          type: integer
        providerId:
          description: ID of the cloud provider
          example: 5
          type: integer
        providerName:
          description: Name of the cloud provider
          example: GCP
          type: string
        locationId:
          description: Location ID
          example: 6
          type: integer
        locationName:
          description: Location name (city or state)
          example: London
          type: string
        dataCenterId:
          description: ID of the data center
          example: aws-us-west-1
          type: string
        dataCenterName:
          description: Name of the data center
          example: europe-west2
          type: string
        osId:
          description: ID of the operating system
          example: 35
          type: integer
        osType:
          description: Type of the operating system
          example: Ubuntu
          type: string
        osVersion:
          description: Version of the operating system
          example: "18.04"
          type: string
        cloudNetworkTypes:
          description: List of the cloud network types
          example:
          - default
          - multi-cloud
          - isolated
          items:
            type: string
          type: array
        vCpuType:
          description: Type of virtual Central Processing Units (vCPUs)
          example: Standard
          type: string
        vCpu:
          description: Number of virtual Central Processing Units (vCPUs)
          example: 4
          type: integer
        ramGb:
          description: Capacity of the RAM in gigabytes
          example: 16
          format: float
          type: number
        volumeGb:
          description: Capacity of the volume in gigabytes
          example: 500
          type: integer
        volumeType:
          description: Volume type
          example: SSD
          type: string
        cost:
          $ref: '#/components/schemas/VmConfiguration_cost'
      type: object
    PaginatedResult:
      properties:
        totalPages:
          description: Total number of pages available
          format: int32
          type: integer
        totalElements:
          description: Total number of elements across all pages
          format: int64
          type: integer
        size:
          description: Number of elements per page
          format: int32
          type: integer
        content:
          description: List of elements on the current page
          items:
            type: object
          type: array
        number:
          description: Current page number (0-based index)
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        last:
          description: Indicates if this is the last page
          type: boolean
        first:
          description: Indicates if this is the first page
          type: boolean
        numberOfElements:
          description: Number of elements on the current page
          format: int32
          type: integer
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          description: Indicates if the page is empty
          type: boolean
      type: object
    PageableObject:
      description: Pageable object containing pagination information
      example:
        paged: true
        pageNumber: 9
        offset: 2
        pageSize: 7
        unpaged: true
        sort:
          unsorted: true
          sorted: true
          empty: true
      properties:
        offset:
          description: Offset of the first element on the page
          format: int64
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        pageSize:
          description: Number of elements per page
          format: int32
          type: integer
        pageNumber:
          description: Current page number (0-based index)
          format: int32
          type: integer
        paged:
          description: Indicates if pagination is applied
          type: boolean
        unpaged:
          description: Indicates if pagination is not applied
          type: boolean
      type: object
    SortObject:
      description: Sorting criteria for the elements
      example:
        unsorted: true
        sorted: true
        empty: true
      properties:
        empty:
          description: Indicates if the sorting criteria is empty
          type: boolean
        unsorted:
          description: Indicates if the elements are unsorted
          type: boolean
        sorted:
          description: Indicates if the elements are sorted
          type: boolean
      type: object
    BadRequestError:
      example:
        code: BAD_REQUEST
        message: Bad request
      properties:
        code:
          description: Error code
          example: BAD_REQUEST
          type: string
        message:
          description: Error message
          example: Bad request
          type: string
      required:
      - code
      - message
      type: object
    NotFoundError:
      example:
        code: NOT_FOUND
        message: Not found
      properties:
        code:
          description: Error code
          example: NOT_FOUND
          type: string
        message:
          description: Error message
          example: Not found
          type: string
      required:
      - code
      - message
      type: object
    UnauthorizedError:
      example:
        code: UNAUTHORIZED
        message: Token is not provided
      properties:
        code:
          description: Error code
          example: UNAUTHORIZED
          type: string
        message:
          description: Error message
          example: Token is not provided
          type: string
      required:
      - code
      - message
      type: object
    ForbiddenError:
      example:
        code: FORBIDDEN
        message: Access is denied. You do not have the necessary permissions to perform
          this action.
      properties:
        code:
          description: Error code
          example: FORBIDDEN
          type: string
        message:
          description: Error message
          example: Access is denied. You do not have the necessary permissions to
            perform this action.
          type: string
      required:
      - code
      - message
      type: object
    ConflictError:
      example:
        code: CONFLICT
        message: Unable to update entity
      properties:
        code:
          description: Error code
          example: CONFLICT
          type: string
        message:
          description: Error message
          example: Unable to update entity
          type: string
      required:
      - code
      - message
      type: object
    UnprocessableEntityError:
      example:
        code: UNPROCESSABLE_ENTITY
        message: Unprocessable entity
      properties:
        code:
          description: Error code
          example: UNPROCESSABLE_ENTITY
          type: string
        message:
          description: Error message
          example: Unprocessable entity
          type: string
      required:
      - code
      - message
      type: object
    SpotActions_request:
      oneOf:
      - $ref: '#/components/schemas/SpotReboot'
    SshKeysCreateImport_request:
      oneOf:
      - $ref: '#/components/schemas/SshKeyCreate'
      - $ref: '#/components/schemas/SshKeyImport'
    SshKeysCreateImport_201_response:
      oneOf:
      - $ref: '#/components/schemas/SshKey'
      - $ref: '#/components/schemas/SshKeyGenerated'
    VmActions_request:
      oneOf:
      - $ref: '#/components/schemas/VmStart'
      - $ref: '#/components/schemas/VmShutdown'
      - $ref: '#/components/schemas/VmReboot'
      - $ref: '#/components/schemas/VmTransfer'
      - $ref: '#/components/schemas/VmClone'
      - $ref: '#/components/schemas/VmEditHardware'
    GetVmConfigs_200_response:
      allOf:
      - $ref: '#/components/schemas/PaginatedResult'
      - properties:
          content:
            items:
              $ref: '#/components/schemas/VmConfiguration'
            type: array
        type: object
      example:
        number: 5
        size: 1
        last: true
        numberOfElements: 5
        totalPages: 0
        pageable:
          paged: true
          pageNumber: 9
          offset: 2
          pageSize: 7
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - volumeType: SSD
          locationName: London
          cost:
            unit: MONTHS
            currency: EUR
            pricePerUnit: 5.479952
          vCpu: 4
          dataCenterName: europe-west2
          osId: 35
          ramGb: 16
          vCpuType: Standard
          cloudNetworkTypes:
          - default
          - multi-cloud
          - isolated
          osVersion: "18.04"
          providerId: 5
          locationId: 6
          dataCenterId: aws-us-west-1
          osType: Ubuntu
          volumeGb: 500
          id: 2456
          providerName: GCP
        - volumeType: SSD
          locationName: London
          cost:
            unit: MONTHS
            currency: EUR
            pricePerUnit: 5.479952
          vCpu: 4
          dataCenterName: europe-west2
          osId: 35
          ramGb: 16
          vCpuType: Standard
          cloudNetworkTypes:
          - default
          - multi-cloud
          - isolated
          osVersion: "18.04"
          providerId: 5
          locationId: 6
          dataCenterId: aws-us-west-1
          osType: Ubuntu
          volumeGb: 500
          id: 2456
          providerName: GCP
        first: true
        totalElements: 6
        empty: true
    Vm_provider:
      example:
        name: Digital Ocean
        id: 22
      properties:
        id:
          description: ID of the cloud provider
          example: 22
          type: integer
        name:
          description: Name of the cloud provider
          example: Digital Ocean
          type: string
      type: object
    Vm_location:
      example:
        name: London
        id: 6
      properties:
        id:
          description: ID of the data center location
          example: 6
          type: integer
        name:
          description: Name of the data center location (city or state)
          example: London
          type: string
      type: object
    Vm_dataCenter:
      example:
        locationName: Pune
        providerId: 5
        locationId: 35
        name: eu-north-1
        id: aws-ap-south-1
        providerName: DO
      properties:
        id:
          description: Data center ID
          example: aws-ap-south-1
          type: string
        name:
          description: Data center name
          example: eu-north-1
          type: string
        providerId:
          description: ID of the cloud provider
          example: 5
          type: integer
        providerName:
          description: Name of the cloud provider
          example: DO
          type: string
        locationId:
          description: ID of the data center location
          example: 35
          type: integer
        locationName:
          description: Name of the data center location
          example: Pune
          type: string
      type: object
    Vm_os:
      example:
        id: 35
        family: Linux
        type: Ubuntu
        version: "22.04"
        architecture: x86-64
      properties:
        id:
          description: ID of the operating system
          example: 35
          type: integer
        family:
          description: Family of the operating system
          example: Linux
          type: string
        architecture:
          description: Architecture of the operating system
          example: x86-64
          type: string
        type:
          description: Type of the operating system
          example: Ubuntu
          type: string
        version:
          description: Version of the operating system
          example: "22.04"
          type: string
      type: object
    Vm_disks_inner:
      example:
        sizeGb: 250
        typeId: 2
        id: 5819
        type: SSD
        isBootable: true
      properties:
        id:
          description: Volume ID
          example: 5819
          type: integer
        sizeGb:
          description: Volume size in gigabytes
          example: 250
          type: integer
        typeId:
          description: ID of the volume type
          example: 2
          type: integer
        type:
          description: Volume type
          example: SSD
          type: string
        isBootable:
          description: Indicates whether the volume is bootable or not
          example: true
          type: boolean
      type: object
    Vm_networks_inner:
      properties:
        id:
          description: Network ID
          example: 9826
          type: integer
        ip:
          description: Network IP
          example: 10.106.0.2
          type: string
        networkTypeId:
          description: ID of the network type
          example: 2
          type: integer
        networkType:
          description: Network type
          example: PRIVATE
          type: string
      type: object
    Vm_securityGroup:
      example:
        name: default
        id: 208
      properties:
        id:
          description: ID of the security group
          example: 208
          type: integer
        name:
          description: Name of the security group
          example: default
          type: string
      type: object
    Vm_cost:
      example:
        unit: MONTHS
        price: 5.479952
        currency: EUR
      properties:
        unit:
          description: Cost period
          example: MONTHS
          type: string
        currency:
          description: Currency of cost
          example: EUR
          type: string
        price:
          description: Cost of the virtual machine for the period
          example: 5.479952
          type: number
      type: object
    VmConfiguration_cost:
      description: Cost of the configuration
      example:
        unit: MONTHS
        currency: EUR
        pricePerUnit: 5.479952
      properties:
        unit:
          description: Cost period
          example: MONTHS
          type: string
        currency:
          description: Currency of the cost
          example: EUR
          type: string
        pricePerUnit:
          description: Cost for the period
          example: 5.479952
          type: number
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
