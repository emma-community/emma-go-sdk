openapi: 3.0.0
info:
  description: |
    **Base URL:** *<u>https://api.emma.ms/external</u>*

    This **Infrastructure API** is for managing the cloud infrastructure within a project.

    To access the API, enter your project, navigate to **Settings** > **Service Apps**, and create a service application. Select the access level **Read**, **Operate**, or **Manage**.

    After creating the service application, copy the **Client ID** and **Client Secret**. Send an API request to the endpoint **/issue-token** as specified in the **Authentication** section of the API documentation. You will receive access and refresh tokens in the response.

    The Bearer access token is a text string, included in the request header, example:

    *-H Authorization: Bearer {token}*

    Use this token for API requests. The access token will expire in 10 minutes. A new access token may be created using the refresh token (without Client ID and Client Secret).
  title: Public EMMA API
  version: 0.0.1
servers:
- description: Public EMMA API
  url: https://api.emma.ms/external
tags:
- description: Authentication operations
  name: Authentication
- description: Viewing data centers
  name: Data centers
- description: Viewing locations
  name: Locations
- description: Viewing operating Systems
  name: Operating systems
- description: Viewing providers
  name: Providers
- description: Security groups operations
  name: Security groups
- description: Spot instances operations
  name: Spot instances
- description: SSH keys operations
  name: SSH keys
- description: Virtual machines operations
  name: Virtual machines
- description: Viewing configurations of virtual machines and spot instances
  name: Compute instances configurations
paths:
  /v1/issue-token:
    post:
      operationId: issueToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
      summary: Issue token
      tags:
      - Authentication
  /v1/refresh-token:
    post:
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
      summary: Refresh token
      tags:
      - Authentication
  /v1/data-centers:
    get:
      operationId: GetDataCenters
      parameters:
      - description: Data center name
        explode: true
        in: query
        name: dataCenterName
        required: false
        schema:
          example: eu-north-1
          type: string
        style: form
      - description: Location ID
        explode: true
        in: query
        name: locationId
        required: false
        schema:
          example: 6
          type: integer
        style: form
      - description: Provider name
        explode: true
        in: query
        name: providerName
        required: false
        schema:
          example: GCP
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DataCenter'
                type: array
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
      security:
      - bearerAuth: []
      summary: Get list of data centers
      tags:
      - Data centers
  /v1/data-centers/{dataCenterId}:
    get:
      operationId: GetDataCenter
      parameters:
      - description: Data center ID
        explode: false
        in: path
        name: dataCenterId
        required: true
        schema:
          example: aws-us-west-1
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataCenter'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Get data center by ID
      tags:
      - Data centers
  /v1/locations:
    get:
      operationId: GetLocations
      parameters:
      - description: Location name
        explode: true
        in: query
        name: name
        required: false
        schema:
          example: Stockholm
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Location'
                type: array
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
      security:
      - bearerAuth: []
      summary: Get list of locations
      tags:
      - Locations
  /v1/locations/{locationId}:
    get:
      operationId: GetLocation
      parameters:
      - description: Location ID
        explode: false
        in: path
        name: locationId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Get location by ID
      tags:
      - Locations
  /v1/operating-systems:
    get:
      operationId: GetOperatingSystems
      parameters:
      - description: Operating system type
        explode: true
        in: query
        name: type
        required: false
        schema:
          example: Ubuntu
          type: string
        style: form
      - description: Operating system architecture
        explode: true
        in: query
        name: architecture
        required: false
        schema:
          example: x86-64
          type: string
        style: form
      - description: Operating system version
        explode: true
        in: query
        name: version
        required: false
        schema:
          example: "18.04"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OperatingSystem'
                type: array
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
      security:
      - bearerAuth: []
      summary: Get list of operating systems
      tags:
      - Operating systems
  /v1/operating-systems/{operatingSystemId}:
    get:
      operationId: GetOperatingSystem
      parameters:
      - description: Operating system ID
        explode: false
        in: path
        name: operatingSystemId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatingSystem'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Get operating system by ID
      tags:
      - Operating systems
  /v1/providers:
    get:
      operationId: GetProviders
      parameters:
      - description: Provider name
        explode: true
        in: query
        name: providerName
        required: false
        schema:
          example: GCP
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Provider'
                type: array
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
      security:
      - bearerAuth: []
      summary: Get list of cloud providers
      tags:
      - Providers
  /v1/providers/{providerId}:
    get:
      operationId: GetProvider
      parameters:
      - description: Provider ID
        explode: false
        in: path
        name: providerId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Provider'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Get cloud provider by ID
      tags:
      - Providers
  /v1/security-groups:
    get:
      operationId: GetSecurityGroups
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SecurityGroup'
                type: array
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Get list of security groups
      tags:
      - Security groups
    post:
      operationId: SecurityGroupCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityGroupRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroup'
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Create security group
      tags:
      - Security groups
  /v1/security-groups/{securityGroupId}:
    delete:
      operationId: SecurityGroupDelete
      parameters:
      - description: Security group id
        explode: false
        in: path
        name: securityGroupId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroup'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
          description: Conflict
      security:
      - bearerAuth: []
      summary: Delete security group
      tags:
      - Security groups
    get:
      operationId: GetSecurityGroup
      parameters:
      - description: Security group id
        explode: false
        in: path
        name: securityGroupId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroup'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Get security group by ID
      tags:
      - Security groups
    put:
      operationId: SecurityGroupUpdate
      parameters:
      - description: Security group id
        explode: false
        in: path
        name: securityGroupId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityGroupRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityGroup'
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
          description: Conflict
      security:
      - bearerAuth: []
      summary: Update security group
      tags:
      - Security groups
  /v1/security-groups/{securityGroupId}/instances:
    get:
      operationId: SecurityGroupInstances
      parameters:
      - description: Security group id
        explode: false
        in: path
        name: securityGroupId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Vm'
                type: array
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Get instances in security group
      tags:
      - Security groups
    post:
      operationId: SecurityGroupInstanceAdd
      parameters:
      - description: Security group id
        explode: false
        in: path
        name: securityGroupId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityGroupInstanceAdd'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vm'
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntityError'
          description: Unprocessable entity
      security:
      - bearerAuth: []
      summary: Add instance to security group
      tags:
      - Security groups
  /v1/spot-instances:
    get:
      operationId: GetSpots
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Vm'
                type: array
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden - Access is denied
      security:
      - bearerAuth: []
      summary: Get list of spot instances
      tags:
      - Spot instances
    post:
      operationId: SpotCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpotCreate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vm'
          description: Spot instance created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden - Access is denied
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntityError'
          description: Unprocessable entity
      security:
      - bearerAuth: []
      summary: Create spot instance
      tags:
      - Spot instances
  /v1/spot-instances/{spotInstanceId}:
    delete:
      operationId: SpotDelete
      parameters:
      - description: Spot instance id
        explode: false
        in: path
        name: spotInstanceId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vm'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden - Access is denied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Delete spot instance
      tags:
      - Spot instances
    get:
      operationId: GetSpot
      parameters:
      - description: Spot instance id
        explode: false
        in: path
        name: spotInstanceId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vm'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden - Access is denied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Get spot instance by id
      tags:
      - Spot instances
  /v1/spot-instances/{spotInstanceId}/actions:
    post:
      operationId: SpotActions
      parameters:
      - description: Spot instance id
        explode: false
        in: path
        name: spotInstanceId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpotActions_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vm'
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden - Access is denied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Perform actions with a spot instance
      tags:
      - Spot instances
  /v1/ssh-keys:
    get:
      operationId: SshKeys
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SshKey'
                type: array
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
      security:
      - bearerAuth: []
      summary: Get list of SSH keys
      tags:
      - SSH keys
    post:
      operationId: SshKeysCreateImport
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SshKeysCreateImport_request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SshKeysCreateImport_201_response'
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden - Access is denied
      security:
      - bearerAuth: []
      summary: Create or import SSH key
      tags:
      - SSH keys
  /v1/ssh-keys/{sshKeyId}:
    delete:
      operationId: SshKeyDelete
      parameters:
      - description: SSH key ID
        explode: false
        in: path
        name: sshKeyId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "204":
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Delete SSH keys
      tags:
      - SSH keys
    get:
      operationId: GetSshKey
      parameters:
      - description: SSH key ID
        explode: false
        in: path
        name: sshKeyId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SshKey'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Get SSH key by id
      tags:
      - SSH keys
    put:
      operationId: SshKeyUpdate
      parameters:
      - description: SSH key ID
        explode: false
        in: path
        name: sshKeyId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SshKeyUpdate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SshKey'
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Update SSH keys
      tags:
      - SSH keys
  /v1/vms:
    get:
      operationId: GetVms
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Vm'
                type: array
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden - Access is denied
      security:
      - bearerAuth: []
      summary: Get list of virtual machines
      tags:
      - Virtual machines
    post:
      operationId: VmCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VmCreate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vm'
          description: Virtual machine created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden - Access is denied
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntityError'
          description: Unprocessable entity
      security:
      - bearerAuth: []
      summary: Create virtual machine
      tags:
      - Virtual machines
  /v1/vms/{vmId}:
    delete:
      operationId: VmDelete
      parameters:
      - description: Virtual machine ID
        explode: false
        in: path
        name: vmId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vm'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden - Access is denied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Delete virtual machine
      tags:
      - Virtual machines
    get:
      operationId: GetVm
      parameters:
      - description: Virtual machine ID
        explode: false
        in: path
        name: vmId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vm'
          description: Successful operation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden - Access is denied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Get virtual machine by id
      tags:
      - Virtual machines
  /v1/vms/{vmId}/actions:
    post:
      operationId: VmActions
      parameters:
      - description: Virtual machine ID
        explode: false
        in: path
        name: vmId
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VmActions_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vm'
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden - Access is denied
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
          description: Not found
      security:
      - bearerAuth: []
      summary: Perform actions with a virtual machine
      tags:
      - Virtual machines
  /v1/vms-configs:
    get:
      operationId: GetVmConfigs
      parameters:
      - description: Provider ID
        explode: true
        in: query
        name: providerId
        required: false
        schema:
          example: 5
          type: integer
        style: form
      - description: Location ID
        explode: true
        in: query
        name: locationId
        required: false
        schema:
          example: 6
          type: integer
        style: form
      - description: Data center ID
        explode: true
        in: query
        name: dataCenterId
        required: false
        schema:
          example: aws-us-west-1
          type: string
        style: form
      - description: Cloud network type
        explode: true
        in: query
        name: cloudNetworkType
        required: false
        schema:
          enum:
          - isolated
          - multi-cloud
          - default
          example: multi-cloud
          type: string
        style: form
      - description: Compute instance vCPU type
        explode: true
        in: query
        name: vCpuType
        required: false
        schema:
          enum:
          - shared
          - standard
          - hpc
          example: Standard
          type: string
        style: form
      - description: Compute instance vCPU
        explode: true
        in: query
        name: vCpu
        required: false
        schema:
          example: 4
          type: integer
        style: form
      - description: Compute instance vCPU minimum
        explode: true
        in: query
        name: vCpuMin
        required: false
        schema:
          example: 1
          type: integer
        style: form
      - description: Compute instance vCPU maximum
        explode: true
        in: query
        name: vCpuMax
        required: false
        schema:
          example: 8
          type: integer
        style: form
      - description: Compute instance RAM (GB)
        explode: true
        in: query
        name: ramGb
        required: false
        schema:
          example: 16
          type: integer
        style: form
      - description: Compute instance RAM (GB) minimum
        explode: true
        in: query
        name: ramGbMin
        required: false
        schema:
          example: 8
          type: integer
        style: form
      - description: Compute instance RAM (GB) maximum
        explode: true
        in: query
        name: ramGbMax
        required: false
        schema:
          example: 32
          type: integer
        style: form
      - description: Compute instance volume (GB)
        explode: true
        in: query
        name: volumeGb
        required: false
        schema:
          example: 500
          type: integer
        style: form
      - description: Compute instance volume minimum (GB)
        explode: true
        in: query
        name: volumeGbMin
        required: false
        schema:
          example: 250
          type: integer
        style: form
      - description: Compute instance volume maximun (GB)
        explode: true
        in: query
        name: volumeGbMax
        required: false
        schema:
          example: 1000
          type: integer
        style: form
      - description: Compute instance volume type
        explode: true
        in: query
        name: volumeType
        required: false
        schema:
          enum:
          - ssd
          - ssd-plus
          example: ssd
          type: string
        style: form
      - description: Instance price minimum
        explode: true
        in: query
        name: priceMin
        required: false
        schema:
          type: number
        style: form
      - description: Instance price maximum
        explode: true
        in: query
        name: priceMax
        required: false
        schema:
          type: number
        style: form
      - description: Page number
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 0
          type: integer
        style: form
      - description: Query size
        explode: true
        in: query
        name: size
        required: false
        schema:
          example: 100
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVmConfigs_200_response'
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden - Access is denied
      security:
      - bearerAuth: []
      summary: Search available configurations for virtual machine creation
      tags:
      - Compute instances configurations
  /v1/spots-configs:
    get:
      operationId: GetSpotConfigs
      parameters:
      - description: Provider ID
        explode: true
        in: query
        name: providerId
        required: false
        schema:
          example: 5
          type: integer
        style: form
      - description: Location ID
        explode: true
        in: query
        name: locationId
        required: false
        schema:
          example: 6
          type: integer
        style: form
      - description: Data center ID
        explode: true
        in: query
        name: dataCenterId
        required: false
        schema:
          example: aws-us-west-1
          type: string
        style: form
      - description: Cloud network type
        explode: true
        in: query
        name: cloudNetworkType
        required: false
        schema:
          enum:
          - isolated
          - multi-cloud
          - default
          example: multi-cloud
          type: string
        style: form
      - description: Compute instance vCPU type
        explode: true
        in: query
        name: vCpuType
        required: false
        schema:
          enum:
          - shared
          - standard
          - hpc
          example: Standard
          type: string
        style: form
      - description: Compute instance vCPU
        explode: true
        in: query
        name: vCpu
        required: false
        schema:
          example: 4
          type: integer
        style: form
      - description: Compute instance vCPU minimum
        explode: true
        in: query
        name: vCpuMin
        required: false
        schema:
          example: 1
          type: integer
        style: form
      - description: Compute instance vCPU maximum
        explode: true
        in: query
        name: vCpuMax
        required: false
        schema:
          example: 8
          type: integer
        style: form
      - description: Compute instance RAM (GB)
        explode: true
        in: query
        name: ramGb
        required: false
        schema:
          example: 16
          type: integer
        style: form
      - description: Compute instance RAM (GB) minimum
        explode: true
        in: query
        name: ramGbMin
        required: false
        schema:
          example: 8
          type: integer
        style: form
      - description: Compute instance RAM (GB) maximum
        explode: true
        in: query
        name: ramGbMax
        required: false
        schema:
          example: 32
          type: integer
        style: form
      - description: Compute instance volume (GB)
        explode: true
        in: query
        name: volumeGb
        required: false
        schema:
          example: 500
          type: integer
        style: form
      - description: Compute instance volume minimum (GB)
        explode: true
        in: query
        name: volumeGbMin
        required: false
        schema:
          example: 250
          type: integer
        style: form
      - description: Compute instance volume maximun (GB)
        explode: true
        in: query
        name: volumeGbMax
        required: false
        schema:
          example: 1000
          type: integer
        style: form
      - description: Compute instance volume type
        explode: true
        in: query
        name: volumeType
        required: false
        schema:
          enum:
          - ssd
          - ssd-plus
          example: ssd
          type: string
        style: form
      - description: Instance price minimum
        explode: true
        in: query
        name: priceMin
        required: false
        schema:
          type: number
        style: form
      - description: Instance price maximum
        explode: true
        in: query
        name: priceMax
        required: false
        schema:
          type: number
        style: form
      - description: Page number
        explode: true
        in: query
        name: page
        required: false
        schema:
          example: 0
          type: integer
        style: form
      - description: Query size
        explode: true
        in: query
        name: size
        required: false
        schema:
          example: 100
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVmConfigs_200_response'
          description: Successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenError'
          description: Forbidden - Access is denied
      security:
      - bearerAuth: []
      summary: Search available configurations for spot instance creation
      tags:
      - Compute instances configurations
components:
  parameters:
    applicationId:
      description: Application ID
      explode: false
      in: path
      name: applicationId
      required: true
      schema:
        type: integer
      style: simple
    cloudNetworkType:
      description: Cloud network type
      explode: true
      in: query
      name: cloudNetworkType
      required: false
      schema:
        enum:
        - isolated
        - multi-cloud
        - default
        example: multi-cloud
        type: string
      style: form
    estoreAppId:
      description: ID of an application available for set up
      explode: false
      in: path
      name: estoreAppId
      required: true
      schema:
        type: integer
      style: simple
    backupId:
      description: Backup ID
      explode: false
      in: path
      name: backupId
      required: true
      schema:
        type: integer
      style: simple
    backupPolicyId:
      description: Backup policy ID
      explode: false
      in: path
      name: backupPolicyId
      required: true
      schema:
        type: integer
      style: simple
    dataCenterId:
      description: Data center ID
      explode: false
      in: path
      name: dataCenterId
      required: true
      schema:
        example: aws-us-west-1
        type: string
      style: simple
    dataCenterName:
      description: Data center name
      explode: true
      in: query
      name: dataCenterName
      required: false
      schema:
        example: eu-north-1
        type: string
      style: form
    dataCenterIdQuery:
      description: Data center ID
      explode: true
      in: query
      name: dataCenterId
      required: false
      schema:
        example: aws-us-west-1
        type: string
      style: form
    instanceId:
      description: Instance ID in backup policy
      explode: false
      in: path
      name: instanceId
      required: true
      schema:
        type: integer
      style: simple
    kClusterId:
      description: Kubernetes cluster ID
      explode: false
      in: path
      name: kClusterId
      required: true
      schema:
        type: integer
      style: simple
    locationId:
      description: Location ID
      explode: false
      in: path
      name: locationId
      required: true
      schema:
        type: integer
      style: simple
    locationName:
      description: Location name
      explode: true
      in: query
      name: name
      required: false
      schema:
        example: Stockholm
        type: string
      style: form
    locationIdQuery:
      description: Location ID
      explode: true
      in: query
      name: locationId
      required: false
      schema:
        example: 6
        type: integer
      style: form
    nodeId:
      description: ID of an instance (node)
      explode: false
      in: path
      name: nodeId
      required: true
      schema:
        type: integer
      style: simple
    operatingSystemId:
      description: Operating system ID
      explode: false
      in: path
      name: operatingSystemId
      required: true
      schema:
        type: integer
      style: simple
    osType:
      description: Operating system type
      explode: true
      in: query
      name: type
      required: false
      schema:
        example: Ubuntu
        type: string
      style: form
    osArchitecture:
      description: Operating system architecture
      explode: true
      in: query
      name: architecture
      required: false
      schema:
        example: x86-64
        type: string
      style: form
    osVersion:
      description: Operating system version
      explode: true
      in: query
      name: version
      required: false
      schema:
        example: "18.04"
        type: string
      style: form
    pageQuery:
      description: Page number
      explode: true
      in: query
      name: page
      required: false
      schema:
        example: 0
        type: integer
      style: form
    priceMin:
      description: Instance price minimum
      explode: true
      in: query
      name: priceMin
      required: false
      schema:
        type: number
      style: form
    priceMax:
      description: Instance price maximum
      explode: true
      in: query
      name: priceMax
      required: false
      schema:
        type: number
      style: form
    projectId:
      description: Project ID
      explode: false
      in: path
      name: projectId
      required: true
      schema:
        type: integer
      style: simple
    providerId:
      description: Provider ID
      explode: false
      in: path
      name: providerId
      required: true
      schema:
        type: integer
      style: simple
    providerIdQuery:
      description: Provider ID
      explode: true
      in: query
      name: providerId
      required: false
      schema:
        example: 5
        type: integer
      style: form
    providerName:
      description: Provider name
      explode: true
      in: query
      name: providerName
      required: false
      schema:
        example: GCP
        type: string
      style: form
    ramGb:
      description: Compute instance RAM (GB)
      explode: true
      in: query
      name: ramGb
      required: false
      schema:
        example: 16
        type: integer
      style: form
    ramGbMin:
      description: Compute instance RAM (GB) minimum
      explode: true
      in: query
      name: ramGbMin
      required: false
      schema:
        example: 8
        type: integer
      style: form
    ramGbMax:
      description: Compute instance RAM (GB) maximum
      explode: true
      in: query
      name: ramGbMax
      required: false
      schema:
        example: 32
        type: integer
      style: form
    reservedIpId:
      description: Reserved IP id
      explode: false
      in: path
      name: reservedIpId
      required: true
      schema:
        type: integer
      style: simple
    securityGroupId:
      description: Security group id
      explode: false
      in: path
      name: securityGroupId
      required: true
      schema:
        type: integer
      style: simple
    securityGroupRuleId:
      description: Security group rule id
      explode: false
      in: path
      name: securityGroupRuleId
      required: true
      schema:
        type: integer
      style: simple
    sizeQuery:
      description: Query size
      explode: true
      in: query
      name: size
      required: false
      schema:
        example: 100
        type: integer
      style: form
    spotInstanceId:
      description: Spot instance id
      explode: false
      in: path
      name: spotInstanceId
      required: true
      schema:
        type: integer
      style: simple
    sshKeyId:
      description: SSH key ID
      explode: false
      in: path
      name: sshKeyId
      required: true
      schema:
        type: integer
      style: simple
    vCpu:
      description: Compute instance vCPU
      explode: true
      in: query
      name: vCpu
      required: false
      schema:
        example: 4
        type: integer
      style: form
    vCpuMin:
      description: Compute instance vCPU minimum
      explode: true
      in: query
      name: vCpuMin
      required: false
      schema:
        example: 1
        type: integer
      style: form
    vCpuMax:
      description: Compute instance vCPU maximum
      explode: true
      in: query
      name: vCpuMax
      required: false
      schema:
        example: 8
        type: integer
      style: form
    vCpuType:
      description: Compute instance vCPU type
      explode: true
      in: query
      name: vCpuType
      required: false
      schema:
        enum:
        - shared
        - standard
        - hpc
        example: Standard
        type: string
      style: form
    vmId:
      description: Virtual machine ID
      explode: false
      in: path
      name: vmId
      required: true
      schema:
        type: integer
      style: simple
    vmHardwareConfig:
      description: Virtual machine hardware configuration ID
      explode: true
      in: query
      name: vmHardwareConfig
      required: false
      schema:
        type: integer
      style: form
    volumeGb:
      description: Compute instance volume (GB)
      explode: true
      in: query
      name: volumeGb
      required: false
      schema:
        example: 500
        type: integer
      style: form
    volumeGbMin:
      description: Compute instance volume minimum (GB)
      explode: true
      in: query
      name: volumeGbMin
      required: false
      schema:
        example: 250
        type: integer
      style: form
    volumeGbMax:
      description: Compute instance volume maximun (GB)
      explode: true
      in: query
      name: volumeGbMax
      required: false
      schema:
        example: 1000
        type: integer
      style: form
    volumeType:
      description: Compute instance volume type
      explode: true
      in: query
      name: volumeType
      required: false
      schema:
        enum:
        - ssd
        - ssd-plus
        example: ssd
        type: string
      style: form
  schemas:
    Credentials:
      example:
        clientId: ad6f8c5c-223f-4102-8664-8044b84864e2
        clientSecret: e0eb8a09-b7fe-4acc-a72b-79ce0dd26068
      properties:
        clientId:
          example: ad6f8c5c-223f-4102-8664-8044b84864e2
          type: string
        clientSecret:
          example: e0eb8a09-b7fe-4acc-a72b-79ce0dd26068
          type: string
      required:
      - clientId
      - clientSecret
      type: object
    DataCenter:
      example:
        locationName: Stockholm
        providerId: 5
        locationId: 15
        name: eu-north-1
        id: aws-us-west-1
        providerName: AWS
      properties:
        id:
          example: aws-us-west-1
          type: string
        name:
          example: eu-north-1
          type: string
        providerId:
          example: 5
          type: integer
        providerName:
          example: AWS
          type: string
        locationId:
          example: 15
          type: integer
        locationName:
          example: Stockholm
          type: string
      type: object
    Location:
      example:
        name: London
        id: 18
      properties:
        id:
          example: 18
          type: integer
        name:
          example: London
          type: string
      type: object
    OperatingSystem:
      example:
        id: 18
        family: Linux
        type: Ubuntu
        version: "18.04"
        architecture: x86-64
      properties:
        id:
          example: 18
          type: integer
        family:
          example: Linux
          type: string
        type:
          example: Ubuntu
          type: string
        architecture:
          example: x86-64
          type: string
        version:
          example: "18.04"
          type: string
      type: object
    Provider:
      example:
        name: GCP
        id: 5
      properties:
        id:
          example: 5
          type: integer
        name:
          example: GCP
          type: string
      type: object
    RefreshToken:
      example:
        refreshToken: ad6f8c5js6dkj;s43dv3jljhf9fxej4236235tgdgrthreth8044b84864e2
      properties:
        refreshToken:
          description: Refresh token
          example: ad6f8c5js6dkj;s43dv3jljhf9fxej4236235tgdgrthreth8044b84864e2
          type: string
      required:
      - refreshToken
      type: object
    SecurityGroup:
      example:
        createdByName: Jack Rur
        createdAt: 2023-08-31T09:26:19.347+00:00
        modifiedByName: Jack Rur
        createdBy: 123
        modifiedAt: 2023-08-31T09:26:19.347+00:00
        synchronizationStatus: SYNCHRONIZED
        name: default
        recomposingStatus: RECOMPOSED
        modifiedBy: 123
        rules:
        - protocol: TCP
          isMutable: true
          ipRange: 0.0.0.0/0
          type: Custom TCP
          ports: "30321"
          policy: ALLOW
          direction: INBOUND
        - protocol: TCP
          isMutable: true
          ipRange: 0.0.0.0/0
          type: Custom TCP
          ports: "30321"
          policy: ALLOW
          direction: INBOUND
        id: 5
        lastModificationErrorDescription: Unable to update security group
      properties:
        id:
          example: 5
          type: integer
        name:
          example: default
          type: string
        createdBy:
          example: 123
          type: integer
        createdByName:
          example: Jack Rur
          type: string
        modifiedBy:
          example: 123
          type: integer
        modifiedByName:
          example: Jack Rur
          type: string
        createdAt:
          example: 2023-08-31T09:26:19.347+00:00
          type: string
        modifiedAt:
          example: 2023-08-31T09:26:19.347+00:00
          type: string
        synchronizationStatus:
          enum:
          - SYNCHRONIZED
          - DESYNCHRONIZED
          - SYNCHRONIZING
          type: string
        recomposingStatus:
          enum:
          - RECOMPOSED
          - RECOMPOSING
          type: string
        lastModificationErrorDescription:
          example: Unable to update security group
          type: string
        rules:
          items:
            $ref: '#/components/schemas/SecurityGroupRule'
          type: array
      type: object
    SecurityGroupRequest:
      example:
        name: new_default
        rules:
        - protocol: TCP
          ipRange: 0.0.0.0/0
          ports: 1-30321
          direction: INBOUND
        - protocol: TCP
          ipRange: 0.0.0.0/0
          ports: 1-30321
          direction: INBOUND
      properties:
        name:
          description: Name of the security group
          example: new_default
          type: string
        rules:
          items:
            $ref: '#/components/schemas/SecurityGroupRuleRequest'
          type: array
      required:
      - name
      - rules
      type: object
    SecurityGroupInstanceAdd:
      example:
        instanceId: 8003
      properties:
        instanceId:
          example: 8003
          type: integer
      type: object
    SecurityGroupRule:
      example:
        protocol: TCP
        isMutable: true
        ipRange: 0.0.0.0/0
        type: Custom TCP
        ports: "30321"
        policy: ALLOW
        direction: INBOUND
      properties:
        type:
          example: Custom TCP
          type: string
        policy:
          example: ALLOW
          type: string
        direction:
          example: INBOUND
          type: string
        protocol:
          example: TCP
          type: string
        ports:
          example: "30321"
          type: string
        ipRange:
          example: 0.0.0.0/0
          type: string
        isMutable:
          example: true
          type: boolean
      type: object
    SecurityGroupRuleRequest:
      example:
        protocol: TCP
        ipRange: 0.0.0.0/0
        ports: 1-30321
        direction: INBOUND
      properties:
        direction:
          description: Direction of network traffic
          enum:
          - INBOUND
          - OUTBOUND
          example: INBOUND
          type: string
        protocol:
          description: Network protocol
          enum:
          - all
          - TCP
          - SCTP
          - GRE
          - ESP
          - AH
          - UDP
          - ICMP
          example: TCP
          type: string
        ports:
          description: Port
          example: 1-30321
          type: string
        ipRange:
          description: Range of IPs for rule
          example: 0.0.0.0/0
          type: string
      required:
      - direction
      - ipRange
      - ports
      - protocol
      type: object
    SpotCreate:
      example:
        securityGroupId: 208
        volumeType: ssd
        vCpu: 4
        price: 0.002635
        dataCenterId: aws-us-west-1
        name: spot-default
        volumeGb: 16
        osId: 35
        cloudNetworkType: multi-cloud
        ramGb: 1
        sshKeyId: 124
        vCpuType: shared
      properties:
        name:
          description: Spot instance name
          example: spot-default
          type: string
        dataCenterId:
          description: Provider's data center ID
          example: aws-us-west-1
          type: string
        osId:
          description: Operating system ID
          example: 35
          type: integer
        cloudNetworkType:
          description: Cloud network type
          enum:
          - isolated
          - multi-cloud
          - default
          example: multi-cloud
          type: string
        vCpuType:
          description: vCPU type
          enum:
          - shared
          - standard
          - hpc
          example: shared
          type: string
        vCpu:
          description: Number of virtual Central Processing Units (vCPUs)
          example: 4
          type: integer
        ramGb:
          description: Capacity of RAM in gigabytes
          example: 1
          type: integer
        volumeType:
          description: Volume type
          enum:
          - ssd
          - ssd-plus
          example: ssd
          type: string
        volumeGb:
          description: Capacity of volume in gigabytes
          example: 16
          type: integer
        sshKeyId:
          description: SSH-key ID
          example: 124
          type: integer
        securityGroupId:
          description: Security group ID
          example: 208
          type: integer
        price:
          description: User offer price
          example: 0.002635
          type: number
      required:
      - cloudNetworkType
      - dataCenterId
      - name
      - osId
      - price
      - ramGb
      - sshKeyId
      - vCpu
      - vCpuType
      - volumeGb
      - volumeType
      type: object
    SpotReboot:
      properties:
        action:
          description: Action with spot instance
          enum:
          - reboot
          example: reboot
          type: string
      required:
      - action
      type: object
    SshKey:
      example:
        createdAt: 2021-11-26T14:54:11
        createdByName: Automation User
        name: mykey
        fingerprint: f2:60:34:c8:34:b2:a3:da:22:f9:12:f9:03:f0:33:c0
        id: 60
        keyType: RSA
        key: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMwmR5qB5VU9X4VYQJjXDT3qketmrrqEABSNAEEkfTtOtIZrKJmMST9bEus/5FFm9b5w5unyZaW39PUe/QDrxwB8Y3b+DTyA1LcRzd2UhCQsybh9DKbDb+HX0lKrgIeUkadwIq5gE2nx3VBQUifa2BGYC7b+FtFLjtHaOwWIvuQC7AYozCB+B69P3q8tK0D9UXlLyGGsBe8MYjl0mV9IumWS7WBz2VDqLhAvFIzpcERVstepLM9Y4mePpDhfQqt85MRIrqTWikhZExwbRmbSFCZHPi85Os2oxSHoXH1NMSBNEt3yJB4Cn5f2nBV45ysd0HcQmn7eLmRPzbkmhfYoOL
          Lego%20Group@localhost
        createdById: 123
      properties:
        id:
          example: 60
          type: integer
        name:
          example: mykey
          type: string
        key:
          example: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMwmR5qB5VU9X4VYQJjXDT3qketmrrqEABSNAEEkfTtOtIZrKJmMST9bEus/5FFm9b5w5unyZaW39PUe/QDrxwB8Y3b+DTyA1LcRzd2UhCQsybh9DKbDb+HX0lKrgIeUkadwIq5gE2nx3VBQUifa2BGYC7b+FtFLjtHaOwWIvuQC7AYozCB+B69P3q8tK0D9UXlLyGGsBe8MYjl0mV9IumWS7WBz2VDqLhAvFIzpcERVstepLM9Y4mePpDhfQqt85MRIrqTWikhZExwbRmbSFCZHPi85Os2oxSHoXH1NMSBNEt3yJB4Cn5f2nBV45ysd0HcQmn7eLmRPzbkmhfYoOL
            Lego%20Group@localhost
          type: string
        fingerprint:
          example: f2:60:34:c8:34:b2:a3:da:22:f9:12:f9:03:f0:33:c0
          type: string
        keyType:
          example: RSA
          type: string
        createdAt:
          example: 2021-11-26T14:54:11
          type: string
        createdByName:
          example: Automation User
          type: string
        createdById:
          example: 123
          type: integer
      type: object
    SshKeyGenerated:
      properties:
        id:
          example: 60
          type: integer
        name:
          example: mykey
          type: string
        key:
          example: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMwmR5qB5VU9X4VYQJjXDT3qketmrrqEABSNAEEkfTtOtIZrKJmMST9bEus/5FFm9b5w5unyZaW39PUe/QDrxwB8Y3b+DTyA1LcRzd2UhCQsybh9DKbDb+HX0lKrgIeUkadwIq5gE2nx3VBQUifa2BGYC7b+FtFLjtHaOwWIvuQC7AYozCB+B69P3q8tK0D9UXlLyGGsBe8MYjl0mV9IumWS7WBz2VDqLhAvFIzpcERVstepLM9Y4mePpDhfQqt85MRIrqTWikhZExwbRmbSFCZHPi85Os2oxSHoXH1NMSBNEt3yJB4Cn5f2nBV45ysd0HcQmn7eLmRPzbkmhfYoOL
            Lego%20Group@localhost
          type: string
        fingerprint:
          example: f2:60:34:c8:34:b2:a3:da:22:f9:12:f9:03:f0:33:c0
          type: string
        keyType:
          example: RSA
          type: string
        privateKey:
          example: '-----BEGIN RSA PRIVATE KEY-----MIIEpAIBAAKCAQEA72Raj49bugh+eX+tUWmHUT+KKzYNcvBs8F+/GTHHRcUwcYhs-----END
            RSA PRIVATE KEY-----'
          type: string
        createdAt:
          example: 2021-11-26T14:54:11
          type: string
        createdByName:
          example: Automation User
          type: string
        createdById:
          example: 123
          type: integer
      type: object
    SshKeyCreate:
      properties:
        name:
          example: mykey
          type: string
        keyType:
          enum:
          - RSA
          - ED25519
          example: RSA
          type: string
      required:
      - keyType
      - name
      type: object
    SshKeyImport:
      properties:
        name:
          example: mykey
          type: string
        key:
          example: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMwmR5qB5VU9X4VYQJjXDT3qketmrrqEABSNAEEkfTtOtIZrKJmMST9bEus/5FFm9b5w5unyZaW39PUe/QDrxwB8Y3b+DTyA1LcRzd2UhCQsybh9DKbDb+HX0lKrgIeUkadwIq5gE2nx3VBQUifa2BGYC7b+FtFLjtHaOwWIvuQC7AYozCB+B69P3q8tK0D9UXlLyGGsBe8MYjl0mV9IumWS7WBz2VDqLhAvFIzpcERVstepLM9Y4mePpDhfQqt85MRIrqTWikhZExwbRmbSFCZHPi85Os2oxSHoXH1NMSBNEt3yJB4Cn5f2nBV45ysd0HcQmn7eLmRPzbkmhfYoOL
            Lego%20Group@localhost
          type: string
      required:
      - key
      - name
      type: object
    SshKeyUpdate:
      example:
        name: mykey
      properties:
        name:
          example: mykey
          type: string
      required:
      - name
      type: object
    Token:
      example:
        expiresIn: 300
        notBeforePolicy: 1668610246
        sessionState: 33fce1d3-c51e-469f-b2cb-44c67b4f512e
        otherClaims: "{}"
        idToken: 0
        accessToken: eyJhbGcih3In0.eyJleHAiOjE3MDA2Mzc4NjksImlhdCI6MTcwMDYzNzU2OSwianRpIjoiYTMwOGRhMDItYmIwNy00MjVkLTk2NzUtNzFiMjczNzdkMjYxIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLmVtbWEubXMvYXV0aC9yZWFsbXMvZW1tYSIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIzMDg1YzdlOS1kYjExLT.VCXC-D43-8zp7FVYSNgbbz8KUASAWlFcCqj6wJwif_FReGSIofgDoya54bIBPEugVq0Is7TmbBaXCzkEEASxkMxrCg7r6-7XBWC3P5w8It8Kc-wdVRgjVGSnzz4B8hA
        tokenType: Bearer
        refreshExpiresIn: 1800
        refreshToken: eyJhIwOGIyYi00YzgwLTQ5NTQtODY4Ni02YmY2OWJiYjg0ZjcifQ.eyJleHAiOjE3MDA2MzkzNjksImlhdCI6MTcwMDYzNzU2OSwianRpIjoiYTIxMjRmZWQtODA5MS00ZDAyLTljtYXBpIiwic2Vzc2lvbl9zdGF0ZSI6IjMzZmNlMWQzLWM1MWUtNDY5Zi1iMmNiLTQ0YzY3YjRmNTEyZSIsInNjb3BlIjoidXNlckF0dHJpYnV0ZSBw
      properties:
        otherClaims:
          type: object
        accessToken:
          example: eyJhbGcih3In0.eyJleHAiOjE3MDA2Mzc4NjksImlhdCI6MTcwMDYzNzU2OSwianRpIjoiYTMwOGRhMDItYmIwNy00MjVkLTk2NzUtNzFiMjczNzdkMjYxIiwiaXNzIjoiaHR0cHM6Ly9hdXRoLmVtbWEubXMvYXV0aC9yZWFsbXMvZW1tYSIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIzMDg1YzdlOS1kYjExLT.VCXC-D43-8zp7FVYSNgbbz8KUASAWlFcCqj6wJwif_FReGSIofgDoya54bIBPEugVq0Is7TmbBaXCzkEEASxkMxrCg7r6-7XBWC3P5w8It8Kc-wdVRgjVGSnzz4B8hA
          type: string
        expiresIn:
          example: 300
          type: integer
        refreshExpiresIn:
          example: 1800
          type: integer
        refreshToken:
          example: eyJhIwOGIyYi00YzgwLTQ5NTQtODY4Ni02YmY2OWJiYjg0ZjcifQ.eyJleHAiOjE3MDA2MzkzNjksImlhdCI6MTcwMDYzNzU2OSwianRpIjoiYTIxMjRmZWQtODA5MS00ZDAyLTljtYXBpIiwic2Vzc2lvbl9zdGF0ZSI6IjMzZmNlMWQzLWM1MWUtNDY5Zi1iMmNiLTQ0YzY3YjRmNTEyZSIsInNjb3BlIjoidXNlckF0dHJpYnV0ZSBw
          type: string
        tokenType:
          example: Bearer
          type: string
        idToken:
          type: integer
          example: null
        notBeforePolicy:
          example: 1668610246
          type: integer
        sessionState:
          example: 33fce1d3-c51e-469f-b2cb-44c67b4f512e
          type: string
      type: object
    Vm:
      example:
        createdByName: Automation User
        cost:
          unit: MONTHS
          price: 5.479952
          currency: EUR
        os:
          id: 35
          family: Linux
          type: Ubuntu
          version: "22.04"
          architecture: x86-64
        vCpu: 1
        disks:
        - sizeGb: 250
          typeId: 2
          id: 5819
          type: SSD
          isBootable: true
        - sizeGb: 250
          typeId: 2
          id: 5819
          type: SSD
          isBootable: true
        dataCenter:
          locationName: Pune
          providerId: 5
          locationId: 35
          name: eu-north-1
          id: aws-ap-south-1
          providerName: DO
        modifiedAt: 2021-11-26T14:54:11
        securityGroup:
          name: default
          id: 208
        networks:
        - id: 9826
          ip: 10.106.0.2
          networkTypeId: 2
          networkType: PRIVATE
        - id: 9825
          ip: 134.122.100.131
          networkTypeId: 1
          networkType: PUBLIC
        userName: root
        ramGb: 2
        sshKeyId: 123
        vCpuType: shared
        createdAt: 2021-11-26T14:54:11
        modifiedByName: Automation User
        modifiedById: 123
        provider:
          name: Digital Ocean
          id: 22
        name: vm-default-e08149hp
        location:
          name: London
          id: 6
        id: 8100
        cloudNetworkType: multi-cloud
        projectId: 933
        createdById: 123
        status: POWERED_ON
      properties:
        id:
          example: 8100
          type: integer
        createdAt:
          example: 2021-11-26T14:54:11
          type: string
        createdByName:
          example: Automation User
          type: string
        createdById:
          example: 123
          type: integer
        modifiedAt:
          example: 2021-11-26T14:54:11
          type: string
        modifiedByName:
          example: Automation User
          type: string
        modifiedById:
          example: 123
          type: integer
        name:
          example: vm-default-e08149hp
          type: string
        projectId:
          example: 933
          type: integer
        status:
          enum:
          - POWERED_ON
          - POWERED_OFF
          - BUSY
          - DRAFT
          example: POWERED_ON
          type: string
        provider:
          $ref: '#/components/schemas/Vm_provider'
        location:
          $ref: '#/components/schemas/Vm_location'
        dataCenter:
          $ref: '#/components/schemas/Vm_dataCenter'
        os:
          $ref: '#/components/schemas/Vm_os'
        vCpu:
          example: 1
          type: integer
        vCpuType:
          description: vCPU type
          enum:
          - shared
          - standard
          - hpc
          example: shared
          type: string
        cloudNetworkType:
          description: Cloud network type
          enum:
          - isolated
          - multi-cloud
          - default
          example: multi-cloud
          type: string
        ramGb:
          example: 2
          type: integer
        disks:
          items:
            $ref: '#/components/schemas/Vm_disks_inner'
          type: array
        networks:
          example:
          - id: 9826
            ip: 10.106.0.2
            networkTypeId: 2
            networkType: PRIVATE
          - id: 9825
            ip: 134.122.100.131
            networkTypeId: 1
            networkType: PUBLIC
          items:
            $ref: '#/components/schemas/Vm_networks_inner'
          type: array
        securityGroup:
          $ref: '#/components/schemas/Vm_securityGroup'
        sshKeyId:
          example: 123
          type: integer
        userName:
          example: root
          type: string
        cost:
          $ref: '#/components/schemas/Vm_cost'
      type: object
    VmCreate:
      example:
        securityGroupId: 208
        volumeType: ssd
        vCpu: 2
        dataCenterId: aws-us-west-1
        name: vm-test1
        volumeGb: 16
        osId: 5
        cloudNetworkType: multi-cloud
        ramGb: 1
        sshKeyId: 124
        vCpuType: shared
      properties:
        name:
          description: Virtual machine name
          example: vm-test1
          type: string
        dataCenterId:
          description: Provider's data center ID
          example: aws-us-west-1
          type: string
        osId:
          description: Operating system ID
          example: 5
          type: integer
        cloudNetworkType:
          description: Cloud network type
          enum:
          - isolated
          - multi-cloud
          - default
          example: multi-cloud
          type: string
        vCpuType:
          description: vCPU type
          enum:
          - shared
          - standard
          - hpc
          example: shared
          type: string
        vCpu:
          description: Number of virtual Central Processing Units (vCPUs)
          example: 2
          type: integer
        ramGb:
          description: Capacity of RAM in gigabytes
          example: 1
          type: integer
        volumeType:
          description: Volume type
          enum:
          - ssd
          - ssd-plus
          example: ssd
          type: string
        volumeGb:
          description: Capacity of volume in gigabytes
          example: 16
          type: integer
        sshKeyId:
          description: SSH-key ID
          example: 124
          type: integer
        securityGroupId:
          description: Security group ID
          example: 208
          type: integer
      required:
      - cloudNetworkType
      - dataCenterId
      - name
      - osId
      - ramGb
      - sshKeyId
      - vCpu
      - vCpuType
      - volumeGb
      - volumeType
      type: object
    VmStart:
      properties:
        action:
          description: Action with a virtual machine
          enum:
          - start
          example: start
          type: string
      required:
      - action
      type: object
    VmShutdown:
      properties:
        action:
          description: Action with a virtual machine
          enum:
          - shutdown
          example: shutdown
          type: string
      required:
      - action
      type: object
    VmReboot:
      properties:
        action:
          description: Action with a virtual machine
          enum:
          - reboot
          example: reboot
          type: string
      required:
      - action
      type: object
    VmTransfer:
      properties:
        action:
          description: Action with a virtual machine
          enum:
          - transfer
          example: transfer
          type: string
        dataCenterId:
          description: Provider's data center ID
          example: aws-us-west-1
          type: string
        isKeepOriginalInstance:
          default: true
          description: Keep original instance
          example: true
          type: boolean
      required:
      - action
      - dataCenterId
      type: object
    VmClone:
      properties:
        action:
          description: Action with a virtual machine
          enum:
          - clone
          example: clone
          type: string
        name:
          description: Virtual machine name
          example: vm-default-name
          type: string
      required:
      - action
      - name
      type: object
    VmEditHardware:
      properties:
        action:
          description: Action with a virtual machine
          enum:
          - edithardware
          example: edithardware
          type: string
        vCpu:
          example: 4
          type: integer
        vCpuType:
          description: vCPU type
          enum:
          - shared
          - standard
          - hpc
          example: shared
          type: string
        ramGb:
          example: 16
          type: integer
        volumeGb:
          example: 500
          type: integer
      required:
      - action
      - ramGb
      - vCpu
      - volumeGb
      type: object
    VmConfiguration:
      example:
        volumeType: SSD
        locationName: London
        cost:
          unit: MONTHS
          currency: EUR
          pricePerUnit: 5.479952
        vCpu: 4
        dataCenterName: europe-west2
        osId: 35
        ramGb: 16
        vCpuType: Standard
        cloudNetworkTypes:
        - default
        - multi-cloud
        - isolated
        osVersion: "18.04"
        providerId: 5
        locationId: 6
        dataCenterId: aws-us-west-1
        osType: Ubuntu
        volumeGb: 500
        id: 2456
        providerName: GCP
      properties:
        id:
          example: 2456
          type: integer
        providerId:
          example: 5
          type: integer
        providerName:
          example: GCP
          type: string
        locationId:
          example: 6
          type: integer
        locationName:
          example: London
          type: string
        dataCenterId:
          example: aws-us-west-1
          type: string
        dataCenterName:
          example: europe-west2
          type: string
        osId:
          example: 35
          type: integer
        osType:
          example: Ubuntu
          type: string
        osVersion:
          example: "18.04"
          type: string
        cloudNetworkTypes:
          example:
          - default
          - multi-cloud
          - isolated
          items:
            type: string
          type: array
        vCpuType:
          example: Standard
          type: string
        vCpu:
          example: 4
          type: integer
        ramGb:
          example: 16
          type: integer
        volumeGb:
          example: 500
          type: integer
        volumeType:
          example: SSD
          type: string
        cost:
          $ref: '#/components/schemas/VmConfiguration_cost'
      type: object
    PaginatedResult:
      properties:
        totalPages:
          format: int32
          type: integer
        totalElements:
          format: int64
          type: integer
        size:
          format: int32
          type: integer
        content:
          items:
            type: object
          type: array
        number:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        last:
          type: boolean
        first:
          type: boolean
        numberOfElements:
          format: int32
          type: integer
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
      type: object
    PageableObject:
      example:
        paged: true
        pageNumber: 9
        offset: 2
        pageSize: 7
        unpaged: true
        sort:
          unsorted: true
          sorted: true
          empty: true
      properties:
        offset:
          format: int64
          type: integer
        sort:
          $ref: '#/components/schemas/SortObject'
        pageSize:
          format: int32
          type: integer
        pageNumber:
          format: int32
          type: integer
        paged:
          type: boolean
        unpaged:
          type: boolean
      type: object
    SortObject:
      example:
        unsorted: true
        sorted: true
        empty: true
      properties:
        empty:
          type: boolean
        unsorted:
          type: boolean
        sorted:
          type: boolean
      type: object
    BadRequestError:
      example:
        code: BAD_REQUEST
        message: Bad request
      properties:
        code:
          example: BAD_REQUEST
          type: string
        message:
          example: Bad request
          type: string
      required:
      - code
      - message
      type: object
    NotFoundError:
      example:
        code: NOT_FOUND
        message: Not found
      properties:
        code:
          example: NOT_FOUND
          type: string
        message:
          example: Not found
          type: string
      required:
      - code
      - message
      type: object
    UnauthorizedError:
      example:
        code: UNAUTHORIZED
        message: Token is not provided
      properties:
        code:
          example: UNAUTHORIZED
          type: string
        message:
          example: Token is not provided
          type: string
      required:
      - code
      - message
      type: object
    ForbiddenError:
      example:
        code: FORBIDDEN
        message: Access is denied. You do not have the necessary permissions to perform
          this action.
      properties:
        code:
          example: FORBIDDEN
          type: string
        message:
          example: Access is denied. You do not have the necessary permissions to
            perform this action.
          type: string
      required:
      - code
      - message
      type: object
    ConflictError:
      example:
        code: CONFLICT
        message: Unable to update entity
      properties:
        code:
          example: CONFLICT
          type: string
        message:
          example: Unable to update entity
          type: string
      required:
      - code
      - message
      type: object
    UnprocessableEntityError:
      example:
        code: UNPROCESSABLE_ENTITY
        message: Unprocessable entity
      properties:
        code:
          example: UNPROCESSABLE_ENTITY
          type: string
        message:
          example: Unprocessable entity
          type: string
      required:
      - code
      - message
      type: object
    SpotActions_request:
      oneOf:
      - $ref: '#/components/schemas/SpotReboot'
    SshKeysCreateImport_request:
      oneOf:
      - $ref: '#/components/schemas/SshKeyCreate'
      - $ref: '#/components/schemas/SshKeyImport'
    SshKeysCreateImport_201_response:
      oneOf:
      - $ref: '#/components/schemas/SshKey'
      - $ref: '#/components/schemas/SshKeyGenerated'
    VmActions_request:
      oneOf:
      - $ref: '#/components/schemas/VmStart'
      - $ref: '#/components/schemas/VmShutdown'
      - $ref: '#/components/schemas/VmReboot'
      - $ref: '#/components/schemas/VmTransfer'
      - $ref: '#/components/schemas/VmClone'
      - $ref: '#/components/schemas/VmEditHardware'
    GetVmConfigs_200_response:
      allOf:
      - $ref: '#/components/schemas/PaginatedResult'
      - properties:
          content:
            items:
              $ref: '#/components/schemas/VmConfiguration'
            type: array
        type: object
      example:
        number: 5
        size: 1
        last: true
        numberOfElements: 5
        totalPages: 0
        pageable:
          paged: true
          pageNumber: 9
          offset: 2
          pageSize: 7
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - volumeType: SSD
          locationName: London
          cost:
            unit: MONTHS
            currency: EUR
            pricePerUnit: 5.479952
          vCpu: 4
          dataCenterName: europe-west2
          osId: 35
          ramGb: 16
          vCpuType: Standard
          cloudNetworkTypes:
          - default
          - multi-cloud
          - isolated
          osVersion: "18.04"
          providerId: 5
          locationId: 6
          dataCenterId: aws-us-west-1
          osType: Ubuntu
          volumeGb: 500
          id: 2456
          providerName: GCP
        - volumeType: SSD
          locationName: London
          cost:
            unit: MONTHS
            currency: EUR
            pricePerUnit: 5.479952
          vCpu: 4
          dataCenterName: europe-west2
          osId: 35
          ramGb: 16
          vCpuType: Standard
          cloudNetworkTypes:
          - default
          - multi-cloud
          - isolated
          osVersion: "18.04"
          providerId: 5
          locationId: 6
          dataCenterId: aws-us-west-1
          osType: Ubuntu
          volumeGb: 500
          id: 2456
          providerName: GCP
        first: true
        totalElements: 6
        empty: true
    Vm_provider:
      example:
        name: Digital Ocean
        id: 22
      properties:
        id:
          example: 22
          type: integer
        name:
          example: Digital Ocean
          type: string
      type: object
    Vm_location:
      example:
        name: London
        id: 6
      properties:
        id:
          example: 6
          type: integer
        name:
          example: London
          type: string
      type: object
    Vm_dataCenter:
      example:
        locationName: Pune
        providerId: 5
        locationId: 35
        name: eu-north-1
        id: aws-ap-south-1
        providerName: DO
      properties:
        id:
          example: aws-ap-south-1
          type: string
        name:
          example: eu-north-1
          type: string
        providerId:
          example: 5
          type: integer
        providerName:
          example: DO
          type: string
        locationId:
          example: 35
          type: integer
        locationName:
          example: Pune
          type: string
      type: object
    Vm_os:
      example:
        id: 35
        family: Linux
        type: Ubuntu
        version: "22.04"
        architecture: x86-64
      properties:
        id:
          example: 35
          type: integer
        family:
          example: Linux
          type: string
        architecture:
          example: x86-64
          type: string
        type:
          example: Ubuntu
          type: string
        version:
          example: "22.04"
          type: string
      type: object
    Vm_disks_inner:
      example:
        sizeGb: 250
        typeId: 2
        id: 5819
        type: SSD
        isBootable: true
      properties:
        id:
          example: 5819
          type: integer
        sizeGb:
          example: 250
          type: integer
        typeId:
          example: 2
          type: integer
        type:
          example: SSD
          type: string
        isBootable:
          example: true
          type: boolean
      type: object
    Vm_networks_inner:
      properties:
        id:
          example: 9826
          type: integer
        ip:
          example: 10.106.0.2
          type: string
        networkTypeId:
          example: 2
          type: integer
        networkType:
          example: PRIVATE
          type: string
      type: object
    Vm_securityGroup:
      example:
        name: default
        id: 208
      properties:
        id:
          example: 208
          type: integer
        name:
          example: default
          type: string
      type: object
    Vm_cost:
      example:
        unit: MONTHS
        price: 5.479952
        currency: EUR
      properties:
        unit:
          example: MONTHS
          type: string
        currency:
          example: EUR
          type: string
        price:
          example: 5.479952
          type: number
      type: object
    VmConfiguration_cost:
      example:
        unit: MONTHS
        currency: EUR
        pricePerUnit: 5.479952
      properties:
        unit:
          example: MONTHS
          type: string
        currency:
          example: EUR
          type: string
        pricePerUnit:
          example: 5.479952
          type: number
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
