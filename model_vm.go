/*
Public EMMA API

This <b>Infrastructure</b> API is for managing the cloud infrastructure within a project.  To access the API, enter your project, navigate to <b>Settings</b> > <b>Service Apps</b>, and create a service application. Select the access level: <b>Read</b>, <b>Operate</b>, or <b>Manage</b>.  After creating the service application, copy the <b>Client ID</b> and <b>Client Secret</b>. Send an API request to the endpoint <b>/issue-token</b> as specified in the <b>Authentication</b> section of the API documentation. You will receive access and refresh tokens in the response.  The Bearer access token is a text string, included in the request header:  -H \"Authorization: Bearer {token}\"  Use this token for API requests.  The access token will expire in 5 minutes, after which it must be refreshed using the refresh token.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emma

import (
	"encoding/json"
)

// checks if the Vm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Vm{}

// Vm struct for Vm
type Vm struct {
	Id             interface{}       `json:"id,omitempty"`
	CreatedAt      interface{}       `json:"createdAt,omitempty"`
	CreatedByName  interface{}       `json:"createdByName,omitempty"`
	CreatedById    interface{}       `json:"createdById,omitempty"`
	ModifiedAt     interface{}       `json:"modifiedAt,omitempty"`
	ModifiedByName interface{}       `json:"modifiedByName,omitempty"`
	ModifiedById   interface{}       `json:"modifiedById,omitempty"`
	Name           interface{}       `json:"name,omitempty"`
	ProjectId      interface{}       `json:"projectId,omitempty"`
	Status         interface{}       `json:"status,omitempty"`
	Provider       *VmProvider       `json:"provider,omitempty"`
	Location       *VmLocation       `json:"location,omitempty"`
	DataCenter     *VmDataCenter     `json:"dataCenter,omitempty"`
	Os             *VmOs             `json:"os,omitempty"`
	Cpu            interface{}       `json:"cpu,omitempty"`
	RamGb          interface{}       `json:"ramGb,omitempty"`
	Disks          []VmDisksInner    `json:"disks,omitempty"`
	Networks       []VmNetworksInner `json:"networks,omitempty"`
	SecurityGroup  *VmSecurityGroup  `json:"securityGroup,omitempty"`
	SshKeyId       interface{}       `json:"sshKeyId,omitempty"`
	UserName       interface{}       `json:"userName,omitempty"`
	Cost           *VmCost           `json:"cost,omitempty"`
}

// NewVm instantiates a new Vm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVm() *Vm {
	this := Vm{}
	return &this
}

// NewVmWithDefaults instantiates a new Vm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmWithDefaults() *Vm {
	this := Vm{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vm) GetId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vm) GetIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return &o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Vm) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given interface{} and assigns it to the Id field.
func (o *Vm) SetId(v interface{}) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vm) GetCreatedAt() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vm) GetCreatedAtOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return &o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Vm) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given interface{} and assigns it to the CreatedAt field.
func (o *Vm) SetCreatedAt(v interface{}) {
	o.CreatedAt = v
}

// GetCreatedByName returns the CreatedByName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vm) GetCreatedByName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CreatedByName
}

// GetCreatedByNameOk returns a tuple with the CreatedByName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vm) GetCreatedByNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CreatedByName) {
		return nil, false
	}
	return &o.CreatedByName, true
}

// HasCreatedByName returns a boolean if a field has been set.
func (o *Vm) HasCreatedByName() bool {
	if o != nil && !IsNil(o.CreatedByName) {
		return true
	}

	return false
}

// SetCreatedByName gets a reference to the given interface{} and assigns it to the CreatedByName field.
func (o *Vm) SetCreatedByName(v interface{}) {
	o.CreatedByName = v
}

// GetCreatedById returns the CreatedById field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vm) GetCreatedById() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CreatedById
}

// GetCreatedByIdOk returns a tuple with the CreatedById field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vm) GetCreatedByIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CreatedById) {
		return nil, false
	}
	return &o.CreatedById, true
}

// HasCreatedById returns a boolean if a field has been set.
func (o *Vm) HasCreatedById() bool {
	if o != nil && !IsNil(o.CreatedById) {
		return true
	}

	return false
}

// SetCreatedById gets a reference to the given interface{} and assigns it to the CreatedById field.
func (o *Vm) SetCreatedById(v interface{}) {
	o.CreatedById = v
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vm) GetModifiedAt() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vm) GetModifiedAtOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ModifiedAt) {
		return nil, false
	}
	return &o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *Vm) HasModifiedAt() bool {
	if o != nil && !IsNil(o.ModifiedAt) {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given interface{} and assigns it to the ModifiedAt field.
func (o *Vm) SetModifiedAt(v interface{}) {
	o.ModifiedAt = v
}

// GetModifiedByName returns the ModifiedByName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vm) GetModifiedByName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ModifiedByName
}

// GetModifiedByNameOk returns a tuple with the ModifiedByName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vm) GetModifiedByNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ModifiedByName) {
		return nil, false
	}
	return &o.ModifiedByName, true
}

// HasModifiedByName returns a boolean if a field has been set.
func (o *Vm) HasModifiedByName() bool {
	if o != nil && !IsNil(o.ModifiedByName) {
		return true
	}

	return false
}

// SetModifiedByName gets a reference to the given interface{} and assigns it to the ModifiedByName field.
func (o *Vm) SetModifiedByName(v interface{}) {
	o.ModifiedByName = v
}

// GetModifiedById returns the ModifiedById field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vm) GetModifiedById() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ModifiedById
}

// GetModifiedByIdOk returns a tuple with the ModifiedById field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vm) GetModifiedByIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ModifiedById) {
		return nil, false
	}
	return &o.ModifiedById, true
}

// HasModifiedById returns a boolean if a field has been set.
func (o *Vm) HasModifiedById() bool {
	if o != nil && !IsNil(o.ModifiedById) {
		return true
	}

	return false
}

// SetModifiedById gets a reference to the given interface{} and assigns it to the ModifiedById field.
func (o *Vm) SetModifiedById(v interface{}) {
	o.ModifiedById = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vm) GetName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vm) GetNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return &o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Vm) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given interface{} and assigns it to the Name field.
func (o *Vm) SetName(v interface{}) {
	o.Name = v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vm) GetProjectId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vm) GetProjectIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return &o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *Vm) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given interface{} and assigns it to the ProjectId field.
func (o *Vm) SetProjectId(v interface{}) {
	o.ProjectId = v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vm) GetStatus() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vm) GetStatusOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return &o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Vm) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given interface{} and assigns it to the Status field.
func (o *Vm) SetStatus(v interface{}) {
	o.Status = v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *Vm) GetProvider() VmProvider {
	if o == nil || IsNil(o.Provider) {
		var ret VmProvider
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vm) GetProviderOk() (*VmProvider, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *Vm) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given VmProvider and assigns it to the Provider field.
func (o *Vm) SetProvider(v VmProvider) {
	o.Provider = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Vm) GetLocation() VmLocation {
	if o == nil || IsNil(o.Location) {
		var ret VmLocation
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vm) GetLocationOk() (*VmLocation, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Vm) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given VmLocation and assigns it to the Location field.
func (o *Vm) SetLocation(v VmLocation) {
	o.Location = &v
}

// GetDataCenter returns the DataCenter field value if set, zero value otherwise.
func (o *Vm) GetDataCenter() VmDataCenter {
	if o == nil || IsNil(o.DataCenter) {
		var ret VmDataCenter
		return ret
	}
	return *o.DataCenter
}

// GetDataCenterOk returns a tuple with the DataCenter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vm) GetDataCenterOk() (*VmDataCenter, bool) {
	if o == nil || IsNil(o.DataCenter) {
		return nil, false
	}
	return o.DataCenter, true
}

// HasDataCenter returns a boolean if a field has been set.
func (o *Vm) HasDataCenter() bool {
	if o != nil && !IsNil(o.DataCenter) {
		return true
	}

	return false
}

// SetDataCenter gets a reference to the given VmDataCenter and assigns it to the DataCenter field.
func (o *Vm) SetDataCenter(v VmDataCenter) {
	o.DataCenter = &v
}

// GetOs returns the Os field value if set, zero value otherwise.
func (o *Vm) GetOs() VmOs {
	if o == nil || IsNil(o.Os) {
		var ret VmOs
		return ret
	}
	return *o.Os
}

// GetOsOk returns a tuple with the Os field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vm) GetOsOk() (*VmOs, bool) {
	if o == nil || IsNil(o.Os) {
		return nil, false
	}
	return o.Os, true
}

// HasOs returns a boolean if a field has been set.
func (o *Vm) HasOs() bool {
	if o != nil && !IsNil(o.Os) {
		return true
	}

	return false
}

// SetOs gets a reference to the given VmOs and assigns it to the Os field.
func (o *Vm) SetOs(v VmOs) {
	o.Os = &v
}

// GetCpu returns the Cpu field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vm) GetCpu() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vm) GetCpuOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Cpu) {
		return nil, false
	}
	return &o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *Vm) HasCpu() bool {
	if o != nil && !IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given interface{} and assigns it to the Cpu field.
func (o *Vm) SetCpu(v interface{}) {
	o.Cpu = v
}

// GetRamGb returns the RamGb field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vm) GetRamGb() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.RamGb
}

// GetRamGbOk returns a tuple with the RamGb field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vm) GetRamGbOk() (*interface{}, bool) {
	if o == nil || IsNil(o.RamGb) {
		return nil, false
	}
	return &o.RamGb, true
}

// HasRamGb returns a boolean if a field has been set.
func (o *Vm) HasRamGb() bool {
	if o != nil && !IsNil(o.RamGb) {
		return true
	}

	return false
}

// SetRamGb gets a reference to the given interface{} and assigns it to the RamGb field.
func (o *Vm) SetRamGb(v interface{}) {
	o.RamGb = v
}

// GetDisks returns the Disks field value if set, zero value otherwise.
func (o *Vm) GetDisks() []VmDisksInner {
	if o == nil || IsNil(o.Disks) {
		var ret []VmDisksInner
		return ret
	}
	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vm) GetDisksOk() ([]VmDisksInner, bool) {
	if o == nil || IsNil(o.Disks) {
		return nil, false
	}
	return o.Disks, true
}

// HasDisks returns a boolean if a field has been set.
func (o *Vm) HasDisks() bool {
	if o != nil && !IsNil(o.Disks) {
		return true
	}

	return false
}

// SetDisks gets a reference to the given []VmDisksInner and assigns it to the Disks field.
func (o *Vm) SetDisks(v []VmDisksInner) {
	o.Disks = v
}

// GetNetworks returns the Networks field value if set, zero value otherwise.
func (o *Vm) GetNetworks() []VmNetworksInner {
	if o == nil || IsNil(o.Networks) {
		var ret []VmNetworksInner
		return ret
	}
	return o.Networks
}

// GetNetworksOk returns a tuple with the Networks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vm) GetNetworksOk() ([]VmNetworksInner, bool) {
	if o == nil || IsNil(o.Networks) {
		return nil, false
	}
	return o.Networks, true
}

// HasNetworks returns a boolean if a field has been set.
func (o *Vm) HasNetworks() bool {
	if o != nil && !IsNil(o.Networks) {
		return true
	}

	return false
}

// SetNetworks gets a reference to the given []VmNetworksInner and assigns it to the Networks field.
func (o *Vm) SetNetworks(v []VmNetworksInner) {
	o.Networks = v
}

// GetSecurityGroup returns the SecurityGroup field value if set, zero value otherwise.
func (o *Vm) GetSecurityGroup() VmSecurityGroup {
	if o == nil || IsNil(o.SecurityGroup) {
		var ret VmSecurityGroup
		return ret
	}
	return *o.SecurityGroup
}

// GetSecurityGroupOk returns a tuple with the SecurityGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vm) GetSecurityGroupOk() (*VmSecurityGroup, bool) {
	if o == nil || IsNil(o.SecurityGroup) {
		return nil, false
	}
	return o.SecurityGroup, true
}

// HasSecurityGroup returns a boolean if a field has been set.
func (o *Vm) HasSecurityGroup() bool {
	if o != nil && !IsNil(o.SecurityGroup) {
		return true
	}

	return false
}

// SetSecurityGroup gets a reference to the given VmSecurityGroup and assigns it to the SecurityGroup field.
func (o *Vm) SetSecurityGroup(v VmSecurityGroup) {
	o.SecurityGroup = &v
}

// GetSshKeyId returns the SshKeyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vm) GetSshKeyId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.SshKeyId
}

// GetSshKeyIdOk returns a tuple with the SshKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vm) GetSshKeyIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.SshKeyId) {
		return nil, false
	}
	return &o.SshKeyId, true
}

// HasSshKeyId returns a boolean if a field has been set.
func (o *Vm) HasSshKeyId() bool {
	if o != nil && !IsNil(o.SshKeyId) {
		return true
	}

	return false
}

// SetSshKeyId gets a reference to the given interface{} and assigns it to the SshKeyId field.
func (o *Vm) SetSshKeyId(v interface{}) {
	o.SshKeyId = v
}

// GetUserName returns the UserName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vm) GetUserName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vm) GetUserNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return &o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *Vm) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given interface{} and assigns it to the UserName field.
func (o *Vm) SetUserName(v interface{}) {
	o.UserName = v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *Vm) GetCost() VmCost {
	if o == nil || IsNil(o.Cost) {
		var ret VmCost
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vm) GetCostOk() (*VmCost, bool) {
	if o == nil || IsNil(o.Cost) {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *Vm) HasCost() bool {
	if o != nil && !IsNil(o.Cost) {
		return true
	}

	return false
}

// SetCost gets a reference to the given VmCost and assigns it to the Cost field.
func (o *Vm) SetCost(v VmCost) {
	o.Cost = &v
}

func (o Vm) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Vm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.CreatedByName != nil {
		toSerialize["createdByName"] = o.CreatedByName
	}
	if o.CreatedById != nil {
		toSerialize["createdById"] = o.CreatedById
	}
	if o.ModifiedAt != nil {
		toSerialize["modifiedAt"] = o.ModifiedAt
	}
	if o.ModifiedByName != nil {
		toSerialize["modifiedByName"] = o.ModifiedByName
	}
	if o.ModifiedById != nil {
		toSerialize["modifiedById"] = o.ModifiedById
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ProjectId != nil {
		toSerialize["projectId"] = o.ProjectId
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.DataCenter) {
		toSerialize["dataCenter"] = o.DataCenter
	}
	if !IsNil(o.Os) {
		toSerialize["os"] = o.Os
	}
	if o.Cpu != nil {
		toSerialize["cpu"] = o.Cpu
	}
	if o.RamGb != nil {
		toSerialize["ramGb"] = o.RamGb
	}
	if !IsNil(o.Disks) {
		toSerialize["disks"] = o.Disks
	}
	if !IsNil(o.Networks) {
		toSerialize["networks"] = o.Networks
	}
	if !IsNil(o.SecurityGroup) {
		toSerialize["securityGroup"] = o.SecurityGroup
	}
	if o.SshKeyId != nil {
		toSerialize["sshKeyId"] = o.SshKeyId
	}
	if o.UserName != nil {
		toSerialize["userName"] = o.UserName
	}
	if !IsNil(o.Cost) {
		toSerialize["cost"] = o.Cost
	}
	return toSerialize, nil
}

type NullableVm struct {
	value *Vm
	isSet bool
}

func (v NullableVm) Get() *Vm {
	return v.value
}

func (v *NullableVm) Set(val *Vm) {
	v.value = val
	v.isSet = true
}

func (v NullableVm) IsSet() bool {
	return v.isSet
}

func (v *NullableVm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVm(val *Vm) *NullableVm {
	return &NullableVm{value: val, isSet: true}
}

func (v NullableVm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
