/*
Public EMMA API

**Base URL:** *<u>https://api.emma.ms/external</u>*  This **Infrastructure API** is for managing the cloud infrastructure within a project.  To access the API, enter your project, navigate to **Settings** > **Service Apps**, and create a service application. Select the access level **Read**, **Operate**, or **Manage**.  After creating the service application, copy the **Client ID** and **Client Secret**. Send an API request to the endpoint **_/issue-token** as specified in the **Authentication** section of the API documentation. You will receive access and refresh tokens in the response.  The Bearer access token is a text string, included in the request header, example:  *-H Authorization: Bearer {token}*  Use this token for API requests. The access token will expire in 10 minutes. A new access token may be created using the refresh token (without Client ID and Client Secret).

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emma

import (
	"encoding/json"
)

// checks if the PageableObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PageableObject{}

// PageableObject struct for PageableObject
type PageableObject struct {
	Offset     *int64      `json:"offset,omitempty"`
	Sort       *SortObject `json:"sort,omitempty"`
	PageSize   *int32      `json:"pageSize,omitempty"`
	PageNumber *int32      `json:"pageNumber,omitempty"`
	Paged      *bool       `json:"paged,omitempty"`
	Unpaged    *bool       `json:"unpaged,omitempty"`
}

// NewPageableObject instantiates a new PageableObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPageableObject() *PageableObject {
	this := PageableObject{}
	return &this
}

// NewPageableObjectWithDefaults instantiates a new PageableObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPageableObjectWithDefaults() *PageableObject {
	this := PageableObject{}
	return &this
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *PageableObject) GetOffset() int64 {
	if o == nil || IsNil(o.Offset) {
		var ret int64
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageableObject) GetOffsetOk() (*int64, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *PageableObject) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int64 and assigns it to the Offset field.
func (o *PageableObject) SetOffset(v int64) {
	o.Offset = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *PageableObject) GetSort() SortObject {
	if o == nil || IsNil(o.Sort) {
		var ret SortObject
		return ret
	}
	return *o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageableObject) GetSortOk() (*SortObject, bool) {
	if o == nil || IsNil(o.Sort) {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *PageableObject) HasSort() bool {
	if o != nil && !IsNil(o.Sort) {
		return true
	}

	return false
}

// SetSort gets a reference to the given SortObject and assigns it to the Sort field.
func (o *PageableObject) SetSort(v SortObject) {
	o.Sort = &v
}

// GetPageSize returns the PageSize field value if set, zero value otherwise.
func (o *PageableObject) GetPageSize() int32 {
	if o == nil || IsNil(o.PageSize) {
		var ret int32
		return ret
	}
	return *o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageableObject) GetPageSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.PageSize) {
		return nil, false
	}
	return o.PageSize, true
}

// HasPageSize returns a boolean if a field has been set.
func (o *PageableObject) HasPageSize() bool {
	if o != nil && !IsNil(o.PageSize) {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given int32 and assigns it to the PageSize field.
func (o *PageableObject) SetPageSize(v int32) {
	o.PageSize = &v
}

// GetPageNumber returns the PageNumber field value if set, zero value otherwise.
func (o *PageableObject) GetPageNumber() int32 {
	if o == nil || IsNil(o.PageNumber) {
		var ret int32
		return ret
	}
	return *o.PageNumber
}

// GetPageNumberOk returns a tuple with the PageNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageableObject) GetPageNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.PageNumber) {
		return nil, false
	}
	return o.PageNumber, true
}

// HasPageNumber returns a boolean if a field has been set.
func (o *PageableObject) HasPageNumber() bool {
	if o != nil && !IsNil(o.PageNumber) {
		return true
	}

	return false
}

// SetPageNumber gets a reference to the given int32 and assigns it to the PageNumber field.
func (o *PageableObject) SetPageNumber(v int32) {
	o.PageNumber = &v
}

// GetPaged returns the Paged field value if set, zero value otherwise.
func (o *PageableObject) GetPaged() bool {
	if o == nil || IsNil(o.Paged) {
		var ret bool
		return ret
	}
	return *o.Paged
}

// GetPagedOk returns a tuple with the Paged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageableObject) GetPagedOk() (*bool, bool) {
	if o == nil || IsNil(o.Paged) {
		return nil, false
	}
	return o.Paged, true
}

// HasPaged returns a boolean if a field has been set.
func (o *PageableObject) HasPaged() bool {
	if o != nil && !IsNil(o.Paged) {
		return true
	}

	return false
}

// SetPaged gets a reference to the given bool and assigns it to the Paged field.
func (o *PageableObject) SetPaged(v bool) {
	o.Paged = &v
}

// GetUnpaged returns the Unpaged field value if set, zero value otherwise.
func (o *PageableObject) GetUnpaged() bool {
	if o == nil || IsNil(o.Unpaged) {
		var ret bool
		return ret
	}
	return *o.Unpaged
}

// GetUnpagedOk returns a tuple with the Unpaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageableObject) GetUnpagedOk() (*bool, bool) {
	if o == nil || IsNil(o.Unpaged) {
		return nil, false
	}
	return o.Unpaged, true
}

// HasUnpaged returns a boolean if a field has been set.
func (o *PageableObject) HasUnpaged() bool {
	if o != nil && !IsNil(o.Unpaged) {
		return true
	}

	return false
}

// SetUnpaged gets a reference to the given bool and assigns it to the Unpaged field.
func (o *PageableObject) SetUnpaged(v bool) {
	o.Unpaged = &v
}

func (o PageableObject) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PageableObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.Sort) {
		toSerialize["sort"] = o.Sort
	}
	if !IsNil(o.PageSize) {
		toSerialize["pageSize"] = o.PageSize
	}
	if !IsNil(o.PageNumber) {
		toSerialize["pageNumber"] = o.PageNumber
	}
	if !IsNil(o.Paged) {
		toSerialize["paged"] = o.Paged
	}
	if !IsNil(o.Unpaged) {
		toSerialize["unpaged"] = o.Unpaged
	}
	return toSerialize, nil
}

type NullablePageableObject struct {
	value *PageableObject
	isSet bool
}

func (v NullablePageableObject) Get() *PageableObject {
	return v.value
}

func (v *NullablePageableObject) Set(val *PageableObject) {
	v.value = val
	v.isSet = true
}

func (v NullablePageableObject) IsSet() bool {
	return v.isSet
}

func (v *NullablePageableObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePageableObject(val *PageableObject) *NullablePageableObject {
	return &NullablePageableObject{value: val, isSet: true}
}

func (v NullablePageableObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePageableObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
