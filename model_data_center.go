/*
Public EMMA API

This <b>Infrastructure</b> API is for managing the cloud infrastructure within a project.  To access the API, enter your project, navigate to <b>Settings</b> > <b>Service Apps</b>, and create a service application. Select the access level: <b>Read</b>, <b>Operate</b>, or <b>Manage</b>.  After creating the service application, copy the <b>Client ID</b> and <b>Client Secret</b>. Send an API request to the endpoint <b>/issue-token</b> as specified in the <b>Authentication</b> section of the API documentation. You will receive access and refresh tokens in the response.  The Bearer access token is a text string, included in the request header:  -H \"Authorization: Bearer {token}\"  Use this token for API requests.  The access token will expire in 5 minutes, after which it must be refreshed using the refresh token.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emma

import (
	"encoding/json"
)

// checks if the DataCenter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataCenter{}

// DataCenter struct for DataCenter
type DataCenter struct {
	Id           interface{} `json:"id,omitempty"`
	Name         interface{} `json:"name,omitempty"`
	ProviderId   interface{} `json:"providerId,omitempty"`
	ProviderName interface{} `json:"providerName,omitempty"`
	LocationId   interface{} `json:"locationId,omitempty"`
	LocationName interface{} `json:"locationName,omitempty"`
}

// NewDataCenter instantiates a new DataCenter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataCenter() *DataCenter {
	this := DataCenter{}
	return &this
}

// NewDataCenterWithDefaults instantiates a new DataCenter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataCenterWithDefaults() *DataCenter {
	this := DataCenter{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataCenter) GetId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataCenter) GetIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return &o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DataCenter) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given interface{} and assigns it to the Id field.
func (o *DataCenter) SetId(v interface{}) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataCenter) GetName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataCenter) GetNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return &o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DataCenter) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given interface{} and assigns it to the Name field.
func (o *DataCenter) SetName(v interface{}) {
	o.Name = v
}

// GetProviderId returns the ProviderId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataCenter) GetProviderId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ProviderId
}

// GetProviderIdOk returns a tuple with the ProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataCenter) GetProviderIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ProviderId) {
		return nil, false
	}
	return &o.ProviderId, true
}

// HasProviderId returns a boolean if a field has been set.
func (o *DataCenter) HasProviderId() bool {
	if o != nil && !IsNil(o.ProviderId) {
		return true
	}

	return false
}

// SetProviderId gets a reference to the given interface{} and assigns it to the ProviderId field.
func (o *DataCenter) SetProviderId(v interface{}) {
	o.ProviderId = v
}

// GetProviderName returns the ProviderName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataCenter) GetProviderName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ProviderName
}

// GetProviderNameOk returns a tuple with the ProviderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataCenter) GetProviderNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ProviderName) {
		return nil, false
	}
	return &o.ProviderName, true
}

// HasProviderName returns a boolean if a field has been set.
func (o *DataCenter) HasProviderName() bool {
	if o != nil && !IsNil(o.ProviderName) {
		return true
	}

	return false
}

// SetProviderName gets a reference to the given interface{} and assigns it to the ProviderName field.
func (o *DataCenter) SetProviderName(v interface{}) {
	o.ProviderName = v
}

// GetLocationId returns the LocationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataCenter) GetLocationId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.LocationId
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataCenter) GetLocationIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.LocationId) {
		return nil, false
	}
	return &o.LocationId, true
}

// HasLocationId returns a boolean if a field has been set.
func (o *DataCenter) HasLocationId() bool {
	if o != nil && !IsNil(o.LocationId) {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given interface{} and assigns it to the LocationId field.
func (o *DataCenter) SetLocationId(v interface{}) {
	o.LocationId = v
}

// GetLocationName returns the LocationName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataCenter) GetLocationName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.LocationName
}

// GetLocationNameOk returns a tuple with the LocationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataCenter) GetLocationNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.LocationName) {
		return nil, false
	}
	return &o.LocationName, true
}

// HasLocationName returns a boolean if a field has been set.
func (o *DataCenter) HasLocationName() bool {
	if o != nil && !IsNil(o.LocationName) {
		return true
	}

	return false
}

// SetLocationName gets a reference to the given interface{} and assigns it to the LocationName field.
func (o *DataCenter) SetLocationName(v interface{}) {
	o.LocationName = v
}

func (o DataCenter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataCenter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ProviderId != nil {
		toSerialize["providerId"] = o.ProviderId
	}
	if o.ProviderName != nil {
		toSerialize["providerName"] = o.ProviderName
	}
	if o.LocationId != nil {
		toSerialize["locationId"] = o.LocationId
	}
	if o.LocationName != nil {
		toSerialize["locationName"] = o.LocationName
	}
	return toSerialize, nil
}

type NullableDataCenter struct {
	value *DataCenter
	isSet bool
}

func (v NullableDataCenter) Get() *DataCenter {
	return v.value
}

func (v *NullableDataCenter) Set(val *DataCenter) {
	v.value = val
	v.isSet = true
}

func (v NullableDataCenter) IsSet() bool {
	return v.isSet
}

func (v *NullableDataCenter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataCenter(val *DataCenter) *NullableDataCenter {
	return &NullableDataCenter{value: val, isSet: true}
}

func (v NullableDataCenter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataCenter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
