/*
Public EMMA API

### About Infrastructure API   **Base URL:** **<u>https://api.emma.ms/external</u>**   This **Infrastructure API** is for managing the emma cloud infrastructure within a project. The API enables you to view, create, edit, and delete _Virtual machines, Spot instances, Applications, Kubernetes clusters, SSH keys, Security groups, and Backup policies_. For creating the resources you can use the endpoints with the dictionaries: _Data centers, Locations, Providers, Operating systems, Virtual machines configurations, Spot instances configurations, Kubernetes clusters configurations._   ### Authentication   #### 1. Create service application   To access the API, enter your project, navigate to **Settings** > **Service Apps**, and create a service application. Select the access level **Read**, **Operate**, or **Manage**.   - **Read** - only GET methods are allowed in the API.   - **Operate** - some operations are allowed with the resources (e.g. _Start, Reboot,_ and _Shutdown_ of the Virtual machines).   - **Manage** - full creating, updating, and deleting of the resources is allowed.     #### 2. Get access token   - Copy the **Client ID** and **Client Secret** in the service application.  - Send an API request to the endpoint **_/issue-token** as specified in the **Authentication** section of the API documentation. You will receive access and refresh tokens in the response.   _For Linux / Mac:_  ```  curl -X POST https://api.emma.ms/external/v1/issue-token \\  -H \"Content-Type: application/json\" \\  -d '{\"clientId\": \"YOUR-CLIENT-ID\", \"clientSecret\": \"YOUR-CLIENT-SECRET\"}'  ```  _For Windows:_  ```  curl -X POST https://api.emma.ms/external/v1/issue-token ^  -H \"Content-Type: application/json\" ^  -d \"{\\\"clientId\\\": \\\"YOUR-CLIENT-ID\\\", \\\"clientSecret\\\": \\\"YOUR-CLIENT-SECRET\\\"}\"  ```      #### 3. Use access token in requests  The Bearer access token is a text string, included in the request header, for example:   _For Linux / Mac:_  ```  curl -X GET https://api.emma.ms/external/v1/locations -H \"Authorization: Bearer YOUR-ACCESS-TOKEN-HERE\"  ```   Use this token for the API requests.     #### 4. Refresh token  The access token will expire in 10 minutes. A new access token may be created using the refresh token (without Client ID and Client Secret).   To get a new access token send a request to the **_/refresh-token** endpoint:    _For Linux / Mac:_  ```  curl -X POST https://api.emma.ms/external/v1/refresh-token \\  -H \"Content-Type: application/json\" \\  -H \"Authorization: Bearer YOUR-ACCESS-TOKEN\" \\  -d '{\"refreshToken\": \"YOUR-REFRESH-TOKEN\"}'  ```       ### Possible response status codes   We use standard HTTP response codes to show the success or failure of requests.   `2xx` - successful responses.   `4xx` - client error responses (the response contains an explanation of the error).   `5xx` - server error responses.   The API uses the following status codes:   | Status Code | Description                  | Notes                                                                  |  |-------------|------------------------------|------------------------------------------------------------------------|  | 200         | OK                           | The request was successful.                                             |  | 201         | Created                      | The object was successfully created. This code is only used with objects that are created immediately.  | 400         | Bad Request                  | The request could not be understood by the server. Incoming parameters might not be valid. |  | 401         | Unauthorized            | The client is unauthenticated. The client must authenticate itself to get the requested response. |  | 403         | Forbidden                   | The client does not have access rights to the content.  | 404         | Not Found                    | The requested resource is not found.                                    |  | 409         | Conflict | This response is sent when a request conflicts with the current state of the object (e.g. deleting the security group with the compute instances in it).|  | 422         | Unprocessable Content   | The request was well-formed but was unable to be followed due to incorrect field values (e.g. creation of a virtual machine in the non-existent data center).  |  | 500         | Internal server Error                 | The server could not return the representation due to an internal server error. |

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emma

import (
	"encoding/json"
)

// checks if the SecurityGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityGroup{}

// SecurityGroup struct for SecurityGroup
type SecurityGroup struct {
	// Security group id
	Id *int32 `json:"id,omitempty"`
	// Security group name
	Name *string `json:"name,omitempty"`
	// ID of the user who created the security group
	CreatedById *int32 `json:"createdById,omitempty"`
	// Name of the user who created the security group
	CreatedByName *string `json:"createdByName,omitempty"`
	// ID of the user who last edited the security group
	ModifiedById *int32 `json:"modifiedById,omitempty"`
	// Name of the user who last edited the security group
	ModifiedByName *string `json:"modifiedByName,omitempty"`
	// Date and time of the security group's creation
	CreatedAt *string `json:"createdAt,omitempty"`
	// Date and time of the security group's last update
	ModifiedAt *string `json:"modifiedAt,omitempty"`
	// Synchronization status of the security group. When you make changes in the rules the changes are propagated to the respective providerâ€™s security groups. While this is happening the security groups have the status Synchronizing. After it is done the status changes to Synchronized. When another VM is added to the security group it will not be synchronized at first with the other VMs, therefore the status will be Desynchronized.
	SynchronizationStatus *string `json:"synchronizationStatus,omitempty"`
	// Recomposing status of the security group. When a new Virtual machine is added to the Security group it starts a synchronization process. During this process the Security group will have a Recomposing status.
	RecomposingStatus *string `json:"recomposingStatus,omitempty"`
	// Text of the error when the Security group was last edited
	LastModificationErrorDescription *string `json:"lastModificationErrorDescription,omitempty"`
	// List of the inbound and outbound rules in the Security group
	Rules []SecurityGroupRule `json:"rules,omitempty"`
}

// NewSecurityGroup instantiates a new SecurityGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityGroup() *SecurityGroup {
	this := SecurityGroup{}
	return &this
}

// NewSecurityGroupWithDefaults instantiates a new SecurityGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityGroupWithDefaults() *SecurityGroup {
	this := SecurityGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SecurityGroup) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityGroup) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SecurityGroup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SecurityGroup) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SecurityGroup) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityGroup) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SecurityGroup) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SecurityGroup) SetName(v string) {
	o.Name = &v
}

// GetCreatedById returns the CreatedById field value if set, zero value otherwise.
func (o *SecurityGroup) GetCreatedById() int32 {
	if o == nil || IsNil(o.CreatedById) {
		var ret int32
		return ret
	}
	return *o.CreatedById
}

// GetCreatedByIdOk returns a tuple with the CreatedById field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityGroup) GetCreatedByIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatedById) {
		return nil, false
	}
	return o.CreatedById, true
}

// HasCreatedById returns a boolean if a field has been set.
func (o *SecurityGroup) HasCreatedById() bool {
	if o != nil && !IsNil(o.CreatedById) {
		return true
	}

	return false
}

// SetCreatedById gets a reference to the given int32 and assigns it to the CreatedById field.
func (o *SecurityGroup) SetCreatedById(v int32) {
	o.CreatedById = &v
}

// GetCreatedByName returns the CreatedByName field value if set, zero value otherwise.
func (o *SecurityGroup) GetCreatedByName() string {
	if o == nil || IsNil(o.CreatedByName) {
		var ret string
		return ret
	}
	return *o.CreatedByName
}

// GetCreatedByNameOk returns a tuple with the CreatedByName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityGroup) GetCreatedByNameOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedByName) {
		return nil, false
	}
	return o.CreatedByName, true
}

// HasCreatedByName returns a boolean if a field has been set.
func (o *SecurityGroup) HasCreatedByName() bool {
	if o != nil && !IsNil(o.CreatedByName) {
		return true
	}

	return false
}

// SetCreatedByName gets a reference to the given string and assigns it to the CreatedByName field.
func (o *SecurityGroup) SetCreatedByName(v string) {
	o.CreatedByName = &v
}

// GetModifiedById returns the ModifiedById field value if set, zero value otherwise.
func (o *SecurityGroup) GetModifiedById() int32 {
	if o == nil || IsNil(o.ModifiedById) {
		var ret int32
		return ret
	}
	return *o.ModifiedById
}

// GetModifiedByIdOk returns a tuple with the ModifiedById field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityGroup) GetModifiedByIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ModifiedById) {
		return nil, false
	}
	return o.ModifiedById, true
}

// HasModifiedById returns a boolean if a field has been set.
func (o *SecurityGroup) HasModifiedById() bool {
	if o != nil && !IsNil(o.ModifiedById) {
		return true
	}

	return false
}

// SetModifiedById gets a reference to the given int32 and assigns it to the ModifiedById field.
func (o *SecurityGroup) SetModifiedById(v int32) {
	o.ModifiedById = &v
}

// GetModifiedByName returns the ModifiedByName field value if set, zero value otherwise.
func (o *SecurityGroup) GetModifiedByName() string {
	if o == nil || IsNil(o.ModifiedByName) {
		var ret string
		return ret
	}
	return *o.ModifiedByName
}

// GetModifiedByNameOk returns a tuple with the ModifiedByName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityGroup) GetModifiedByNameOk() (*string, bool) {
	if o == nil || IsNil(o.ModifiedByName) {
		return nil, false
	}
	return o.ModifiedByName, true
}

// HasModifiedByName returns a boolean if a field has been set.
func (o *SecurityGroup) HasModifiedByName() bool {
	if o != nil && !IsNil(o.ModifiedByName) {
		return true
	}

	return false
}

// SetModifiedByName gets a reference to the given string and assigns it to the ModifiedByName field.
func (o *SecurityGroup) SetModifiedByName(v string) {
	o.ModifiedByName = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SecurityGroup) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityGroup) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SecurityGroup) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *SecurityGroup) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *SecurityGroup) GetModifiedAt() string {
	if o == nil || IsNil(o.ModifiedAt) {
		var ret string
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityGroup) GetModifiedAtOk() (*string, bool) {
	if o == nil || IsNil(o.ModifiedAt) {
		return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *SecurityGroup) HasModifiedAt() bool {
	if o != nil && !IsNil(o.ModifiedAt) {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given string and assigns it to the ModifiedAt field.
func (o *SecurityGroup) SetModifiedAt(v string) {
	o.ModifiedAt = &v
}

// GetSynchronizationStatus returns the SynchronizationStatus field value if set, zero value otherwise.
func (o *SecurityGroup) GetSynchronizationStatus() string {
	if o == nil || IsNil(o.SynchronizationStatus) {
		var ret string
		return ret
	}
	return *o.SynchronizationStatus
}

// GetSynchronizationStatusOk returns a tuple with the SynchronizationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityGroup) GetSynchronizationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.SynchronizationStatus) {
		return nil, false
	}
	return o.SynchronizationStatus, true
}

// HasSynchronizationStatus returns a boolean if a field has been set.
func (o *SecurityGroup) HasSynchronizationStatus() bool {
	if o != nil && !IsNil(o.SynchronizationStatus) {
		return true
	}

	return false
}

// SetSynchronizationStatus gets a reference to the given string and assigns it to the SynchronizationStatus field.
func (o *SecurityGroup) SetSynchronizationStatus(v string) {
	o.SynchronizationStatus = &v
}

// GetRecomposingStatus returns the RecomposingStatus field value if set, zero value otherwise.
func (o *SecurityGroup) GetRecomposingStatus() string {
	if o == nil || IsNil(o.RecomposingStatus) {
		var ret string
		return ret
	}
	return *o.RecomposingStatus
}

// GetRecomposingStatusOk returns a tuple with the RecomposingStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityGroup) GetRecomposingStatusOk() (*string, bool) {
	if o == nil || IsNil(o.RecomposingStatus) {
		return nil, false
	}
	return o.RecomposingStatus, true
}

// HasRecomposingStatus returns a boolean if a field has been set.
func (o *SecurityGroup) HasRecomposingStatus() bool {
	if o != nil && !IsNil(o.RecomposingStatus) {
		return true
	}

	return false
}

// SetRecomposingStatus gets a reference to the given string and assigns it to the RecomposingStatus field.
func (o *SecurityGroup) SetRecomposingStatus(v string) {
	o.RecomposingStatus = &v
}

// GetLastModificationErrorDescription returns the LastModificationErrorDescription field value if set, zero value otherwise.
func (o *SecurityGroup) GetLastModificationErrorDescription() string {
	if o == nil || IsNil(o.LastModificationErrorDescription) {
		var ret string
		return ret
	}
	return *o.LastModificationErrorDescription
}

// GetLastModificationErrorDescriptionOk returns a tuple with the LastModificationErrorDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityGroup) GetLastModificationErrorDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.LastModificationErrorDescription) {
		return nil, false
	}
	return o.LastModificationErrorDescription, true
}

// HasLastModificationErrorDescription returns a boolean if a field has been set.
func (o *SecurityGroup) HasLastModificationErrorDescription() bool {
	if o != nil && !IsNil(o.LastModificationErrorDescription) {
		return true
	}

	return false
}

// SetLastModificationErrorDescription gets a reference to the given string and assigns it to the LastModificationErrorDescription field.
func (o *SecurityGroup) SetLastModificationErrorDescription(v string) {
	o.LastModificationErrorDescription = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *SecurityGroup) GetRules() []SecurityGroupRule {
	if o == nil || IsNil(o.Rules) {
		var ret []SecurityGroupRule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityGroup) GetRulesOk() ([]SecurityGroupRule, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *SecurityGroup) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []SecurityGroupRule and assigns it to the Rules field.
func (o *SecurityGroup) SetRules(v []SecurityGroupRule) {
	o.Rules = v
}

func (o SecurityGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.CreatedById) {
		toSerialize["createdById"] = o.CreatedById
	}
	if !IsNil(o.CreatedByName) {
		toSerialize["createdByName"] = o.CreatedByName
	}
	if !IsNil(o.ModifiedById) {
		toSerialize["modifiedById"] = o.ModifiedById
	}
	if !IsNil(o.ModifiedByName) {
		toSerialize["modifiedByName"] = o.ModifiedByName
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.ModifiedAt) {
		toSerialize["modifiedAt"] = o.ModifiedAt
	}
	if !IsNil(o.SynchronizationStatus) {
		toSerialize["synchronizationStatus"] = o.SynchronizationStatus
	}
	if !IsNil(o.RecomposingStatus) {
		toSerialize["recomposingStatus"] = o.RecomposingStatus
	}
	if !IsNil(o.LastModificationErrorDescription) {
		toSerialize["lastModificationErrorDescription"] = o.LastModificationErrorDescription
	}
	if !IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	return toSerialize, nil
}

type NullableSecurityGroup struct {
	value *SecurityGroup
	isSet bool
}

func (v NullableSecurityGroup) Get() *SecurityGroup {
	return v.value
}

func (v *NullableSecurityGroup) Set(val *SecurityGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityGroup(val *SecurityGroup) *NullableSecurityGroup {
	return &NullableSecurityGroup{value: val, isSet: true}
}

func (v NullableSecurityGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
