/*
Public EMMA API

This <b>Infrastructure</b> API is for managing the cloud infrastructure within a project.  To access the API, enter your project, navigate to <b>Settings</b> > <b>Service Apps</b>, and create a service application. Select the access level: <b>Read</b>, <b>Operate</b>, or <b>Manage</b>.  After creating the service application, copy the <b>Client ID</b> and <b>Client Secret</b>. Send an API request to the endpoint <b>/issue-token</b> as specified in the <b>Authentication</b> section of the API documentation. You will receive access and refresh tokens in the response.  The Bearer access token is a text string, included in the request header:  -H \"Authorization: Bearer {token}\"  Use this token for API requests.  The access token will expire in 5 minutes, after which it must be refreshed using the refresh token.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emma

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VmCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VmCreate{}

// VmCreate struct for VmCreate
type VmCreate struct {
	// Virtual machine name
	Name interface{} `json:"name"`
	// Provider's data center ID
	DataCenterId interface{} `json:"dataCenterId"`
	// Operating system ID
	OsId interface{} `json:"osId"`
	// Cloud network type
	CloudNetworkType interface{} `json:"cloudNetworkType"`
	// vCPU type
	VCpuType interface{} `json:"vCpuType"`
	// Number of virtual Central Processing Units (vCPUs)
	VCpu interface{} `json:"vCpu"`
	// Capacity of RAM in gigabytes
	RamGb interface{} `json:"ramGb"`
	// Volume type
	VolumeType interface{} `json:"volumeType"`
	// Capacity of volume in gigabytes
	VolumeGb interface{} `json:"volumeGb"`
	// SSH-key ID
	SshKeyId interface{} `json:"sshKeyId"`
	// Security group ID
	SecurityGroupId interface{} `json:"securityGroupId,omitempty"`
}

type _VmCreate VmCreate

// NewVmCreate instantiates a new VmCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmCreate(name interface{}, dataCenterId interface{}, osId interface{}, cloudNetworkType interface{}, vCpuType interface{}, vCpu interface{}, ramGb interface{}, volumeType interface{}, volumeGb interface{}, sshKeyId interface{}) *VmCreate {
	this := VmCreate{}
	this.Name = name
	this.DataCenterId = dataCenterId
	this.OsId = osId
	this.CloudNetworkType = cloudNetworkType
	this.VCpuType = vCpuType
	this.VCpu = vCpu
	this.RamGb = ramGb
	this.VolumeType = volumeType
	this.VolumeGb = volumeGb
	this.SshKeyId = sshKeyId
	return &this
}

// NewVmCreateWithDefaults instantiates a new VmCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmCreateWithDefaults() *VmCreate {
	this := VmCreate{}
	return &this
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *VmCreate) GetName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmCreate) GetNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VmCreate) SetName(v interface{}) {
	o.Name = v
}

// GetDataCenterId returns the DataCenterId field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *VmCreate) GetDataCenterId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.DataCenterId
}

// GetDataCenterIdOk returns a tuple with the DataCenterId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmCreate) GetDataCenterIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.DataCenterId) {
		return nil, false
	}
	return &o.DataCenterId, true
}

// SetDataCenterId sets field value
func (o *VmCreate) SetDataCenterId(v interface{}) {
	o.DataCenterId = v
}

// GetOsId returns the OsId field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *VmCreate) GetOsId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.OsId
}

// GetOsIdOk returns a tuple with the OsId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmCreate) GetOsIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.OsId) {
		return nil, false
	}
	return &o.OsId, true
}

// SetOsId sets field value
func (o *VmCreate) SetOsId(v interface{}) {
	o.OsId = v
}

// GetCloudNetworkType returns the CloudNetworkType field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *VmCreate) GetCloudNetworkType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.CloudNetworkType
}

// GetCloudNetworkTypeOk returns a tuple with the CloudNetworkType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmCreate) GetCloudNetworkTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CloudNetworkType) {
		return nil, false
	}
	return &o.CloudNetworkType, true
}

// SetCloudNetworkType sets field value
func (o *VmCreate) SetCloudNetworkType(v interface{}) {
	o.CloudNetworkType = v
}

// GetVCpuType returns the VCpuType field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *VmCreate) GetVCpuType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.VCpuType
}

// GetVCpuTypeOk returns a tuple with the VCpuType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmCreate) GetVCpuTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.VCpuType) {
		return nil, false
	}
	return &o.VCpuType, true
}

// SetVCpuType sets field value
func (o *VmCreate) SetVCpuType(v interface{}) {
	o.VCpuType = v
}

// GetVCpu returns the VCpu field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *VmCreate) GetVCpu() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.VCpu
}

// GetVCpuOk returns a tuple with the VCpu field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmCreate) GetVCpuOk() (*interface{}, bool) {
	if o == nil || IsNil(o.VCpu) {
		return nil, false
	}
	return &o.VCpu, true
}

// SetVCpu sets field value
func (o *VmCreate) SetVCpu(v interface{}) {
	o.VCpu = v
}

// GetRamGb returns the RamGb field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *VmCreate) GetRamGb() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.RamGb
}

// GetRamGbOk returns a tuple with the RamGb field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmCreate) GetRamGbOk() (*interface{}, bool) {
	if o == nil || IsNil(o.RamGb) {
		return nil, false
	}
	return &o.RamGb, true
}

// SetRamGb sets field value
func (o *VmCreate) SetRamGb(v interface{}) {
	o.RamGb = v
}

// GetVolumeType returns the VolumeType field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *VmCreate) GetVolumeType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.VolumeType
}

// GetVolumeTypeOk returns a tuple with the VolumeType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmCreate) GetVolumeTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.VolumeType) {
		return nil, false
	}
	return &o.VolumeType, true
}

// SetVolumeType sets field value
func (o *VmCreate) SetVolumeType(v interface{}) {
	o.VolumeType = v
}

// GetVolumeGb returns the VolumeGb field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *VmCreate) GetVolumeGb() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.VolumeGb
}

// GetVolumeGbOk returns a tuple with the VolumeGb field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmCreate) GetVolumeGbOk() (*interface{}, bool) {
	if o == nil || IsNil(o.VolumeGb) {
		return nil, false
	}
	return &o.VolumeGb, true
}

// SetVolumeGb sets field value
func (o *VmCreate) SetVolumeGb(v interface{}) {
	o.VolumeGb = v
}

// GetSshKeyId returns the SshKeyId field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *VmCreate) GetSshKeyId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.SshKeyId
}

// GetSshKeyIdOk returns a tuple with the SshKeyId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmCreate) GetSshKeyIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.SshKeyId) {
		return nil, false
	}
	return &o.SshKeyId, true
}

// SetSshKeyId sets field value
func (o *VmCreate) SetSshKeyId(v interface{}) {
	o.SshKeyId = v
}

// GetSecurityGroupId returns the SecurityGroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmCreate) GetSecurityGroupId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.SecurityGroupId
}

// GetSecurityGroupIdOk returns a tuple with the SecurityGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmCreate) GetSecurityGroupIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.SecurityGroupId) {
		return nil, false
	}
	return &o.SecurityGroupId, true
}

// HasSecurityGroupId returns a boolean if a field has been set.
func (o *VmCreate) HasSecurityGroupId() bool {
	if o != nil && !IsNil(o.SecurityGroupId) {
		return true
	}

	return false
}

// SetSecurityGroupId gets a reference to the given interface{} and assigns it to the SecurityGroupId field.
func (o *VmCreate) SetSecurityGroupId(v interface{}) {
	o.SecurityGroupId = v
}

func (o VmCreate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VmCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.DataCenterId != nil {
		toSerialize["dataCenterId"] = o.DataCenterId
	}
	if o.OsId != nil {
		toSerialize["osId"] = o.OsId
	}
	if o.CloudNetworkType != nil {
		toSerialize["cloudNetworkType"] = o.CloudNetworkType
	}
	if o.VCpuType != nil {
		toSerialize["vCpuType"] = o.VCpuType
	}
	if o.VCpu != nil {
		toSerialize["vCpu"] = o.VCpu
	}
	if o.RamGb != nil {
		toSerialize["ramGb"] = o.RamGb
	}
	if o.VolumeType != nil {
		toSerialize["volumeType"] = o.VolumeType
	}
	if o.VolumeGb != nil {
		toSerialize["volumeGb"] = o.VolumeGb
	}
	if o.SshKeyId != nil {
		toSerialize["sshKeyId"] = o.SshKeyId
	}
	if o.SecurityGroupId != nil {
		toSerialize["securityGroupId"] = o.SecurityGroupId
	}
	return toSerialize, nil
}

func (o *VmCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"dataCenterId",
		"osId",
		"cloudNetworkType",
		"vCpuType",
		"vCpu",
		"ramGb",
		"volumeType",
		"volumeGb",
		"sshKeyId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVmCreate := _VmCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVmCreate)

	if err != nil {
		return err
	}

	*o = VmCreate(varVmCreate)

	return err
}

type NullableVmCreate struct {
	value *VmCreate
	isSet bool
}

func (v NullableVmCreate) Get() *VmCreate {
	return v.value
}

func (v *NullableVmCreate) Set(val *VmCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableVmCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableVmCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmCreate(val *VmCreate) *NullableVmCreate {
	return &NullableVmCreate{value: val, isSet: true}
}

func (v NullableVmCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
