/*
Public EMMA API

This <b>Infrastructure</b> API is for managing the cloud infrastructure within a project.  To access the API, enter your project, navigate to <b>Settings</b> > <b>Service Apps</b>, and create a service application. Select the access level: <b>Read</b>, <b>Operate</b>, or <b>Manage</b>.  After creating the service application, copy the <b>Client ID</b> and <b>Client Secret</b>. Send an API request to the endpoint <b>/issue-token</b> as specified in the <b>Authentication</b> section of the API documentation. You will receive access and refresh tokens in the response.  The Bearer access token is a text string, included in the request header:  -H \"Authorization: Bearer {token}\"  Use this token for API requests.  The access token will expire in 5 minutes, after which it must be refreshed using the refresh token.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emma

import (
	"encoding/json"
)

// checks if the VmConfigurationCost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VmConfigurationCost{}

// VmConfigurationCost struct for VmConfigurationCost
type VmConfigurationCost struct {
	Unit         interface{} `json:"unit,omitempty"`
	Currency     interface{} `json:"currency,omitempty"`
	PricePerUnit interface{} `json:"pricePerUnit,omitempty"`
}

// NewVmConfigurationCost instantiates a new VmConfigurationCost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmConfigurationCost() *VmConfigurationCost {
	this := VmConfigurationCost{}
	return &this
}

// NewVmConfigurationCostWithDefaults instantiates a new VmConfigurationCost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmConfigurationCostWithDefaults() *VmConfigurationCost {
	this := VmConfigurationCost{}
	return &this
}

// GetUnit returns the Unit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmConfigurationCost) GetUnit() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmConfigurationCost) GetUnitOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return &o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *VmConfigurationCost) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given interface{} and assigns it to the Unit field.
func (o *VmConfigurationCost) SetUnit(v interface{}) {
	o.Unit = v
}

// GetCurrency returns the Currency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmConfigurationCost) GetCurrency() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmConfigurationCost) GetCurrencyOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return &o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *VmConfigurationCost) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given interface{} and assigns it to the Currency field.
func (o *VmConfigurationCost) SetCurrency(v interface{}) {
	o.Currency = v
}

// GetPricePerUnit returns the PricePerUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmConfigurationCost) GetPricePerUnit() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.PricePerUnit
}

// GetPricePerUnitOk returns a tuple with the PricePerUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmConfigurationCost) GetPricePerUnitOk() (*interface{}, bool) {
	if o == nil || IsNil(o.PricePerUnit) {
		return nil, false
	}
	return &o.PricePerUnit, true
}

// HasPricePerUnit returns a boolean if a field has been set.
func (o *VmConfigurationCost) HasPricePerUnit() bool {
	if o != nil && !IsNil(o.PricePerUnit) {
		return true
	}

	return false
}

// SetPricePerUnit gets a reference to the given interface{} and assigns it to the PricePerUnit field.
func (o *VmConfigurationCost) SetPricePerUnit(v interface{}) {
	o.PricePerUnit = v
}

func (o VmConfigurationCost) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VmConfigurationCost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.PricePerUnit != nil {
		toSerialize["pricePerUnit"] = o.PricePerUnit
	}
	return toSerialize, nil
}

type NullableVmConfigurationCost struct {
	value *VmConfigurationCost
	isSet bool
}

func (v NullableVmConfigurationCost) Get() *VmConfigurationCost {
	return v.value
}

func (v *NullableVmConfigurationCost) Set(val *VmConfigurationCost) {
	v.value = val
	v.isSet = true
}

func (v NullableVmConfigurationCost) IsSet() bool {
	return v.isSet
}

func (v *NullableVmConfigurationCost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmConfigurationCost(val *VmConfigurationCost) *NullableVmConfigurationCost {
	return &NullableVmConfigurationCost{value: val, isSet: true}
}

func (v NullableVmConfigurationCost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmConfigurationCost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
