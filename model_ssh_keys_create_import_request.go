/*
Public EMMA API

This <b>Infrastructure</b> API is for managing the cloud infrastructure within a project.  To access the API, enter your project, navigate to <b>Settings</b> > <b>Service Apps</b>, and create a service application. Select the access level: <b>Read</b>, <b>Operate</b>, or <b>Manage</b>.  After creating the service application, copy the <b>Client ID</b> and <b>Client Secret</b>. Send an API request to the endpoint <b>/issue-token</b> as specified in the <b>Authentication</b> section of the API documentation. You will receive access and refresh tokens in the response.  The Bearer access token is a text string, included in the request header:  -H \"Authorization: Bearer {token}\"  Use this token for API requests.  The access token will expire in 5 minutes, after which it must be refreshed using the refresh token.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emma

import (
	"encoding/json"
	"fmt"
)

// SshKeysCreateImportRequest - struct for SshKeysCreateImportRequest
type SshKeysCreateImportRequest struct {
	SshKeyCreate *SshKeyCreate
	SshKeyImport *SshKeyImport
}

// SshKeyCreateAsSshKeysCreateImportRequest is a convenience function that returns SshKeyCreate wrapped in SshKeysCreateImportRequest
func SshKeyCreateAsSshKeysCreateImportRequest(v *SshKeyCreate) SshKeysCreateImportRequest {
	return SshKeysCreateImportRequest{
		SshKeyCreate: v,
	}
}

// SshKeyImportAsSshKeysCreateImportRequest is a convenience function that returns SshKeyImport wrapped in SshKeysCreateImportRequest
func SshKeyImportAsSshKeysCreateImportRequest(v *SshKeyImport) SshKeysCreateImportRequest {
	return SshKeysCreateImportRequest{
		SshKeyImport: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SshKeysCreateImportRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SshKeyCreate
	err = newStrictDecoder(data).Decode(&dst.SshKeyCreate)
	if err == nil {
		jsonSshKeyCreate, _ := json.Marshal(dst.SshKeyCreate)
		if string(jsonSshKeyCreate) == "{}" { // empty struct
			dst.SshKeyCreate = nil
		} else {
			match++
		}
	} else {
		dst.SshKeyCreate = nil
	}

	// try to unmarshal data into SshKeyImport
	err = newStrictDecoder(data).Decode(&dst.SshKeyImport)
	if err == nil {
		jsonSshKeyImport, _ := json.Marshal(dst.SshKeyImport)
		if string(jsonSshKeyImport) == "{}" { // empty struct
			dst.SshKeyImport = nil
		} else {
			match++
		}
	} else {
		dst.SshKeyImport = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SshKeyCreate = nil
		dst.SshKeyImport = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SshKeysCreateImportRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SshKeysCreateImportRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SshKeysCreateImportRequest) MarshalJSON() ([]byte, error) {
	if src.SshKeyCreate != nil {
		return json.Marshal(&src.SshKeyCreate)
	}

	if src.SshKeyImport != nil {
		return json.Marshal(&src.SshKeyImport)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SshKeysCreateImportRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.SshKeyCreate != nil {
		return obj.SshKeyCreate
	}

	if obj.SshKeyImport != nil {
		return obj.SshKeyImport
	}

	// all schemas are nil
	return nil
}

type NullableSshKeysCreateImportRequest struct {
	value *SshKeysCreateImportRequest
	isSet bool
}

func (v NullableSshKeysCreateImportRequest) Get() *SshKeysCreateImportRequest {
	return v.value
}

func (v *NullableSshKeysCreateImportRequest) Set(val *SshKeysCreateImportRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSshKeysCreateImportRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSshKeysCreateImportRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSshKeysCreateImportRequest(val *SshKeysCreateImportRequest) *NullableSshKeysCreateImportRequest {
	return &NullableSshKeysCreateImportRequest{value: val, isSet: true}
}

func (v NullableSshKeysCreateImportRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSshKeysCreateImportRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
