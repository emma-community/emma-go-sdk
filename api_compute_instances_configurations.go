/*
Public EMMA API

This <b>Infrastructure</b> API is for managing the cloud infrastructure within a project.  To access the API, enter your project, navigate to <b>Settings</b> > <b>Service Apps</b>, and create a service application. Select the access level: <b>Read</b>, <b>Operate</b>, or <b>Manage</b>.  After creating the service application, copy the <b>Client ID</b> and <b>Client Secret</b>. Send an API request to the endpoint <b>/issue-token</b> as specified in the <b>Authentication</b> section of the API documentation. You will receive access and refresh tokens in the response.  The Bearer access token is a text string, included in the request header:  -H \"Authorization: Bearer {token}\"  Use this token for API requests.  The access token will expire in 5 minutes, after which it must be refreshed using the refresh token.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emma

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// ComputeInstancesConfigurationsAPIService ComputeInstancesConfigurationsAPI service
type ComputeInstancesConfigurationsAPIService service

type ApiGetSpotConfigsRequest struct {
	ctx              context.Context
	ApiService       *ComputeInstancesConfigurationsAPIService
	providerId       *interface{}
	locationId       *int32
	dataCenterId     *interface{}
	cloudNetworkType *interface{}
	vCpuType         *interface{}
	vCpu             *interface{}
	vCpuMin          *interface{}
	vCpuMax          *interface{}
	ramGb            *interface{}
	ramGbMin         *interface{}
	ramGbMax         *interface{}
	volumeGb         *interface{}
	volumeGbMin      *interface{}
	volumeGbMax      *interface{}
	volumeType       *interface{}
	priceMin         *interface{}
	priceMax         *interface{}
	page             *interface{}
	size             *interface{}
}

// Provider ID
func (r ApiGetSpotConfigsRequest) ProviderId(providerId interface{}) ApiGetSpotConfigsRequest {
	r.providerId = &providerId
	return r
}

// Location ID
func (r ApiGetSpotConfigsRequest) LocationId(locationId int32) ApiGetSpotConfigsRequest {
	r.locationId = &locationId
	return r
}

// Data center ID
func (r ApiGetSpotConfigsRequest) DataCenterId(dataCenterId interface{}) ApiGetSpotConfigsRequest {
	r.dataCenterId = &dataCenterId
	return r
}

// Cloud network type
func (r ApiGetSpotConfigsRequest) CloudNetworkType(cloudNetworkType interface{}) ApiGetSpotConfigsRequest {
	r.cloudNetworkType = &cloudNetworkType
	return r
}

// Compute instance vCPU type
func (r ApiGetSpotConfigsRequest) VCpuType(vCpuType interface{}) ApiGetSpotConfigsRequest {
	r.vCpuType = &vCpuType
	return r
}

// Compute instance vCPU
func (r ApiGetSpotConfigsRequest) VCpu(vCpu interface{}) ApiGetSpotConfigsRequest {
	r.vCpu = &vCpu
	return r
}

// Compute instance vCPU minimum
func (r ApiGetSpotConfigsRequest) VCpuMin(vCpuMin interface{}) ApiGetSpotConfigsRequest {
	r.vCpuMin = &vCpuMin
	return r
}

// Compute instance vCPU maximum
func (r ApiGetSpotConfigsRequest) VCpuMax(vCpuMax interface{}) ApiGetSpotConfigsRequest {
	r.vCpuMax = &vCpuMax
	return r
}

// Compute instance RAM (GB)
func (r ApiGetSpotConfigsRequest) RamGb(ramGb interface{}) ApiGetSpotConfigsRequest {
	r.ramGb = &ramGb
	return r
}

// Compute instance RAM (GB) minimum
func (r ApiGetSpotConfigsRequest) RamGbMin(ramGbMin interface{}) ApiGetSpotConfigsRequest {
	r.ramGbMin = &ramGbMin
	return r
}

// Compute instance RAM (GB) maximum
func (r ApiGetSpotConfigsRequest) RamGbMax(ramGbMax interface{}) ApiGetSpotConfigsRequest {
	r.ramGbMax = &ramGbMax
	return r
}

// Compute instance volume (GB)
func (r ApiGetSpotConfigsRequest) VolumeGb(volumeGb interface{}) ApiGetSpotConfigsRequest {
	r.volumeGb = &volumeGb
	return r
}

// Compute instance volume minimum (GB)
func (r ApiGetSpotConfigsRequest) VolumeGbMin(volumeGbMin interface{}) ApiGetSpotConfigsRequest {
	r.volumeGbMin = &volumeGbMin
	return r
}

// Compute instance volume maximun (GB)
func (r ApiGetSpotConfigsRequest) VolumeGbMax(volumeGbMax interface{}) ApiGetSpotConfigsRequest {
	r.volumeGbMax = &volumeGbMax
	return r
}

// Compute instance volume type
func (r ApiGetSpotConfigsRequest) VolumeType(volumeType interface{}) ApiGetSpotConfigsRequest {
	r.volumeType = &volumeType
	return r
}

// Instance price minimum
func (r ApiGetSpotConfigsRequest) PriceMin(priceMin interface{}) ApiGetSpotConfigsRequest {
	r.priceMin = &priceMin
	return r
}

// Instance price maximum
func (r ApiGetSpotConfigsRequest) PriceMax(priceMax interface{}) ApiGetSpotConfigsRequest {
	r.priceMax = &priceMax
	return r
}

// Page number
func (r ApiGetSpotConfigsRequest) Page(page interface{}) ApiGetSpotConfigsRequest {
	r.page = &page
	return r
}

// Query size
func (r ApiGetSpotConfigsRequest) Size(size interface{}) ApiGetSpotConfigsRequest {
	r.size = &size
	return r
}

func (r ApiGetSpotConfigsRequest) Execute() (*GetVmConfigs200Response, *http.Response, error) {
	return r.ApiService.GetSpotConfigsExecute(r)
}

/*
GetSpotConfigs Search available configurations for spot instance creation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSpotConfigsRequest
*/
func (a *ComputeInstancesConfigurationsAPIService) GetSpotConfigs(ctx context.Context) ApiGetSpotConfigsRequest {
	return ApiGetSpotConfigsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return GetVmConfigs200Response
func (a *ComputeInstancesConfigurationsAPIService) GetSpotConfigsExecute(r ApiGetSpotConfigsRequest) (*GetVmConfigs200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetVmConfigs200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComputeInstancesConfigurationsAPIService.GetSpotConfigs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/spots-configs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.providerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "providerId", r.providerId, "")
	}
	if r.locationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "locationId", r.locationId, "")
	}
	if r.dataCenterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataCenterId", r.dataCenterId, "")
	}
	if r.cloudNetworkType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cloudNetworkType", r.cloudNetworkType, "")
	}
	if r.vCpuType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vCpuType", r.vCpuType, "")
	}
	if r.vCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vCpu", r.vCpu, "")
	}
	if r.vCpuMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vCpuMin", r.vCpuMin, "")
	}
	if r.vCpuMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vCpuMax", r.vCpuMax, "")
	}
	if r.ramGb != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ramGb", r.ramGb, "")
	}
	if r.ramGbMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ramGbMin", r.ramGbMin, "")
	}
	if r.ramGbMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ramGbMax", r.ramGbMax, "")
	}
	if r.volumeGb != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "volumeGb", r.volumeGb, "")
	}
	if r.volumeGbMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "volumeGbMin", r.volumeGbMin, "")
	}
	if r.volumeGbMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "volumeGbMax", r.volumeGbMax, "")
	}
	if r.volumeType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "volumeType", r.volumeType, "")
	}
	if r.priceMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "priceMin", r.priceMin, "")
	}
	if r.priceMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "priceMax", r.priceMax, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVmConfigsRequest struct {
	ctx              context.Context
	ApiService       *ComputeInstancesConfigurationsAPIService
	providerId       *interface{}
	locationId       *int32
	dataCenterId     *interface{}
	cloudNetworkType *interface{}
	vCpuType         *interface{}
	vCpu             *interface{}
	vCpuMin          *interface{}
	vCpuMax          *interface{}
	ramGb            *interface{}
	ramGbMin         *interface{}
	ramGbMax         *interface{}
	volumeGb         *interface{}
	volumeGbMin      *interface{}
	volumeGbMax      *interface{}
	volumeType       *interface{}
	priceMin         *interface{}
	priceMax         *interface{}
	page             *interface{}
	size             *interface{}
}

// Provider ID
func (r ApiGetVmConfigsRequest) ProviderId(providerId interface{}) ApiGetVmConfigsRequest {
	r.providerId = &providerId
	return r
}

// Location ID
func (r ApiGetVmConfigsRequest) LocationId(locationId int32) ApiGetVmConfigsRequest {
	r.locationId = &locationId
	return r
}

// Data center ID
func (r ApiGetVmConfigsRequest) DataCenterId(dataCenterId interface{}) ApiGetVmConfigsRequest {
	r.dataCenterId = &dataCenterId
	return r
}

// Cloud network type
func (r ApiGetVmConfigsRequest) CloudNetworkType(cloudNetworkType interface{}) ApiGetVmConfigsRequest {
	r.cloudNetworkType = &cloudNetworkType
	return r
}

// Compute instance vCPU type
func (r ApiGetVmConfigsRequest) VCpuType(vCpuType interface{}) ApiGetVmConfigsRequest {
	r.vCpuType = &vCpuType
	return r
}

// Compute instance vCPU
func (r ApiGetVmConfigsRequest) VCpu(vCpu interface{}) ApiGetVmConfigsRequest {
	r.vCpu = &vCpu
	return r
}

// Compute instance vCPU minimum
func (r ApiGetVmConfigsRequest) VCpuMin(vCpuMin interface{}) ApiGetVmConfigsRequest {
	r.vCpuMin = &vCpuMin
	return r
}

// Compute instance vCPU maximum
func (r ApiGetVmConfigsRequest) VCpuMax(vCpuMax interface{}) ApiGetVmConfigsRequest {
	r.vCpuMax = &vCpuMax
	return r
}

// Compute instance RAM (GB)
func (r ApiGetVmConfigsRequest) RamGb(ramGb interface{}) ApiGetVmConfigsRequest {
	r.ramGb = &ramGb
	return r
}

// Compute instance RAM (GB) minimum
func (r ApiGetVmConfigsRequest) RamGbMin(ramGbMin interface{}) ApiGetVmConfigsRequest {
	r.ramGbMin = &ramGbMin
	return r
}

// Compute instance RAM (GB) maximum
func (r ApiGetVmConfigsRequest) RamGbMax(ramGbMax interface{}) ApiGetVmConfigsRequest {
	r.ramGbMax = &ramGbMax
	return r
}

// Compute instance volume (GB)
func (r ApiGetVmConfigsRequest) VolumeGb(volumeGb interface{}) ApiGetVmConfigsRequest {
	r.volumeGb = &volumeGb
	return r
}

// Compute instance volume minimum (GB)
func (r ApiGetVmConfigsRequest) VolumeGbMin(volumeGbMin interface{}) ApiGetVmConfigsRequest {
	r.volumeGbMin = &volumeGbMin
	return r
}

// Compute instance volume maximun (GB)
func (r ApiGetVmConfigsRequest) VolumeGbMax(volumeGbMax interface{}) ApiGetVmConfigsRequest {
	r.volumeGbMax = &volumeGbMax
	return r
}

// Compute instance volume type
func (r ApiGetVmConfigsRequest) VolumeType(volumeType interface{}) ApiGetVmConfigsRequest {
	r.volumeType = &volumeType
	return r
}

// Instance price minimum
func (r ApiGetVmConfigsRequest) PriceMin(priceMin interface{}) ApiGetVmConfigsRequest {
	r.priceMin = &priceMin
	return r
}

// Instance price maximum
func (r ApiGetVmConfigsRequest) PriceMax(priceMax interface{}) ApiGetVmConfigsRequest {
	r.priceMax = &priceMax
	return r
}

// Page number
func (r ApiGetVmConfigsRequest) Page(page interface{}) ApiGetVmConfigsRequest {
	r.page = &page
	return r
}

// Query size
func (r ApiGetVmConfigsRequest) Size(size interface{}) ApiGetVmConfigsRequest {
	r.size = &size
	return r
}

func (r ApiGetVmConfigsRequest) Execute() (*GetVmConfigs200Response, *http.Response, error) {
	return r.ApiService.GetVmConfigsExecute(r)
}

/*
GetVmConfigs Search available configurations for virtual machine creation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetVmConfigsRequest
*/
func (a *ComputeInstancesConfigurationsAPIService) GetVmConfigs(ctx context.Context) ApiGetVmConfigsRequest {
	return ApiGetVmConfigsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return GetVmConfigs200Response
func (a *ComputeInstancesConfigurationsAPIService) GetVmConfigsExecute(r ApiGetVmConfigsRequest) (*GetVmConfigs200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetVmConfigs200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComputeInstancesConfigurationsAPIService.GetVmConfigs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/vms-configs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.providerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "providerId", r.providerId, "")
	}
	if r.locationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "locationId", r.locationId, "")
	}
	if r.dataCenterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataCenterId", r.dataCenterId, "")
	}
	if r.cloudNetworkType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cloudNetworkType", r.cloudNetworkType, "")
	}
	if r.vCpuType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vCpuType", r.vCpuType, "")
	}
	if r.vCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vCpu", r.vCpu, "")
	}
	if r.vCpuMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vCpuMin", r.vCpuMin, "")
	}
	if r.vCpuMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vCpuMax", r.vCpuMax, "")
	}
	if r.ramGb != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ramGb", r.ramGb, "")
	}
	if r.ramGbMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ramGbMin", r.ramGbMin, "")
	}
	if r.ramGbMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ramGbMax", r.ramGbMax, "")
	}
	if r.volumeGb != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "volumeGb", r.volumeGb, "")
	}
	if r.volumeGbMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "volumeGbMin", r.volumeGbMin, "")
	}
	if r.volumeGbMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "volumeGbMax", r.volumeGbMax, "")
	}
	if r.volumeType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "volumeType", r.volumeType, "")
	}
	if r.priceMin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "priceMin", r.priceMin, "")
	}
	if r.priceMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "priceMax", r.priceMax, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v UnauthorizedError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ForbiddenError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
