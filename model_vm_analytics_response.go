/*
Public EMMA API

### About Infrastructure API  **Base URL:** **<u>https://api.emma.ms/external</u>**   This **Infrastructure API** is for managing the emma cloud infrastructure within a project. The API enables you to view, create, edit, and delete _Virtual machines, Spot instances, Applications, Kubernetes clusters, SSH keys, Security groups, and Backup policies_. For creating the resources you can use the endpoints with the dictionaries: _Data centers, Locations, Providers, Operating systems, Virtual machines configurations, Spot instances configurations, Kubernetes clusters configurations._   ### Authentication   #### 1. Create service application   To access the API, enter your project, navigate to **Settings** > **Service Apps**, and create a service application. Select the access level **Read**, **Operate**, or **Manage**.   - **Read** - only GET methods are allowed in the API.   - **Operate** - some operations are allowed with the resources (e.g. _Start, Reboot,_ and _Shutdown_ of the Virtual machines).   - **Manage** - full creating, updating, and deleting of the resources is allowed.    #### 2. Get access token   - Copy the **Client ID** and **Client Secret** in the service application.  - Send an API request to the endpoint **_/issue-token** as specified in the **Authentication** section of the API documentation. You will receive access and refresh tokens in the response.   _For Linux / Mac:_  ```  curl -X POST https://api.emma.ms/external/v1/issue-token \\  -H \"Content-Type: application/json\" \\  -d '{\"clientId\": \"YOUR-CLIENT-ID\", \"clientSecret\": \"YOUR-CLIENT-SECRET\"}'  ```  _For Windows:_  ```  curl -X POST https://api.emma.ms/external/v1/issue-token ^  -H \"Content-Type: application/json\" ^  -d \"{\\\"clientId\\\": \\\"YOUR-CLIENT-ID\\\", \\\"clientSecret\\\": \\\"YOUR-CLIENT-SECRET\\\"}\"  ```   #### 3. Use access token in requests  The Bearer access token is a text string, included in the request header, for example:   _For Linux / Mac:_  ```  curl -X GET https://api.emma.ms/external/v1/locations -H \"Authorization: Bearer YOUR-ACCESS-TOKEN-HERE\"  ```   Use this token for the API requests.    #### 4. Refresh token  The access token will expire in 10 minutes. A new access token may be created using the refresh token (without Client ID and Client Secret).   To get a new access token send a request to the **_/refresh-token** endpoint:    _For Linux / Mac:_  ```  curl -X POST https://api.emma.ms/external/v1/refresh-token \\  -H \"Content-Type: application/json\" \\  -d '{\"refreshToken\": \"YOUR-REFRESH-TOKEN\"}'  ```       ### Possible response status codes   We use standard HTTP response codes to show the success or failure of requests.   `2xx` - successful responses.   `4xx` - client error responses (the response contains an explanation of the error).   `5xx` - server error responses.   The API uses the following status codes:   | Status Code | Description                  | Notes                                                                  |  |-------------|------------------------------|------------------------------------------------------------------------|  | 200         | OK                           | The request was successful.                                             |  | 201         | Created                      | The object was successfully created. This code is only used with objects that are created immediately.  | 204         | No content                   | A successful request, but there is no additional information to send back in the response body (in a case when the object was deleted).    | 400         | Bad Request                  | The request could not be understood by the server. Incoming parameters might not be valid. |  | 401         | Unauthorized            | The client is unauthenticated. The client must authenticate itself to get the requested response. |  | 403         | Forbidden                   | The client does not have access rights to the content.  | 404         | Not Found                    | The requested resource is not found.                                    |  | 409         | Conflict | This response is sent when a request conflicts with the current state of the object (e.g. deleting the security group with the compute instances in it).|  | 422         | Unprocessable Content   | The request was well-formed but was unable to be followed due to incorrect field values (e.g. creation of a virtual machine in the non-existent data center).  |  | 500         | Internal server Error                 | The server could not return the representation due to an internal server error. | 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emma

import (
	"encoding/json"
)

// checks if the VmAnalyticsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VmAnalyticsResponse{}

// VmAnalyticsResponse struct for VmAnalyticsResponse
type VmAnalyticsResponse struct {
	// ID of VM
	VmId *int32 `json:"vmId,omitempty"`
	Timecode *string `json:"timecode,omitempty"`
	// Start of the period for average value calculation
	AvgDateStart *string `json:"avgDateStart,omitempty"`
	// End of the period for average value calculation
	AvgDateEnd *string `json:"avgDateEnd,omitempty"`
	// Start of the period for percentile value calculation
	QuantilesDateStart *string `json:"quantilesDateStart,omitempty"`
	// End of the period for percentile value calculation
	QuantilesDateEnd *string `json:"quantilesDateEnd,omitempty"`
	// Internal service parameter
	CpuDataPresent *int32 `json:"cpuDataPresent,omitempty"`
	// CPU utilization with values in range [0, 100*vCPUs]
	CpuUtilizationAverageCores *float32 `json:"cpuUtilizationAverageCores,omitempty"`
	// 10th percentile of CPU utilization
	CpuUtilizationAverageCoresQ10 *float32 `json:"cpuUtilizationAverageCoresQ10,omitempty"`
	// 90th percentile of CPU utilization
	CpuUtilizationAverageCoresQ90 *float32 `json:"cpuUtilizationAverageCoresQ90,omitempty"`
	// Total CPU, vCPUs
	CpuCoresNumber *int32 `json:"cpuCoresNumber,omitempty"`
	// Total CPU, %
	CpuTotalPercent *int32 `json:"cpuTotalPercent,omitempty"`
	// Label
	CpuHumanLabel *string `json:"cpuHumanLabel,omitempty"`
	// Internal service parameter
	RamDataPresent *int32 `json:"ramDataPresent,omitempty"`
	// Memory utilization
	RamUsageAverageMb *float32 `json:"ramUsageAverageMb,omitempty"`
	// 10th percentile of memory utilization
	RamUsageAverageMbQ10 *float32 `json:"ramUsageAverageMbQ10,omitempty"`
	// 90th percentile of memory utilization
	RamUsageAverageMbQ90 *float32 `json:"ramUsageAverageMbQ90,omitempty"`
	// Total memory, MB
	RamTotalAmountMb *int32 `json:"ramTotalAmountMb,omitempty"`
	// Label
	RamHumanLabel *string `json:"ramHumanLabel,omitempty"`
	// Internal service parameter
	DiskUsedDataPresent *int32 `json:"diskUsedDataPresent,omitempty"`
	// Disk utilization
	DiskSpaceUsedGb *float32 `json:"diskSpaceUsedGb,omitempty"`
	// 10th percentile of disk utilization
	DiskSpaceUsedGbQ10 *float32 `json:"diskSpaceUsedGbQ10,omitempty"`
	// 90th percentile of disk utilization
	DiskSpaceUsedGbQ90 *float32 `json:"diskSpaceUsedGbQ90,omitempty"`
	// Total disk size, GB
	DiskSpaceTotalGb *float32 `json:"diskSpaceTotalGb,omitempty"`
	// Label
	DiskSpaceHumanLabel *string `json:"diskSpaceHumanLabel,omitempty"`
	// Internal service parameter
	DiskWriteDataPresent *int32 `json:"diskWriteDataPresent,omitempty"`
	// Disk write, bps
	DiskWriteBps *float32 `json:"diskWriteBps,omitempty"`
	// Disk write
	DiskWriteHuman *float32 `json:"diskWriteHuman,omitempty"`
	// Label
	DiskWriteHumanLabel *string `json:"diskWriteHumanLabel,omitempty"`
	// Internal service parameter
	DiskReadDataPresent *int32 `json:"diskReadDataPresent,omitempty"`
	// Disk read, bps
	DiskReadBps *float32 `json:"diskReadBps,omitempty"`
	// Disk read
	DiskReadHuman *float32 `json:"diskReadHuman,omitempty"`
	// Label
	DiskReadHumanLabel *string `json:"diskReadHumanLabel,omitempty"`
	// Internal service parameter
	NetworkOutDataPresent *int32 `json:"networkOutDataPresent,omitempty"`
	// Network out, bps
	NetworkOutBps *float32 `json:"networkOutBps,omitempty"`
	// Network out
	NetworkOutHuman *float32 `json:"networkOutHuman,omitempty"`
	// Label
	NetworkOutHumanLabel *string `json:"networkOutHumanLabel,omitempty"`
	// Internal service parameter
	NetworkInDataPresent *int32 `json:"networkInDataPresent,omitempty"`
	// Network in, bps
	NetworkInBps *float32 `json:"networkInBps,omitempty"`
	// Network in
	NetworkInHuman *float32 `json:"networkInHuman,omitempty"`
	// Label
	NetworkInHumanLabel *string `json:"networkInHumanLabel,omitempty"`
	// Internal service parameter
	IsShownShort *int32 `json:"isShownShort,omitempty"`
	// Dataset type
	Type *string `json:"type,omitempty"`
}

// NewVmAnalyticsResponse instantiates a new VmAnalyticsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmAnalyticsResponse() *VmAnalyticsResponse {
	this := VmAnalyticsResponse{}
	return &this
}

// NewVmAnalyticsResponseWithDefaults instantiates a new VmAnalyticsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmAnalyticsResponseWithDefaults() *VmAnalyticsResponse {
	this := VmAnalyticsResponse{}
	return &this
}

// GetVmId returns the VmId field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetVmId() int32 {
	if o == nil || IsNil(o.VmId) {
		var ret int32
		return ret
	}
	return *o.VmId
}

// GetVmIdOk returns a tuple with the VmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetVmIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VmId) {
		return nil, false
	}
	return o.VmId, true
}

// HasVmId returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasVmId() bool {
	if o != nil && !IsNil(o.VmId) {
		return true
	}

	return false
}

// SetVmId gets a reference to the given int32 and assigns it to the VmId field.
func (o *VmAnalyticsResponse) SetVmId(v int32) {
	o.VmId = &v
}

// GetTimecode returns the Timecode field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetTimecode() string {
	if o == nil || IsNil(o.Timecode) {
		var ret string
		return ret
	}
	return *o.Timecode
}

// GetTimecodeOk returns a tuple with the Timecode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetTimecodeOk() (*string, bool) {
	if o == nil || IsNil(o.Timecode) {
		return nil, false
	}
	return o.Timecode, true
}

// HasTimecode returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasTimecode() bool {
	if o != nil && !IsNil(o.Timecode) {
		return true
	}

	return false
}

// SetTimecode gets a reference to the given string and assigns it to the Timecode field.
func (o *VmAnalyticsResponse) SetTimecode(v string) {
	o.Timecode = &v
}

// GetAvgDateStart returns the AvgDateStart field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetAvgDateStart() string {
	if o == nil || IsNil(o.AvgDateStart) {
		var ret string
		return ret
	}
	return *o.AvgDateStart
}

// GetAvgDateStartOk returns a tuple with the AvgDateStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetAvgDateStartOk() (*string, bool) {
	if o == nil || IsNil(o.AvgDateStart) {
		return nil, false
	}
	return o.AvgDateStart, true
}

// HasAvgDateStart returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasAvgDateStart() bool {
	if o != nil && !IsNil(o.AvgDateStart) {
		return true
	}

	return false
}

// SetAvgDateStart gets a reference to the given string and assigns it to the AvgDateStart field.
func (o *VmAnalyticsResponse) SetAvgDateStart(v string) {
	o.AvgDateStart = &v
}

// GetAvgDateEnd returns the AvgDateEnd field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetAvgDateEnd() string {
	if o == nil || IsNil(o.AvgDateEnd) {
		var ret string
		return ret
	}
	return *o.AvgDateEnd
}

// GetAvgDateEndOk returns a tuple with the AvgDateEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetAvgDateEndOk() (*string, bool) {
	if o == nil || IsNil(o.AvgDateEnd) {
		return nil, false
	}
	return o.AvgDateEnd, true
}

// HasAvgDateEnd returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasAvgDateEnd() bool {
	if o != nil && !IsNil(o.AvgDateEnd) {
		return true
	}

	return false
}

// SetAvgDateEnd gets a reference to the given string and assigns it to the AvgDateEnd field.
func (o *VmAnalyticsResponse) SetAvgDateEnd(v string) {
	o.AvgDateEnd = &v
}

// GetQuantilesDateStart returns the QuantilesDateStart field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetQuantilesDateStart() string {
	if o == nil || IsNil(o.QuantilesDateStart) {
		var ret string
		return ret
	}
	return *o.QuantilesDateStart
}

// GetQuantilesDateStartOk returns a tuple with the QuantilesDateStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetQuantilesDateStartOk() (*string, bool) {
	if o == nil || IsNil(o.QuantilesDateStart) {
		return nil, false
	}
	return o.QuantilesDateStart, true
}

// HasQuantilesDateStart returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasQuantilesDateStart() bool {
	if o != nil && !IsNil(o.QuantilesDateStart) {
		return true
	}

	return false
}

// SetQuantilesDateStart gets a reference to the given string and assigns it to the QuantilesDateStart field.
func (o *VmAnalyticsResponse) SetQuantilesDateStart(v string) {
	o.QuantilesDateStart = &v
}

// GetQuantilesDateEnd returns the QuantilesDateEnd field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetQuantilesDateEnd() string {
	if o == nil || IsNil(o.QuantilesDateEnd) {
		var ret string
		return ret
	}
	return *o.QuantilesDateEnd
}

// GetQuantilesDateEndOk returns a tuple with the QuantilesDateEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetQuantilesDateEndOk() (*string, bool) {
	if o == nil || IsNil(o.QuantilesDateEnd) {
		return nil, false
	}
	return o.QuantilesDateEnd, true
}

// HasQuantilesDateEnd returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasQuantilesDateEnd() bool {
	if o != nil && !IsNil(o.QuantilesDateEnd) {
		return true
	}

	return false
}

// SetQuantilesDateEnd gets a reference to the given string and assigns it to the QuantilesDateEnd field.
func (o *VmAnalyticsResponse) SetQuantilesDateEnd(v string) {
	o.QuantilesDateEnd = &v
}

// GetCpuDataPresent returns the CpuDataPresent field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetCpuDataPresent() int32 {
	if o == nil || IsNil(o.CpuDataPresent) {
		var ret int32
		return ret
	}
	return *o.CpuDataPresent
}

// GetCpuDataPresentOk returns a tuple with the CpuDataPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetCpuDataPresentOk() (*int32, bool) {
	if o == nil || IsNil(o.CpuDataPresent) {
		return nil, false
	}
	return o.CpuDataPresent, true
}

// HasCpuDataPresent returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasCpuDataPresent() bool {
	if o != nil && !IsNil(o.CpuDataPresent) {
		return true
	}

	return false
}

// SetCpuDataPresent gets a reference to the given int32 and assigns it to the CpuDataPresent field.
func (o *VmAnalyticsResponse) SetCpuDataPresent(v int32) {
	o.CpuDataPresent = &v
}

// GetCpuUtilizationAverageCores returns the CpuUtilizationAverageCores field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetCpuUtilizationAverageCores() float32 {
	if o == nil || IsNil(o.CpuUtilizationAverageCores) {
		var ret float32
		return ret
	}
	return *o.CpuUtilizationAverageCores
}

// GetCpuUtilizationAverageCoresOk returns a tuple with the CpuUtilizationAverageCores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetCpuUtilizationAverageCoresOk() (*float32, bool) {
	if o == nil || IsNil(o.CpuUtilizationAverageCores) {
		return nil, false
	}
	return o.CpuUtilizationAverageCores, true
}

// HasCpuUtilizationAverageCores returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasCpuUtilizationAverageCores() bool {
	if o != nil && !IsNil(o.CpuUtilizationAverageCores) {
		return true
	}

	return false
}

// SetCpuUtilizationAverageCores gets a reference to the given float32 and assigns it to the CpuUtilizationAverageCores field.
func (o *VmAnalyticsResponse) SetCpuUtilizationAverageCores(v float32) {
	o.CpuUtilizationAverageCores = &v
}

// GetCpuUtilizationAverageCoresQ10 returns the CpuUtilizationAverageCoresQ10 field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetCpuUtilizationAverageCoresQ10() float32 {
	if o == nil || IsNil(o.CpuUtilizationAverageCoresQ10) {
		var ret float32
		return ret
	}
	return *o.CpuUtilizationAverageCoresQ10
}

// GetCpuUtilizationAverageCoresQ10Ok returns a tuple with the CpuUtilizationAverageCoresQ10 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetCpuUtilizationAverageCoresQ10Ok() (*float32, bool) {
	if o == nil || IsNil(o.CpuUtilizationAverageCoresQ10) {
		return nil, false
	}
	return o.CpuUtilizationAverageCoresQ10, true
}

// HasCpuUtilizationAverageCoresQ10 returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasCpuUtilizationAverageCoresQ10() bool {
	if o != nil && !IsNil(o.CpuUtilizationAverageCoresQ10) {
		return true
	}

	return false
}

// SetCpuUtilizationAverageCoresQ10 gets a reference to the given float32 and assigns it to the CpuUtilizationAverageCoresQ10 field.
func (o *VmAnalyticsResponse) SetCpuUtilizationAverageCoresQ10(v float32) {
	o.CpuUtilizationAverageCoresQ10 = &v
}

// GetCpuUtilizationAverageCoresQ90 returns the CpuUtilizationAverageCoresQ90 field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetCpuUtilizationAverageCoresQ90() float32 {
	if o == nil || IsNil(o.CpuUtilizationAverageCoresQ90) {
		var ret float32
		return ret
	}
	return *o.CpuUtilizationAverageCoresQ90
}

// GetCpuUtilizationAverageCoresQ90Ok returns a tuple with the CpuUtilizationAverageCoresQ90 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetCpuUtilizationAverageCoresQ90Ok() (*float32, bool) {
	if o == nil || IsNil(o.CpuUtilizationAverageCoresQ90) {
		return nil, false
	}
	return o.CpuUtilizationAverageCoresQ90, true
}

// HasCpuUtilizationAverageCoresQ90 returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasCpuUtilizationAverageCoresQ90() bool {
	if o != nil && !IsNil(o.CpuUtilizationAverageCoresQ90) {
		return true
	}

	return false
}

// SetCpuUtilizationAverageCoresQ90 gets a reference to the given float32 and assigns it to the CpuUtilizationAverageCoresQ90 field.
func (o *VmAnalyticsResponse) SetCpuUtilizationAverageCoresQ90(v float32) {
	o.CpuUtilizationAverageCoresQ90 = &v
}

// GetCpuCoresNumber returns the CpuCoresNumber field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetCpuCoresNumber() int32 {
	if o == nil || IsNil(o.CpuCoresNumber) {
		var ret int32
		return ret
	}
	return *o.CpuCoresNumber
}

// GetCpuCoresNumberOk returns a tuple with the CpuCoresNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetCpuCoresNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.CpuCoresNumber) {
		return nil, false
	}
	return o.CpuCoresNumber, true
}

// HasCpuCoresNumber returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasCpuCoresNumber() bool {
	if o != nil && !IsNil(o.CpuCoresNumber) {
		return true
	}

	return false
}

// SetCpuCoresNumber gets a reference to the given int32 and assigns it to the CpuCoresNumber field.
func (o *VmAnalyticsResponse) SetCpuCoresNumber(v int32) {
	o.CpuCoresNumber = &v
}

// GetCpuTotalPercent returns the CpuTotalPercent field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetCpuTotalPercent() int32 {
	if o == nil || IsNil(o.CpuTotalPercent) {
		var ret int32
		return ret
	}
	return *o.CpuTotalPercent
}

// GetCpuTotalPercentOk returns a tuple with the CpuTotalPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetCpuTotalPercentOk() (*int32, bool) {
	if o == nil || IsNil(o.CpuTotalPercent) {
		return nil, false
	}
	return o.CpuTotalPercent, true
}

// HasCpuTotalPercent returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasCpuTotalPercent() bool {
	if o != nil && !IsNil(o.CpuTotalPercent) {
		return true
	}

	return false
}

// SetCpuTotalPercent gets a reference to the given int32 and assigns it to the CpuTotalPercent field.
func (o *VmAnalyticsResponse) SetCpuTotalPercent(v int32) {
	o.CpuTotalPercent = &v
}

// GetCpuHumanLabel returns the CpuHumanLabel field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetCpuHumanLabel() string {
	if o == nil || IsNil(o.CpuHumanLabel) {
		var ret string
		return ret
	}
	return *o.CpuHumanLabel
}

// GetCpuHumanLabelOk returns a tuple with the CpuHumanLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetCpuHumanLabelOk() (*string, bool) {
	if o == nil || IsNil(o.CpuHumanLabel) {
		return nil, false
	}
	return o.CpuHumanLabel, true
}

// HasCpuHumanLabel returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasCpuHumanLabel() bool {
	if o != nil && !IsNil(o.CpuHumanLabel) {
		return true
	}

	return false
}

// SetCpuHumanLabel gets a reference to the given string and assigns it to the CpuHumanLabel field.
func (o *VmAnalyticsResponse) SetCpuHumanLabel(v string) {
	o.CpuHumanLabel = &v
}

// GetRamDataPresent returns the RamDataPresent field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetRamDataPresent() int32 {
	if o == nil || IsNil(o.RamDataPresent) {
		var ret int32
		return ret
	}
	return *o.RamDataPresent
}

// GetRamDataPresentOk returns a tuple with the RamDataPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetRamDataPresentOk() (*int32, bool) {
	if o == nil || IsNil(o.RamDataPresent) {
		return nil, false
	}
	return o.RamDataPresent, true
}

// HasRamDataPresent returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasRamDataPresent() bool {
	if o != nil && !IsNil(o.RamDataPresent) {
		return true
	}

	return false
}

// SetRamDataPresent gets a reference to the given int32 and assigns it to the RamDataPresent field.
func (o *VmAnalyticsResponse) SetRamDataPresent(v int32) {
	o.RamDataPresent = &v
}

// GetRamUsageAverageMb returns the RamUsageAverageMb field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetRamUsageAverageMb() float32 {
	if o == nil || IsNil(o.RamUsageAverageMb) {
		var ret float32
		return ret
	}
	return *o.RamUsageAverageMb
}

// GetRamUsageAverageMbOk returns a tuple with the RamUsageAverageMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetRamUsageAverageMbOk() (*float32, bool) {
	if o == nil || IsNil(o.RamUsageAverageMb) {
		return nil, false
	}
	return o.RamUsageAverageMb, true
}

// HasRamUsageAverageMb returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasRamUsageAverageMb() bool {
	if o != nil && !IsNil(o.RamUsageAverageMb) {
		return true
	}

	return false
}

// SetRamUsageAverageMb gets a reference to the given float32 and assigns it to the RamUsageAverageMb field.
func (o *VmAnalyticsResponse) SetRamUsageAverageMb(v float32) {
	o.RamUsageAverageMb = &v
}

// GetRamUsageAverageMbQ10 returns the RamUsageAverageMbQ10 field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetRamUsageAverageMbQ10() float32 {
	if o == nil || IsNil(o.RamUsageAverageMbQ10) {
		var ret float32
		return ret
	}
	return *o.RamUsageAverageMbQ10
}

// GetRamUsageAverageMbQ10Ok returns a tuple with the RamUsageAverageMbQ10 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetRamUsageAverageMbQ10Ok() (*float32, bool) {
	if o == nil || IsNil(o.RamUsageAverageMbQ10) {
		return nil, false
	}
	return o.RamUsageAverageMbQ10, true
}

// HasRamUsageAverageMbQ10 returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasRamUsageAverageMbQ10() bool {
	if o != nil && !IsNil(o.RamUsageAverageMbQ10) {
		return true
	}

	return false
}

// SetRamUsageAverageMbQ10 gets a reference to the given float32 and assigns it to the RamUsageAverageMbQ10 field.
func (o *VmAnalyticsResponse) SetRamUsageAverageMbQ10(v float32) {
	o.RamUsageAverageMbQ10 = &v
}

// GetRamUsageAverageMbQ90 returns the RamUsageAverageMbQ90 field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetRamUsageAverageMbQ90() float32 {
	if o == nil || IsNil(o.RamUsageAverageMbQ90) {
		var ret float32
		return ret
	}
	return *o.RamUsageAverageMbQ90
}

// GetRamUsageAverageMbQ90Ok returns a tuple with the RamUsageAverageMbQ90 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetRamUsageAverageMbQ90Ok() (*float32, bool) {
	if o == nil || IsNil(o.RamUsageAverageMbQ90) {
		return nil, false
	}
	return o.RamUsageAverageMbQ90, true
}

// HasRamUsageAverageMbQ90 returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasRamUsageAverageMbQ90() bool {
	if o != nil && !IsNil(o.RamUsageAverageMbQ90) {
		return true
	}

	return false
}

// SetRamUsageAverageMbQ90 gets a reference to the given float32 and assigns it to the RamUsageAverageMbQ90 field.
func (o *VmAnalyticsResponse) SetRamUsageAverageMbQ90(v float32) {
	o.RamUsageAverageMbQ90 = &v
}

// GetRamTotalAmountMb returns the RamTotalAmountMb field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetRamTotalAmountMb() int32 {
	if o == nil || IsNil(o.RamTotalAmountMb) {
		var ret int32
		return ret
	}
	return *o.RamTotalAmountMb
}

// GetRamTotalAmountMbOk returns a tuple with the RamTotalAmountMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetRamTotalAmountMbOk() (*int32, bool) {
	if o == nil || IsNil(o.RamTotalAmountMb) {
		return nil, false
	}
	return o.RamTotalAmountMb, true
}

// HasRamTotalAmountMb returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasRamTotalAmountMb() bool {
	if o != nil && !IsNil(o.RamTotalAmountMb) {
		return true
	}

	return false
}

// SetRamTotalAmountMb gets a reference to the given int32 and assigns it to the RamTotalAmountMb field.
func (o *VmAnalyticsResponse) SetRamTotalAmountMb(v int32) {
	o.RamTotalAmountMb = &v
}

// GetRamHumanLabel returns the RamHumanLabel field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetRamHumanLabel() string {
	if o == nil || IsNil(o.RamHumanLabel) {
		var ret string
		return ret
	}
	return *o.RamHumanLabel
}

// GetRamHumanLabelOk returns a tuple with the RamHumanLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetRamHumanLabelOk() (*string, bool) {
	if o == nil || IsNil(o.RamHumanLabel) {
		return nil, false
	}
	return o.RamHumanLabel, true
}

// HasRamHumanLabel returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasRamHumanLabel() bool {
	if o != nil && !IsNil(o.RamHumanLabel) {
		return true
	}

	return false
}

// SetRamHumanLabel gets a reference to the given string and assigns it to the RamHumanLabel field.
func (o *VmAnalyticsResponse) SetRamHumanLabel(v string) {
	o.RamHumanLabel = &v
}

// GetDiskUsedDataPresent returns the DiskUsedDataPresent field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetDiskUsedDataPresent() int32 {
	if o == nil || IsNil(o.DiskUsedDataPresent) {
		var ret int32
		return ret
	}
	return *o.DiskUsedDataPresent
}

// GetDiskUsedDataPresentOk returns a tuple with the DiskUsedDataPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetDiskUsedDataPresentOk() (*int32, bool) {
	if o == nil || IsNil(o.DiskUsedDataPresent) {
		return nil, false
	}
	return o.DiskUsedDataPresent, true
}

// HasDiskUsedDataPresent returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasDiskUsedDataPresent() bool {
	if o != nil && !IsNil(o.DiskUsedDataPresent) {
		return true
	}

	return false
}

// SetDiskUsedDataPresent gets a reference to the given int32 and assigns it to the DiskUsedDataPresent field.
func (o *VmAnalyticsResponse) SetDiskUsedDataPresent(v int32) {
	o.DiskUsedDataPresent = &v
}

// GetDiskSpaceUsedGb returns the DiskSpaceUsedGb field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetDiskSpaceUsedGb() float32 {
	if o == nil || IsNil(o.DiskSpaceUsedGb) {
		var ret float32
		return ret
	}
	return *o.DiskSpaceUsedGb
}

// GetDiskSpaceUsedGbOk returns a tuple with the DiskSpaceUsedGb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetDiskSpaceUsedGbOk() (*float32, bool) {
	if o == nil || IsNil(o.DiskSpaceUsedGb) {
		return nil, false
	}
	return o.DiskSpaceUsedGb, true
}

// HasDiskSpaceUsedGb returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasDiskSpaceUsedGb() bool {
	if o != nil && !IsNil(o.DiskSpaceUsedGb) {
		return true
	}

	return false
}

// SetDiskSpaceUsedGb gets a reference to the given float32 and assigns it to the DiskSpaceUsedGb field.
func (o *VmAnalyticsResponse) SetDiskSpaceUsedGb(v float32) {
	o.DiskSpaceUsedGb = &v
}

// GetDiskSpaceUsedGbQ10 returns the DiskSpaceUsedGbQ10 field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetDiskSpaceUsedGbQ10() float32 {
	if o == nil || IsNil(o.DiskSpaceUsedGbQ10) {
		var ret float32
		return ret
	}
	return *o.DiskSpaceUsedGbQ10
}

// GetDiskSpaceUsedGbQ10Ok returns a tuple with the DiskSpaceUsedGbQ10 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetDiskSpaceUsedGbQ10Ok() (*float32, bool) {
	if o == nil || IsNil(o.DiskSpaceUsedGbQ10) {
		return nil, false
	}
	return o.DiskSpaceUsedGbQ10, true
}

// HasDiskSpaceUsedGbQ10 returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasDiskSpaceUsedGbQ10() bool {
	if o != nil && !IsNil(o.DiskSpaceUsedGbQ10) {
		return true
	}

	return false
}

// SetDiskSpaceUsedGbQ10 gets a reference to the given float32 and assigns it to the DiskSpaceUsedGbQ10 field.
func (o *VmAnalyticsResponse) SetDiskSpaceUsedGbQ10(v float32) {
	o.DiskSpaceUsedGbQ10 = &v
}

// GetDiskSpaceUsedGbQ90 returns the DiskSpaceUsedGbQ90 field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetDiskSpaceUsedGbQ90() float32 {
	if o == nil || IsNil(o.DiskSpaceUsedGbQ90) {
		var ret float32
		return ret
	}
	return *o.DiskSpaceUsedGbQ90
}

// GetDiskSpaceUsedGbQ90Ok returns a tuple with the DiskSpaceUsedGbQ90 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetDiskSpaceUsedGbQ90Ok() (*float32, bool) {
	if o == nil || IsNil(o.DiskSpaceUsedGbQ90) {
		return nil, false
	}
	return o.DiskSpaceUsedGbQ90, true
}

// HasDiskSpaceUsedGbQ90 returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasDiskSpaceUsedGbQ90() bool {
	if o != nil && !IsNil(o.DiskSpaceUsedGbQ90) {
		return true
	}

	return false
}

// SetDiskSpaceUsedGbQ90 gets a reference to the given float32 and assigns it to the DiskSpaceUsedGbQ90 field.
func (o *VmAnalyticsResponse) SetDiskSpaceUsedGbQ90(v float32) {
	o.DiskSpaceUsedGbQ90 = &v
}

// GetDiskSpaceTotalGb returns the DiskSpaceTotalGb field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetDiskSpaceTotalGb() float32 {
	if o == nil || IsNil(o.DiskSpaceTotalGb) {
		var ret float32
		return ret
	}
	return *o.DiskSpaceTotalGb
}

// GetDiskSpaceTotalGbOk returns a tuple with the DiskSpaceTotalGb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetDiskSpaceTotalGbOk() (*float32, bool) {
	if o == nil || IsNil(o.DiskSpaceTotalGb) {
		return nil, false
	}
	return o.DiskSpaceTotalGb, true
}

// HasDiskSpaceTotalGb returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasDiskSpaceTotalGb() bool {
	if o != nil && !IsNil(o.DiskSpaceTotalGb) {
		return true
	}

	return false
}

// SetDiskSpaceTotalGb gets a reference to the given float32 and assigns it to the DiskSpaceTotalGb field.
func (o *VmAnalyticsResponse) SetDiskSpaceTotalGb(v float32) {
	o.DiskSpaceTotalGb = &v
}

// GetDiskSpaceHumanLabel returns the DiskSpaceHumanLabel field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetDiskSpaceHumanLabel() string {
	if o == nil || IsNil(o.DiskSpaceHumanLabel) {
		var ret string
		return ret
	}
	return *o.DiskSpaceHumanLabel
}

// GetDiskSpaceHumanLabelOk returns a tuple with the DiskSpaceHumanLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetDiskSpaceHumanLabelOk() (*string, bool) {
	if o == nil || IsNil(o.DiskSpaceHumanLabel) {
		return nil, false
	}
	return o.DiskSpaceHumanLabel, true
}

// HasDiskSpaceHumanLabel returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasDiskSpaceHumanLabel() bool {
	if o != nil && !IsNil(o.DiskSpaceHumanLabel) {
		return true
	}

	return false
}

// SetDiskSpaceHumanLabel gets a reference to the given string and assigns it to the DiskSpaceHumanLabel field.
func (o *VmAnalyticsResponse) SetDiskSpaceHumanLabel(v string) {
	o.DiskSpaceHumanLabel = &v
}

// GetDiskWriteDataPresent returns the DiskWriteDataPresent field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetDiskWriteDataPresent() int32 {
	if o == nil || IsNil(o.DiskWriteDataPresent) {
		var ret int32
		return ret
	}
	return *o.DiskWriteDataPresent
}

// GetDiskWriteDataPresentOk returns a tuple with the DiskWriteDataPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetDiskWriteDataPresentOk() (*int32, bool) {
	if o == nil || IsNil(o.DiskWriteDataPresent) {
		return nil, false
	}
	return o.DiskWriteDataPresent, true
}

// HasDiskWriteDataPresent returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasDiskWriteDataPresent() bool {
	if o != nil && !IsNil(o.DiskWriteDataPresent) {
		return true
	}

	return false
}

// SetDiskWriteDataPresent gets a reference to the given int32 and assigns it to the DiskWriteDataPresent field.
func (o *VmAnalyticsResponse) SetDiskWriteDataPresent(v int32) {
	o.DiskWriteDataPresent = &v
}

// GetDiskWriteBps returns the DiskWriteBps field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetDiskWriteBps() float32 {
	if o == nil || IsNil(o.DiskWriteBps) {
		var ret float32
		return ret
	}
	return *o.DiskWriteBps
}

// GetDiskWriteBpsOk returns a tuple with the DiskWriteBps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetDiskWriteBpsOk() (*float32, bool) {
	if o == nil || IsNil(o.DiskWriteBps) {
		return nil, false
	}
	return o.DiskWriteBps, true
}

// HasDiskWriteBps returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasDiskWriteBps() bool {
	if o != nil && !IsNil(o.DiskWriteBps) {
		return true
	}

	return false
}

// SetDiskWriteBps gets a reference to the given float32 and assigns it to the DiskWriteBps field.
func (o *VmAnalyticsResponse) SetDiskWriteBps(v float32) {
	o.DiskWriteBps = &v
}

// GetDiskWriteHuman returns the DiskWriteHuman field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetDiskWriteHuman() float32 {
	if o == nil || IsNil(o.DiskWriteHuman) {
		var ret float32
		return ret
	}
	return *o.DiskWriteHuman
}

// GetDiskWriteHumanOk returns a tuple with the DiskWriteHuman field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetDiskWriteHumanOk() (*float32, bool) {
	if o == nil || IsNil(o.DiskWriteHuman) {
		return nil, false
	}
	return o.DiskWriteHuman, true
}

// HasDiskWriteHuman returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasDiskWriteHuman() bool {
	if o != nil && !IsNil(o.DiskWriteHuman) {
		return true
	}

	return false
}

// SetDiskWriteHuman gets a reference to the given float32 and assigns it to the DiskWriteHuman field.
func (o *VmAnalyticsResponse) SetDiskWriteHuman(v float32) {
	o.DiskWriteHuman = &v
}

// GetDiskWriteHumanLabel returns the DiskWriteHumanLabel field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetDiskWriteHumanLabel() string {
	if o == nil || IsNil(o.DiskWriteHumanLabel) {
		var ret string
		return ret
	}
	return *o.DiskWriteHumanLabel
}

// GetDiskWriteHumanLabelOk returns a tuple with the DiskWriteHumanLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetDiskWriteHumanLabelOk() (*string, bool) {
	if o == nil || IsNil(o.DiskWriteHumanLabel) {
		return nil, false
	}
	return o.DiskWriteHumanLabel, true
}

// HasDiskWriteHumanLabel returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasDiskWriteHumanLabel() bool {
	if o != nil && !IsNil(o.DiskWriteHumanLabel) {
		return true
	}

	return false
}

// SetDiskWriteHumanLabel gets a reference to the given string and assigns it to the DiskWriteHumanLabel field.
func (o *VmAnalyticsResponse) SetDiskWriteHumanLabel(v string) {
	o.DiskWriteHumanLabel = &v
}

// GetDiskReadDataPresent returns the DiskReadDataPresent field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetDiskReadDataPresent() int32 {
	if o == nil || IsNil(o.DiskReadDataPresent) {
		var ret int32
		return ret
	}
	return *o.DiskReadDataPresent
}

// GetDiskReadDataPresentOk returns a tuple with the DiskReadDataPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetDiskReadDataPresentOk() (*int32, bool) {
	if o == nil || IsNil(o.DiskReadDataPresent) {
		return nil, false
	}
	return o.DiskReadDataPresent, true
}

// HasDiskReadDataPresent returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasDiskReadDataPresent() bool {
	if o != nil && !IsNil(o.DiskReadDataPresent) {
		return true
	}

	return false
}

// SetDiskReadDataPresent gets a reference to the given int32 and assigns it to the DiskReadDataPresent field.
func (o *VmAnalyticsResponse) SetDiskReadDataPresent(v int32) {
	o.DiskReadDataPresent = &v
}

// GetDiskReadBps returns the DiskReadBps field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetDiskReadBps() float32 {
	if o == nil || IsNil(o.DiskReadBps) {
		var ret float32
		return ret
	}
	return *o.DiskReadBps
}

// GetDiskReadBpsOk returns a tuple with the DiskReadBps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetDiskReadBpsOk() (*float32, bool) {
	if o == nil || IsNil(o.DiskReadBps) {
		return nil, false
	}
	return o.DiskReadBps, true
}

// HasDiskReadBps returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasDiskReadBps() bool {
	if o != nil && !IsNil(o.DiskReadBps) {
		return true
	}

	return false
}

// SetDiskReadBps gets a reference to the given float32 and assigns it to the DiskReadBps field.
func (o *VmAnalyticsResponse) SetDiskReadBps(v float32) {
	o.DiskReadBps = &v
}

// GetDiskReadHuman returns the DiskReadHuman field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetDiskReadHuman() float32 {
	if o == nil || IsNil(o.DiskReadHuman) {
		var ret float32
		return ret
	}
	return *o.DiskReadHuman
}

// GetDiskReadHumanOk returns a tuple with the DiskReadHuman field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetDiskReadHumanOk() (*float32, bool) {
	if o == nil || IsNil(o.DiskReadHuman) {
		return nil, false
	}
	return o.DiskReadHuman, true
}

// HasDiskReadHuman returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasDiskReadHuman() bool {
	if o != nil && !IsNil(o.DiskReadHuman) {
		return true
	}

	return false
}

// SetDiskReadHuman gets a reference to the given float32 and assigns it to the DiskReadHuman field.
func (o *VmAnalyticsResponse) SetDiskReadHuman(v float32) {
	o.DiskReadHuman = &v
}

// GetDiskReadHumanLabel returns the DiskReadHumanLabel field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetDiskReadHumanLabel() string {
	if o == nil || IsNil(o.DiskReadHumanLabel) {
		var ret string
		return ret
	}
	return *o.DiskReadHumanLabel
}

// GetDiskReadHumanLabelOk returns a tuple with the DiskReadHumanLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetDiskReadHumanLabelOk() (*string, bool) {
	if o == nil || IsNil(o.DiskReadHumanLabel) {
		return nil, false
	}
	return o.DiskReadHumanLabel, true
}

// HasDiskReadHumanLabel returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasDiskReadHumanLabel() bool {
	if o != nil && !IsNil(o.DiskReadHumanLabel) {
		return true
	}

	return false
}

// SetDiskReadHumanLabel gets a reference to the given string and assigns it to the DiskReadHumanLabel field.
func (o *VmAnalyticsResponse) SetDiskReadHumanLabel(v string) {
	o.DiskReadHumanLabel = &v
}

// GetNetworkOutDataPresent returns the NetworkOutDataPresent field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetNetworkOutDataPresent() int32 {
	if o == nil || IsNil(o.NetworkOutDataPresent) {
		var ret int32
		return ret
	}
	return *o.NetworkOutDataPresent
}

// GetNetworkOutDataPresentOk returns a tuple with the NetworkOutDataPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetNetworkOutDataPresentOk() (*int32, bool) {
	if o == nil || IsNil(o.NetworkOutDataPresent) {
		return nil, false
	}
	return o.NetworkOutDataPresent, true
}

// HasNetworkOutDataPresent returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasNetworkOutDataPresent() bool {
	if o != nil && !IsNil(o.NetworkOutDataPresent) {
		return true
	}

	return false
}

// SetNetworkOutDataPresent gets a reference to the given int32 and assigns it to the NetworkOutDataPresent field.
func (o *VmAnalyticsResponse) SetNetworkOutDataPresent(v int32) {
	o.NetworkOutDataPresent = &v
}

// GetNetworkOutBps returns the NetworkOutBps field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetNetworkOutBps() float32 {
	if o == nil || IsNil(o.NetworkOutBps) {
		var ret float32
		return ret
	}
	return *o.NetworkOutBps
}

// GetNetworkOutBpsOk returns a tuple with the NetworkOutBps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetNetworkOutBpsOk() (*float32, bool) {
	if o == nil || IsNil(o.NetworkOutBps) {
		return nil, false
	}
	return o.NetworkOutBps, true
}

// HasNetworkOutBps returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasNetworkOutBps() bool {
	if o != nil && !IsNil(o.NetworkOutBps) {
		return true
	}

	return false
}

// SetNetworkOutBps gets a reference to the given float32 and assigns it to the NetworkOutBps field.
func (o *VmAnalyticsResponse) SetNetworkOutBps(v float32) {
	o.NetworkOutBps = &v
}

// GetNetworkOutHuman returns the NetworkOutHuman field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetNetworkOutHuman() float32 {
	if o == nil || IsNil(o.NetworkOutHuman) {
		var ret float32
		return ret
	}
	return *o.NetworkOutHuman
}

// GetNetworkOutHumanOk returns a tuple with the NetworkOutHuman field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetNetworkOutHumanOk() (*float32, bool) {
	if o == nil || IsNil(o.NetworkOutHuman) {
		return nil, false
	}
	return o.NetworkOutHuman, true
}

// HasNetworkOutHuman returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasNetworkOutHuman() bool {
	if o != nil && !IsNil(o.NetworkOutHuman) {
		return true
	}

	return false
}

// SetNetworkOutHuman gets a reference to the given float32 and assigns it to the NetworkOutHuman field.
func (o *VmAnalyticsResponse) SetNetworkOutHuman(v float32) {
	o.NetworkOutHuman = &v
}

// GetNetworkOutHumanLabel returns the NetworkOutHumanLabel field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetNetworkOutHumanLabel() string {
	if o == nil || IsNil(o.NetworkOutHumanLabel) {
		var ret string
		return ret
	}
	return *o.NetworkOutHumanLabel
}

// GetNetworkOutHumanLabelOk returns a tuple with the NetworkOutHumanLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetNetworkOutHumanLabelOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkOutHumanLabel) {
		return nil, false
	}
	return o.NetworkOutHumanLabel, true
}

// HasNetworkOutHumanLabel returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasNetworkOutHumanLabel() bool {
	if o != nil && !IsNil(o.NetworkOutHumanLabel) {
		return true
	}

	return false
}

// SetNetworkOutHumanLabel gets a reference to the given string and assigns it to the NetworkOutHumanLabel field.
func (o *VmAnalyticsResponse) SetNetworkOutHumanLabel(v string) {
	o.NetworkOutHumanLabel = &v
}

// GetNetworkInDataPresent returns the NetworkInDataPresent field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetNetworkInDataPresent() int32 {
	if o == nil || IsNil(o.NetworkInDataPresent) {
		var ret int32
		return ret
	}
	return *o.NetworkInDataPresent
}

// GetNetworkInDataPresentOk returns a tuple with the NetworkInDataPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetNetworkInDataPresentOk() (*int32, bool) {
	if o == nil || IsNil(o.NetworkInDataPresent) {
		return nil, false
	}
	return o.NetworkInDataPresent, true
}

// HasNetworkInDataPresent returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasNetworkInDataPresent() bool {
	if o != nil && !IsNil(o.NetworkInDataPresent) {
		return true
	}

	return false
}

// SetNetworkInDataPresent gets a reference to the given int32 and assigns it to the NetworkInDataPresent field.
func (o *VmAnalyticsResponse) SetNetworkInDataPresent(v int32) {
	o.NetworkInDataPresent = &v
}

// GetNetworkInBps returns the NetworkInBps field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetNetworkInBps() float32 {
	if o == nil || IsNil(o.NetworkInBps) {
		var ret float32
		return ret
	}
	return *o.NetworkInBps
}

// GetNetworkInBpsOk returns a tuple with the NetworkInBps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetNetworkInBpsOk() (*float32, bool) {
	if o == nil || IsNil(o.NetworkInBps) {
		return nil, false
	}
	return o.NetworkInBps, true
}

// HasNetworkInBps returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasNetworkInBps() bool {
	if o != nil && !IsNil(o.NetworkInBps) {
		return true
	}

	return false
}

// SetNetworkInBps gets a reference to the given float32 and assigns it to the NetworkInBps field.
func (o *VmAnalyticsResponse) SetNetworkInBps(v float32) {
	o.NetworkInBps = &v
}

// GetNetworkInHuman returns the NetworkInHuman field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetNetworkInHuman() float32 {
	if o == nil || IsNil(o.NetworkInHuman) {
		var ret float32
		return ret
	}
	return *o.NetworkInHuman
}

// GetNetworkInHumanOk returns a tuple with the NetworkInHuman field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetNetworkInHumanOk() (*float32, bool) {
	if o == nil || IsNil(o.NetworkInHuman) {
		return nil, false
	}
	return o.NetworkInHuman, true
}

// HasNetworkInHuman returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasNetworkInHuman() bool {
	if o != nil && !IsNil(o.NetworkInHuman) {
		return true
	}

	return false
}

// SetNetworkInHuman gets a reference to the given float32 and assigns it to the NetworkInHuman field.
func (o *VmAnalyticsResponse) SetNetworkInHuman(v float32) {
	o.NetworkInHuman = &v
}

// GetNetworkInHumanLabel returns the NetworkInHumanLabel field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetNetworkInHumanLabel() string {
	if o == nil || IsNil(o.NetworkInHumanLabel) {
		var ret string
		return ret
	}
	return *o.NetworkInHumanLabel
}

// GetNetworkInHumanLabelOk returns a tuple with the NetworkInHumanLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetNetworkInHumanLabelOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkInHumanLabel) {
		return nil, false
	}
	return o.NetworkInHumanLabel, true
}

// HasNetworkInHumanLabel returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasNetworkInHumanLabel() bool {
	if o != nil && !IsNil(o.NetworkInHumanLabel) {
		return true
	}

	return false
}

// SetNetworkInHumanLabel gets a reference to the given string and assigns it to the NetworkInHumanLabel field.
func (o *VmAnalyticsResponse) SetNetworkInHumanLabel(v string) {
	o.NetworkInHumanLabel = &v
}

// GetIsShownShort returns the IsShownShort field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetIsShownShort() int32 {
	if o == nil || IsNil(o.IsShownShort) {
		var ret int32
		return ret
	}
	return *o.IsShownShort
}

// GetIsShownShortOk returns a tuple with the IsShownShort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetIsShownShortOk() (*int32, bool) {
	if o == nil || IsNil(o.IsShownShort) {
		return nil, false
	}
	return o.IsShownShort, true
}

// HasIsShownShort returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasIsShownShort() bool {
	if o != nil && !IsNil(o.IsShownShort) {
		return true
	}

	return false
}

// SetIsShownShort gets a reference to the given int32 and assigns it to the IsShownShort field.
func (o *VmAnalyticsResponse) SetIsShownShort(v int32) {
	o.IsShownShort = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *VmAnalyticsResponse) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmAnalyticsResponse) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *VmAnalyticsResponse) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *VmAnalyticsResponse) SetType(v string) {
	o.Type = &v
}

func (o VmAnalyticsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VmAnalyticsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VmId) {
		toSerialize["vmId"] = o.VmId
	}
	if !IsNil(o.Timecode) {
		toSerialize["timecode"] = o.Timecode
	}
	if !IsNil(o.AvgDateStart) {
		toSerialize["avgDateStart"] = o.AvgDateStart
	}
	if !IsNil(o.AvgDateEnd) {
		toSerialize["avgDateEnd"] = o.AvgDateEnd
	}
	if !IsNil(o.QuantilesDateStart) {
		toSerialize["quantilesDateStart"] = o.QuantilesDateStart
	}
	if !IsNil(o.QuantilesDateEnd) {
		toSerialize["quantilesDateEnd"] = o.QuantilesDateEnd
	}
	if !IsNil(o.CpuDataPresent) {
		toSerialize["cpuDataPresent"] = o.CpuDataPresent
	}
	if !IsNil(o.CpuUtilizationAverageCores) {
		toSerialize["cpuUtilizationAverageCores"] = o.CpuUtilizationAverageCores
	}
	if !IsNil(o.CpuUtilizationAverageCoresQ10) {
		toSerialize["cpuUtilizationAverageCoresQ10"] = o.CpuUtilizationAverageCoresQ10
	}
	if !IsNil(o.CpuUtilizationAverageCoresQ90) {
		toSerialize["cpuUtilizationAverageCoresQ90"] = o.CpuUtilizationAverageCoresQ90
	}
	if !IsNil(o.CpuCoresNumber) {
		toSerialize["cpuCoresNumber"] = o.CpuCoresNumber
	}
	if !IsNil(o.CpuTotalPercent) {
		toSerialize["cpuTotalPercent"] = o.CpuTotalPercent
	}
	if !IsNil(o.CpuHumanLabel) {
		toSerialize["cpuHumanLabel"] = o.CpuHumanLabel
	}
	if !IsNil(o.RamDataPresent) {
		toSerialize["ramDataPresent"] = o.RamDataPresent
	}
	if !IsNil(o.RamUsageAverageMb) {
		toSerialize["ramUsageAverageMb"] = o.RamUsageAverageMb
	}
	if !IsNil(o.RamUsageAverageMbQ10) {
		toSerialize["ramUsageAverageMbQ10"] = o.RamUsageAverageMbQ10
	}
	if !IsNil(o.RamUsageAverageMbQ90) {
		toSerialize["ramUsageAverageMbQ90"] = o.RamUsageAverageMbQ90
	}
	if !IsNil(o.RamTotalAmountMb) {
		toSerialize["ramTotalAmountMb"] = o.RamTotalAmountMb
	}
	if !IsNil(o.RamHumanLabel) {
		toSerialize["ramHumanLabel"] = o.RamHumanLabel
	}
	if !IsNil(o.DiskUsedDataPresent) {
		toSerialize["diskUsedDataPresent"] = o.DiskUsedDataPresent
	}
	if !IsNil(o.DiskSpaceUsedGb) {
		toSerialize["diskSpaceUsedGb"] = o.DiskSpaceUsedGb
	}
	if !IsNil(o.DiskSpaceUsedGbQ10) {
		toSerialize["diskSpaceUsedGbQ10"] = o.DiskSpaceUsedGbQ10
	}
	if !IsNil(o.DiskSpaceUsedGbQ90) {
		toSerialize["diskSpaceUsedGbQ90"] = o.DiskSpaceUsedGbQ90
	}
	if !IsNil(o.DiskSpaceTotalGb) {
		toSerialize["diskSpaceTotalGb"] = o.DiskSpaceTotalGb
	}
	if !IsNil(o.DiskSpaceHumanLabel) {
		toSerialize["diskSpaceHumanLabel"] = o.DiskSpaceHumanLabel
	}
	if !IsNil(o.DiskWriteDataPresent) {
		toSerialize["diskWriteDataPresent"] = o.DiskWriteDataPresent
	}
	if !IsNil(o.DiskWriteBps) {
		toSerialize["diskWriteBps"] = o.DiskWriteBps
	}
	if !IsNil(o.DiskWriteHuman) {
		toSerialize["diskWriteHuman"] = o.DiskWriteHuman
	}
	if !IsNil(o.DiskWriteHumanLabel) {
		toSerialize["diskWriteHumanLabel"] = o.DiskWriteHumanLabel
	}
	if !IsNil(o.DiskReadDataPresent) {
		toSerialize["diskReadDataPresent"] = o.DiskReadDataPresent
	}
	if !IsNil(o.DiskReadBps) {
		toSerialize["diskReadBps"] = o.DiskReadBps
	}
	if !IsNil(o.DiskReadHuman) {
		toSerialize["diskReadHuman"] = o.DiskReadHuman
	}
	if !IsNil(o.DiskReadHumanLabel) {
		toSerialize["diskReadHumanLabel"] = o.DiskReadHumanLabel
	}
	if !IsNil(o.NetworkOutDataPresent) {
		toSerialize["networkOutDataPresent"] = o.NetworkOutDataPresent
	}
	if !IsNil(o.NetworkOutBps) {
		toSerialize["networkOutBps"] = o.NetworkOutBps
	}
	if !IsNil(o.NetworkOutHuman) {
		toSerialize["networkOutHuman"] = o.NetworkOutHuman
	}
	if !IsNil(o.NetworkOutHumanLabel) {
		toSerialize["networkOutHumanLabel"] = o.NetworkOutHumanLabel
	}
	if !IsNil(o.NetworkInDataPresent) {
		toSerialize["networkInDataPresent"] = o.NetworkInDataPresent
	}
	if !IsNil(o.NetworkInBps) {
		toSerialize["networkInBps"] = o.NetworkInBps
	}
	if !IsNil(o.NetworkInHuman) {
		toSerialize["networkInHuman"] = o.NetworkInHuman
	}
	if !IsNil(o.NetworkInHumanLabel) {
		toSerialize["networkInHumanLabel"] = o.NetworkInHumanLabel
	}
	if !IsNil(o.IsShownShort) {
		toSerialize["isShownShort"] = o.IsShownShort
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableVmAnalyticsResponse struct {
	value *VmAnalyticsResponse
	isSet bool
}

func (v NullableVmAnalyticsResponse) Get() *VmAnalyticsResponse {
	return v.value
}

func (v *NullableVmAnalyticsResponse) Set(val *VmAnalyticsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableVmAnalyticsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableVmAnalyticsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmAnalyticsResponse(val *VmAnalyticsResponse) *NullableVmAnalyticsResponse {
	return &NullableVmAnalyticsResponse{value: val, isSet: true}
}

func (v NullableVmAnalyticsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmAnalyticsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


