/*
Public EMMA API

This <b>Infrastructure</b> API is for managing the cloud infrastructure within a project.  To access the API, enter your project, navigate to <b>Settings</b> > <b>Service Apps</b>, and create a service application. Select the access level: <b>Read</b>, <b>Operate</b>, or <b>Manage</b>.  After creating the service application, copy the <b>Client ID</b> and <b>Client Secret</b>. Send an API request to the endpoint <b>/issue-token</b> as specified in the <b>Authentication</b> section of the API documentation. You will receive access and refresh tokens in the response.  The Bearer access token is a text string, included in the request header:  -H \"Authorization: Bearer {token}\"  Use this token for API requests.  The access token will expire in 5 minutes, after which it must be refreshed using the refresh token.

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emma

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VmEditHardware type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VmEditHardware{}

// VmEditHardware struct for VmEditHardware
type VmEditHardware struct {
	// Action with a virtual machine
	Action interface{} `json:"action"`
	VCpu   interface{} `json:"vCpu"`
	// vCPU type
	VCpuType interface{} `json:"vCpuType,omitempty"`
	RamGb    interface{} `json:"ramGb"`
	VolumeGb interface{} `json:"volumeGb"`
}

type _VmEditHardware VmEditHardware

// NewVmEditHardware instantiates a new VmEditHardware object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmEditHardware(action interface{}, vCpu interface{}, ramGb interface{}, volumeGb interface{}) *VmEditHardware {
	this := VmEditHardware{}
	this.Action = action
	this.VCpu = vCpu
	this.RamGb = ramGb
	this.VolumeGb = volumeGb
	return &this
}

// NewVmEditHardwareWithDefaults instantiates a new VmEditHardware object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmEditHardwareWithDefaults() *VmEditHardware {
	this := VmEditHardware{}
	return &this
}

// GetAction returns the Action field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *VmEditHardware) GetAction() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmEditHardware) GetActionOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *VmEditHardware) SetAction(v interface{}) {
	o.Action = v
}

// GetVCpu returns the VCpu field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *VmEditHardware) GetVCpu() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.VCpu
}

// GetVCpuOk returns a tuple with the VCpu field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmEditHardware) GetVCpuOk() (*interface{}, bool) {
	if o == nil || IsNil(o.VCpu) {
		return nil, false
	}
	return &o.VCpu, true
}

// SetVCpu sets field value
func (o *VmEditHardware) SetVCpu(v interface{}) {
	o.VCpu = v
}

// GetVCpuType returns the VCpuType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmEditHardware) GetVCpuType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.VCpuType
}

// GetVCpuTypeOk returns a tuple with the VCpuType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmEditHardware) GetVCpuTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.VCpuType) {
		return nil, false
	}
	return &o.VCpuType, true
}

// HasVCpuType returns a boolean if a field has been set.
func (o *VmEditHardware) HasVCpuType() bool {
	if o != nil && !IsNil(o.VCpuType) {
		return true
	}

	return false
}

// SetVCpuType gets a reference to the given interface{} and assigns it to the VCpuType field.
func (o *VmEditHardware) SetVCpuType(v interface{}) {
	o.VCpuType = v
}

// GetRamGb returns the RamGb field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *VmEditHardware) GetRamGb() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.RamGb
}

// GetRamGbOk returns a tuple with the RamGb field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmEditHardware) GetRamGbOk() (*interface{}, bool) {
	if o == nil || IsNil(o.RamGb) {
		return nil, false
	}
	return &o.RamGb, true
}

// SetRamGb sets field value
func (o *VmEditHardware) SetRamGb(v interface{}) {
	o.RamGb = v
}

// GetVolumeGb returns the VolumeGb field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *VmEditHardware) GetVolumeGb() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.VolumeGb
}

// GetVolumeGbOk returns a tuple with the VolumeGb field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmEditHardware) GetVolumeGbOk() (*interface{}, bool) {
	if o == nil || IsNil(o.VolumeGb) {
		return nil, false
	}
	return &o.VolumeGb, true
}

// SetVolumeGb sets field value
func (o *VmEditHardware) SetVolumeGb(v interface{}) {
	o.VolumeGb = v
}

func (o VmEditHardware) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VmEditHardware) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Action != nil {
		toSerialize["action"] = o.Action
	}
	if o.VCpu != nil {
		toSerialize["vCpu"] = o.VCpu
	}
	if o.VCpuType != nil {
		toSerialize["vCpuType"] = o.VCpuType
	}
	if o.RamGb != nil {
		toSerialize["ramGb"] = o.RamGb
	}
	if o.VolumeGb != nil {
		toSerialize["volumeGb"] = o.VolumeGb
	}
	return toSerialize, nil
}

func (o *VmEditHardware) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
		"vCpu",
		"ramGb",
		"volumeGb",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVmEditHardware := _VmEditHardware{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVmEditHardware)

	if err != nil {
		return err
	}

	*o = VmEditHardware(varVmEditHardware)

	return err
}

type NullableVmEditHardware struct {
	value *VmEditHardware
	isSet bool
}

func (v NullableVmEditHardware) Get() *VmEditHardware {
	return v.value
}

func (v *NullableVmEditHardware) Set(val *VmEditHardware) {
	v.value = val
	v.isSet = true
}

func (v NullableVmEditHardware) IsSet() bool {
	return v.isSet
}

func (v *NullableVmEditHardware) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmEditHardware(val *VmEditHardware) *NullableVmEditHardware {
	return &NullableVmEditHardware{value: val, isSet: true}
}

func (v NullableVmEditHardware) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmEditHardware) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
