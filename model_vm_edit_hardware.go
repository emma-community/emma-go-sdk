/*
Public EMMA API

### About Infrastructure API   **Base URL:** **<u>https://api.emma.ms/external</u>**   This **Infrastructure API** is for managing the emma cloud infrastructure within a project. The API enables you to view, create, edit, and delete _Virtual machines, Spot instances, Applications, Kubernetes clusters, SSH keys, Security groups, and Backup policies_. For creating the resources you can use the endpoints with the dictionaries: _Data centers, Locations, Providers, Operating systems, Virtual machines configurations, Spot instances configurations, Kubernetes clusters configurations._   ### Authentication   #### 1. Create service application   To access the API, enter your project, navigate to **Settings** > **Service Apps**, and create a service application. Select the access level **Read**, **Operate**, or **Manage**.   - **Read** - only GET methods are allowed in the API.   - **Operate** - some operations are allowed with the resources (e.g. _Start, Reboot,_ and _Shutdown_ of the Virtual machines).   - **Manage** - full creating, updating, and deleting of the resources is allowed.     #### 2. Get access token   - Copy the **Client ID** and **Client Secret** in the service application.  - Send an API request to the endpoint **_/issue-token** as specified in the **Authentication** section of the API documentation. You will receive access and refresh tokens in the response.   _For Linux / Mac:_  ```  curl -X POST https://api.emma.ms/external/v1/issue-token \\  -H \"Content-Type: application/json\" \\  -d '{\"clientId\": \"YOUR-CLIENT-ID\", \"clientSecret\": \"YOUR-CLIENT-SECRET\"}'  ```  _For Windows:_  ```  curl -X POST https://api.emma.ms/external/v1/issue-token ^  -H \"Content-Type: application/json\" ^  -d \"{\\\"clientId\\\": \\\"YOUR-CLIENT-ID\\\", \\\"clientSecret\\\": \\\"YOUR-CLIENT-SECRET\\\"}\"  ```      #### 3. Use access token in requests  The Bearer access token is a text string, included in the request header, for example:   _For Linux / Mac:_  ```  curl -X GET https://api.emma.ms/external/v1/locations -H \"Authorization: Bearer YOUR-ACCESS-TOKEN-HERE\"  ```   Use this token for the API requests.     #### 4. Refresh token  The access token will expire in 10 minutes. A new access token may be created using the refresh token (without Client ID and Client Secret).   To get a new access token send a request to the **_/refresh-token** endpoint:    _For Linux / Mac:_  ```  curl -X POST https://api.emma.ms/external/v1/refresh-token \\  -H \"Content-Type: application/json\" \\  -H \"Authorization: Bearer YOUR-ACCESS-TOKEN\" \\  -d '{\"refreshToken\": \"YOUR-REFRESH-TOKEN\"}'  ```       ### Possible response status codes   We use standard HTTP response codes to show the success or failure of requests.   `2xx` - successful responses.   `4xx` - client error responses (the response contains an explanation of the error).   `5xx` - server error responses.   The API uses the following status codes:   | Status Code | Description                  | Notes                                                                  |  |-------------|------------------------------|------------------------------------------------------------------------|  | 200         | OK                           | The request was successful.                                             |  | 201         | Created                      | The object was successfully created. This code is only used with objects that are created immediately.  | 400         | Bad Request                  | The request could not be understood by the server. Incoming parameters might not be valid. |  | 401         | Unauthorized            | The client is unauthenticated. The client must authenticate itself to get the requested response. |  | 403         | Forbidden                   | The client does not have access rights to the content.  | 404         | Not Found                    | The requested resource is not found.                                    |  | 409         | Conflict | This response is sent when a request conflicts with the current state of the object (e.g. deleting the security group with the compute instances in it).|  | 422         | Unprocessable Content   | The request was well-formed but was unable to be followed due to incorrect field values (e.g. creation of a virtual machine in the non-existent data center).  |  | 500         | Internal server Error                 | The server could not return the representation due to an internal server error. |

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package emma

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VmEditHardware type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VmEditHardware{}

// VmEditHardware struct for VmEditHardware
type VmEditHardware struct {
	// Action with a virtual machine
	Action string `json:"action"`
	// Number of virtual Central Processing Units (vCPUs)
	VCpu int32 `json:"vCpu"`
	// Type of virtual Central Processing Units (vCPUs)
	VCpuType *string `json:"vCpuType,omitempty"`
	// Capacity of the RAM in gigabytes
	RamGb float32 `json:"ramGb"`
	// Capacity of the volume in gigabytes
	VolumeGb int32 `json:"volumeGb"`
}

type _VmEditHardware VmEditHardware

// NewVmEditHardware instantiates a new VmEditHardware object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmEditHardware(action string, vCpu int32, ramGb float32, volumeGb int32) *VmEditHardware {
	this := VmEditHardware{}
	this.Action = action
	this.VCpu = vCpu
	this.RamGb = ramGb
	this.VolumeGb = volumeGb
	return &this
}

// NewVmEditHardwareWithDefaults instantiates a new VmEditHardware object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmEditHardwareWithDefaults() *VmEditHardware {
	this := VmEditHardware{}
	return &this
}

// GetAction returns the Action field value
func (o *VmEditHardware) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *VmEditHardware) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *VmEditHardware) SetAction(v string) {
	o.Action = v
}

// GetVCpu returns the VCpu field value
func (o *VmEditHardware) GetVCpu() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VCpu
}

// GetVCpuOk returns a tuple with the VCpu field value
// and a boolean to check if the value has been set.
func (o *VmEditHardware) GetVCpuOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VCpu, true
}

// SetVCpu sets field value
func (o *VmEditHardware) SetVCpu(v int32) {
	o.VCpu = v
}

// GetVCpuType returns the VCpuType field value if set, zero value otherwise.
func (o *VmEditHardware) GetVCpuType() string {
	if o == nil || IsNil(o.VCpuType) {
		var ret string
		return ret
	}
	return *o.VCpuType
}

// GetVCpuTypeOk returns a tuple with the VCpuType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmEditHardware) GetVCpuTypeOk() (*string, bool) {
	if o == nil || IsNil(o.VCpuType) {
		return nil, false
	}
	return o.VCpuType, true
}

// HasVCpuType returns a boolean if a field has been set.
func (o *VmEditHardware) HasVCpuType() bool {
	if o != nil && !IsNil(o.VCpuType) {
		return true
	}

	return false
}

// SetVCpuType gets a reference to the given string and assigns it to the VCpuType field.
func (o *VmEditHardware) SetVCpuType(v string) {
	o.VCpuType = &v
}

// GetRamGb returns the RamGb field value
func (o *VmEditHardware) GetRamGb() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RamGb
}

// GetRamGbOk returns a tuple with the RamGb field value
// and a boolean to check if the value has been set.
func (o *VmEditHardware) GetRamGbOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RamGb, true
}

// SetRamGb sets field value
func (o *VmEditHardware) SetRamGb(v float32) {
	o.RamGb = v
}

// GetVolumeGb returns the VolumeGb field value
func (o *VmEditHardware) GetVolumeGb() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VolumeGb
}

// GetVolumeGbOk returns a tuple with the VolumeGb field value
// and a boolean to check if the value has been set.
func (o *VmEditHardware) GetVolumeGbOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeGb, true
}

// SetVolumeGb sets field value
func (o *VmEditHardware) SetVolumeGb(v int32) {
	o.VolumeGb = v
}

func (o VmEditHardware) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VmEditHardware) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	toSerialize["vCpu"] = o.VCpu
	if !IsNil(o.VCpuType) {
		toSerialize["vCpuType"] = o.VCpuType
	}
	toSerialize["ramGb"] = o.RamGb
	toSerialize["volumeGb"] = o.VolumeGb
	return toSerialize, nil
}

func (o *VmEditHardware) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
		"vCpu",
		"ramGb",
		"volumeGb",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVmEditHardware := _VmEditHardware{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVmEditHardware)

	if err != nil {
		return err
	}

	*o = VmEditHardware(varVmEditHardware)

	return err
}

type NullableVmEditHardware struct {
	value *VmEditHardware
	isSet bool
}

func (v NullableVmEditHardware) Get() *VmEditHardware {
	return v.value
}

func (v *NullableVmEditHardware) Set(val *VmEditHardware) {
	v.value = val
	v.isSet = true
}

func (v NullableVmEditHardware) IsSet() bool {
	return v.isSet
}

func (v *NullableVmEditHardware) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmEditHardware(val *VmEditHardware) *NullableVmEditHardware {
	return &NullableVmEditHardware{value: val, isSet: true}
}

func (v NullableVmEditHardware) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmEditHardware) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
